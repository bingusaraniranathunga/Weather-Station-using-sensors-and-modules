
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002162  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  00002162  000021f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  00800110  00800110  000022a6  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000022a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000326  00000000  00000000  000022c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001667  00000000  00000000  000025ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000398  00000000  00000000  00003c53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013e8  00000000  00000000  00003feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  000053d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ab  00000000  00000000  00005634  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006eb  00000000  00000000  000059df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  000060ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__ctors_end>
       4:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       8:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
       c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      10:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      14:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      18:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      1c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      20:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      24:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      28:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      30:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      34:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      38:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      3c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      44:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      48:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      4c:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      50:	0c 94 88 00 	jmp	0x110	; 0x110 <__bad_interrupt>
      54:	07 63       	ori	r16, 0x37	; 55
      56:	42 36       	cpi	r20, 0x62	; 98
      58:	b7 9b       	sbis	0x16, 7	; 22
      5a:	d8 a7       	std	Y+40, r29	; 0x28
      5c:	1a 39       	cpi	r17, 0x9A	; 154
      5e:	68 56       	subi	r22, 0x68	; 104
      60:	18 ae       	std	Y+56, r1	; 0x38
      62:	ba ab       	std	Y+50, r27	; 0x32
      64:	55 8c       	ldd	r5, Z+29	; 0x1d
      66:	1d 3c       	cpi	r17, 0xCD	; 205
      68:	b7 cc       	rjmp	.-1682   	; 0xfffff9d8 <__eeprom_end+0xff7ef9d8>
      6a:	57 63       	ori	r21, 0x37	; 55
      6c:	bd 6d       	ori	r27, 0xDD	; 221
      6e:	ed fd       	.word	0xfded	; ????
      70:	75 3e       	cpi	r23, 0xE5	; 229
      72:	f6 17       	cp	r31, r22
      74:	72 31       	cpi	r23, 0x12	; 18
      76:	bf 00       	.word	0x00bf	; ????
      78:	00 00       	nop
      7a:	80 3f       	cpi	r24, 0xF0	; 240
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <__stack+0x71>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
      d4:	00 00       	nop

000000d6 <__ctors_end>:
      d6:	11 24       	eor	r1, r1
      d8:	1f be       	out	0x3f, r1	; 63
      da:	cf e5       	ldi	r28, 0x5F	; 95
      dc:	d8 e0       	ldi	r29, 0x08	; 8
      de:	de bf       	out	0x3e, r29	; 62
      e0:	cd bf       	out	0x3d, r28	; 61

000000e2 <__do_copy_data>:
      e2:	11 e0       	ldi	r17, 0x01	; 1
      e4:	a0 e6       	ldi	r26, 0x60	; 96
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	e2 e6       	ldi	r30, 0x62	; 98
      ea:	f1 e2       	ldi	r31, 0x21	; 33
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <.do_copy_data_start>

000000ee <.do_copy_data_loop>:
      ee:	05 90       	lpm	r0, Z+
      f0:	0d 92       	st	X+, r0

000000f2 <.do_copy_data_start>:
      f2:	a0 31       	cpi	r26, 0x10	; 16
      f4:	b1 07       	cpc	r27, r17
      f6:	d9 f7       	brne	.-10     	; 0xee <.do_copy_data_loop>

000000f8 <__do_clear_bss>:
      f8:	11 e0       	ldi	r17, 0x01	; 1
      fa:	a0 e1       	ldi	r26, 0x10	; 16
      fc:	b1 e0       	ldi	r27, 0x01	; 1
      fe:	01 c0       	rjmp	.+2      	; 0x102 <.do_clear_bss_start>

00000100 <.do_clear_bss_loop>:
     100:	1d 92       	st	X+, r1

00000102 <.do_clear_bss_start>:
     102:	a5 35       	cpi	r26, 0x55	; 85
     104:	b1 07       	cpc	r27, r17
     106:	e1 f7       	brne	.-8      	; 0x100 <.do_clear_bss_loop>
     108:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <main>
     10c:	0c 94 af 10 	jmp	0x215e	; 0x215e <_exit>

00000110 <__bad_interrupt>:
     110:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000114 <lcdcommand>:
void lcd_print(char *str);
void lcd_clear(void);

void lcdcommand(unsigned char cmnd)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd & 0xf0);	// SEND COMMAND TO DATA PORT
     114:	98 b3       	in	r25, 0x18	; 24
     116:	28 2f       	mov	r18, r24
     118:	20 7f       	andi	r18, 0xF0	; 240
     11a:	9f 70       	andi	r25, 0x0F	; 15
     11c:	29 2b       	or	r18, r25
     11e:	28 bb       	out	0x18, r18	; 24
	LCD_DPRT &= ~ (1<<LCD_RS);						// RS = 0 FOR COMMAND
     120:	c0 98       	cbi	0x18, 0	; 24
	LCD_DPRT |= (1<<LCD_EN);						// EN = 1 FOR H TO L PULSE
     122:	c1 9a       	sbi	0x18, 1	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     124:	21 e0       	ldi	r18, 0x01	; 1
     126:	92 2f       	mov	r25, r18
     128:	9a 95       	dec	r25
     12a:	f1 f7       	brne	.-4      	; 0x128 <lcdcommand+0x14>
	_delay_us(1);									// WAIT FOR MAKE ENABLE WIDE
	LCD_DPRT &= ~(1<<LCD_EN);						// EN = 0 FOR H TO L PULSE
     12c:	c1 98       	cbi	0x18, 1	; 24
     12e:	92 e4       	ldi	r25, 0x42	; 66
     130:	9a 95       	dec	r25
     132:	f1 f7       	brne	.-4      	; 0x130 <lcdcommand+0x1c>
	_delay_us(100);									// WAIT FOR MAKE ENABLE WIDE
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd << 4);		// SEND COMMAND TO DATA PORT
     134:	98 b3       	in	r25, 0x18	; 24
     136:	82 95       	swap	r24
     138:	80 7f       	andi	r24, 0xF0	; 240
     13a:	9f 70       	andi	r25, 0x0F	; 15
     13c:	98 2b       	or	r25, r24
     13e:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT |= (1<<LCD_EN);						// EN = 1 FOR H TO L PULSE
     140:	c1 9a       	sbi	0x18, 1	; 24
     142:	2a 95       	dec	r18
     144:	f1 f7       	brne	.-4      	; 0x142 <lcdcommand+0x2e>
	_delay_us(1);									// WAIT FOR MAKE ENABLE WIDE
	LCD_DPRT &= ~(1<<LCD_EN);						// EN = 0 FOR H TO L PULSE
     146:	c1 98       	cbi	0x18, 1	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     148:	88 ee       	ldi	r24, 0xE8	; 232
     14a:	93 e0       	ldi	r25, 0x03	; 3
     14c:	01 97       	sbiw	r24, 0x01	; 1
     14e:	f1 f7       	brne	.-4      	; 0x14c <lcdcommand+0x38>
	_delay_ms(2);									// WAIT FOR MAKE ENABLE WIDE
}
     150:	08 95       	ret

00000152 <lcddata>:

void lcddata(unsigned int data)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data & 0xf0);		// SEND DATA TO DATA PORT 
     152:	98 b3       	in	r25, 0x18	; 24
     154:	28 2f       	mov	r18, r24
     156:	20 7f       	andi	r18, 0xF0	; 240
     158:	9f 70       	andi	r25, 0x0F	; 15
     15a:	29 2b       	or	r18, r25
     15c:	28 bb       	out	0x18, r18	; 24
	LCD_DPRT |= (1<<LCD_RS);						// MAKE RS = 1 FOR DATA 
     15e:	c0 9a       	sbi	0x18, 0	; 24
	LCD_DPRT |= (1<<LCD_EN);						// EN=0 FOR H TO L PULSE 
     160:	c1 9a       	sbi	0x18, 1	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     162:	21 e0       	ldi	r18, 0x01	; 1
     164:	92 2f       	mov	r25, r18
     166:	9a 95       	dec	r25
     168:	f1 f7       	brne	.-4      	; 0x166 <lcddata+0x14>
	_delay_us(1);									// WAIT FOR MAKE ENABLE WIDE 
	LCD_DPRT &= ~(1<<LCD_EN);						// EN = 0 FOR H TO L PULSE 
     16a:	c1 98       	cbi	0x18, 1	; 24
     16c:	92 e4       	ldi	r25, 0x42	; 66
     16e:	9a 95       	dec	r25
     170:	f1 f7       	brne	.-4      	; 0x16e <lcddata+0x1c>
	_delay_us(100);									// WAIT FOR MAKE ENABLE WIDE 
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data << 4);		
     172:	98 b3       	in	r25, 0x18	; 24
     174:	82 95       	swap	r24
     176:	80 7f       	andi	r24, 0xF0	; 240
     178:	9f 70       	andi	r25, 0x0F	; 15
     17a:	98 2b       	or	r25, r24
     17c:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT |= (1<<LCD_EN);						// EN=0 FOR H TO L PULSE
     17e:	c1 9a       	sbi	0x18, 1	; 24
     180:	2a 95       	dec	r18
     182:	f1 f7       	brne	.-4      	; 0x180 <lcddata+0x2e>
	_delay_us(1);									// WAIT FOR MAKE ENABLE WIDE
	LCD_DPRT &= ~(1<<LCD_EN);						// EN = 0 FOR H TO L PULSE
     184:	c1 98       	cbi	0x18, 1	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     186:	88 ee       	ldi	r24, 0xE8	; 232
     188:	93 e0       	ldi	r25, 0x03	; 3
     18a:	01 97       	sbiw	r24, 0x01	; 1
     18c:	f1 f7       	brne	.-4      	; 0x18a <lcddata+0x38>
	_delay_ms(2);									// WAIT FOR MAKE ENABLE WIDE
}
     18e:	08 95       	ret

00000190 <lcdinit>:

void lcdinit(void)
{
	LCD_DDDR = 0xFF;
     190:	8f ef       	ldi	r24, 0xFF	; 255
     192:	87 bb       	out	0x17, r24	; 23
     194:	80 ed       	ldi	r24, 0xD0	; 208
     196:	97 e0       	ldi	r25, 0x07	; 7
     198:	22 e3       	ldi	r18, 0x32	; 50
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	f9 01       	movw	r30, r18
     19e:	31 97       	sbiw	r30, 0x01	; 1
     1a0:	f1 f7       	brne	.-4      	; 0x19e <lcdinit+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     1a4:	d9 f7       	brne	.-10     	; 0x19c <lcdinit+0xc>
	_delay_ms(200);									// WAIT FOR SOME TIME
	lcdcommand(0x33);
     1a6:	83 e3       	ldi	r24, 0x33	; 51
     1a8:	0e 94 8a 00 	call	0x114	; 0x114 <lcdcommand>
	lcdcommand(0x32);								// SEND $32 FOR INIT OT 0X02 
     1ac:	82 e3       	ldi	r24, 0x32	; 50
     1ae:	0e 94 8a 00 	call	0x114	; 0x114 <lcdcommand>
	lcdcommand(0x28);								// INIT. LCD 2 LINE, 5 X 7 MATRIX
     1b2:	88 e2       	ldi	r24, 0x28	; 40
     1b4:	0e 94 8a 00 	call	0x114	; 0x114 <lcdcommand>
	lcdcommand(0x0C);								// DISPLAY ON CURSOR ON
     1b8:	8c e0       	ldi	r24, 0x0C	; 12
     1ba:	0e 94 8a 00 	call	0x114	; 0x114 <lcdcommand>
	lcdcommand(0x01);								// LCD CLEAR
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	0e 94 8a 00 	call	0x114	; 0x114 <lcdcommand>
     1c4:	88 ee       	ldi	r24, 0xE8	; 232
     1c6:	93 e0       	ldi	r25, 0x03	; 3
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <lcdinit+0x38>
	_delay_ms(2);
	lcdcommand(0x82);								// SHIFT CURSOR TO WRITE
     1cc:	82 e8       	ldi	r24, 0x82	; 130
     1ce:	0e 94 8a 00 	call	0x114	; 0x114 <lcdcommand>
}
     1d2:	08 95       	ret

000001d4 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char x, unsigned char y)
{
     1d4:	df 93       	push	r29
     1d6:	cf 93       	push	r28
     1d8:	00 d0       	rcall	.+0      	; 0x1da <lcd_gotoxy+0x6>
     1da:	cd b7       	in	r28, 0x3d	; 61
     1dc:	de b7       	in	r29, 0x3e	; 62
	unsigned char firstcharadd[]={0x80, 0xC0};
     1de:	90 e8       	ldi	r25, 0x80	; 128
     1e0:	99 83       	std	Y+1, r25	; 0x01
     1e2:	90 ec       	ldi	r25, 0xC0	; 192
     1e4:	9a 83       	std	Y+2, r25	; 0x02
	lcdcommand(firstcharadd[y] + x);
     1e6:	fe 01       	movw	r30, r28
     1e8:	e6 0f       	add	r30, r22
     1ea:	f1 1d       	adc	r31, r1
     1ec:	91 81       	ldd	r25, Z+1	; 0x01
     1ee:	89 0f       	add	r24, r25
     1f0:	0e 94 8a 00 	call	0x114	; 0x114 <lcdcommand>
}
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0
     1f8:	cf 91       	pop	r28
     1fa:	df 91       	pop	r29
     1fc:	08 95       	ret

000001fe <lcd_print>:

void lcd_print(char *str)
{
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	ec 01       	movw	r28, r24
     206:	10 e0       	ldi	r17, 0x00	; 0
     208:	04 c0       	rjmp	.+8      	; 0x212 <lcd_print+0x14>
	unsigned char i=0;
	while (str[i] |= 0)
	{
		lcddata(str[i]);
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	0e 94 a9 00 	call	0x152	; 0x152 <lcddata>
		i++;
     210:	1f 5f       	subi	r17, 0xFF	; 255
}

void lcd_print(char *str)
{
	unsigned char i=0;
	while (str[i] |= 0)
     212:	fe 01       	movw	r30, r28
     214:	e1 0f       	add	r30, r17
     216:	f1 1d       	adc	r31, r1
     218:	80 81       	ld	r24, Z
     21a:	88 23       	and	r24, r24
     21c:	b1 f7       	brne	.-20     	; 0x20a <lcd_print+0xc>
	{
		lcddata(str[i]);
		i++;
	}
}
     21e:	df 91       	pop	r29
     220:	cf 91       	pop	r28
     222:	1f 91       	pop	r17
     224:	08 95       	ret

00000226 <lcd_print_xy>:

void lcd_print_xy(char row, char pos, char* str)
{
     226:	cf 93       	push	r28
     228:	df 93       	push	r29
     22a:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
     22c:	88 23       	and	r24, r24
     22e:	31 f4       	brne	.+12     	; 0x23c <lcd_print_xy+0x16>
     230:	60 31       	cpi	r22, 0x10	; 16
     232:	68 f4       	brcc	.+26     	; 0x24e <lcd_print_xy+0x28>
	lcdcommand((pos & 0x0F)|0x80);		/* Command of first row and required position<16 */
     234:	6f 70       	andi	r22, 0x0F	; 15
     236:	86 2f       	mov	r24, r22
     238:	80 68       	ori	r24, 0x80	; 128
     23a:	07 c0       	rjmp	.+14     	; 0x24a <lcd_print_xy+0x24>
	else if (row == 1 && pos<16)
     23c:	81 30       	cpi	r24, 0x01	; 1
     23e:	39 f4       	brne	.+14     	; 0x24e <lcd_print_xy+0x28>
     240:	60 31       	cpi	r22, 0x10	; 16
     242:	28 f4       	brcc	.+10     	; 0x24e <lcd_print_xy+0x28>
	lcdcommand((pos & 0x0F)|0xC0);		/* Command of first row and required position<16 */
     244:	6f 70       	andi	r22, 0x0F	; 15
     246:	86 2f       	mov	r24, r22
     248:	80 6c       	ori	r24, 0xC0	; 192
     24a:	0e 94 8a 00 	call	0x114	; 0x114 <lcdcommand>
	lcd_print(str);					/* Call LCD string function */
     24e:	ce 01       	movw	r24, r28
     250:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
}
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	08 95       	ret

0000025a <lcd_clear>:

void lcd_clear(void)
{
	lcdcommand(0x01);
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	0e 94 8a 00 	call	0x114	; 0x114 <lcdcommand>
     260:	88 ee       	ldi	r24, 0xE8	; 232
     262:	93 e0       	ldi	r25, 0x03	; 3
     264:	01 97       	sbiw	r24, 0x01	; 1
     266:	f1 f7       	brne	.-4      	; 0x264 <lcd_clear+0xa>
	_delay_ms(2);
}
     268:	08 95       	ret

0000026a <TWI_Init>:

uint8_t i2cdebug = 0;

void TWI_Init(void){
    
    TWSR = 0x00; // Prescaler 1
     26a:	11 b8       	out	0x01, r1	; 1
    TWBR = 0x00; // Decimal 32
     26c:	10 b8       	out	0x00, r1	; 0
}
     26e:	08 95       	ret

00000270 <TWI_Start>:

void TWI_Start(void){
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); // Enable TWI, generate start condition and clear interrupt flag
     270:	84 ea       	ldi	r24, 0xA4	; 164
     272:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its start
     274:	06 b6       	in	r0, 0x36	; 54
     276:	07 fe       	sbrs	r0, 7
     278:	fd cf       	rjmp	.-6      	; 0x274 <TWI_Start+0x4>
    while((TWSR & 0xF8)!= TWI_START_SENT);      // Check for the acknoledgement
     27a:	81 b1       	in	r24, 0x01	; 1
     27c:	88 7f       	andi	r24, 0xF8	; 248
     27e:	88 30       	cpi	r24, 0x08	; 8
     280:	e1 f7       	brne	.-8      	; 0x27a <TWI_Start+0xa>
}
     282:	08 95       	ret

00000284 <TWI_Stop>:

void TWI_Stop(void){
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);    // Enable TWI, generate stop condition and clear interrupt flag
     284:	84 e9       	ldi	r24, 0x94	; 148
     286:	86 bf       	out	0x36, r24	; 54
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
     288:	06 b6       	in	r0, 0x36	; 54
     28a:	04 fc       	sbrc	r0, 4
     28c:	fd cf       	rjmp	.-6      	; 0x288 <TWI_Stop+0x4>
}
     28e:	08 95       	ret

00000290 <TWI_Send_Addr>:

void TWI_Send_Addr(uint8_t addr){
	
    TWDR = addr;                                 //  write SLA+R in TWI data register
     290:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);              // Enable TWI and clear interrupt flag 
     292:	84 e8       	ldi	r24, 0x84	; 132
     294:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
     296:	06 b6       	in	r0, 0x36	; 54
     298:	07 fe       	sbrs	r0, 7
     29a:	fd cf       	rjmp	.-6      	; 0x296 <TWI_Send_Addr+0x6>
    
}
     29c:	08 95       	ret

0000029e <TWI_Send_Data>:

void TWI_Send_Data(uint8_t data){
    TWDR = data;
     29e:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);
     2a0:	84 e8       	ldi	r24, 0x84	; 132
     2a2:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));
     2a4:	06 b6       	in	r0, 0x36	; 54
     2a6:	07 fe       	sbrs	r0, 7
     2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <TWI_Send_Data+0x6>
       
}
     2aa:	08 95       	ret

000002ac <TWI_Read_Data>:

uint8_t TWI_Read_Data(short ack){
    if (!ack)
     2ac:	89 2b       	or	r24, r25
     2ae:	11 f4       	brne	.+4      	; 0x2b4 <TWI_Read_Data+0x8>
        TWCR = (1<<TWINT) | (1<<TWEN);
     2b0:	84 e8       	ldi	r24, 0x84	; 132
     2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <TWI_Read_Data+0xa>
    else
        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     2b4:	84 ec       	ldi	r24, 0xC4	; 196
     2b6:	86 bf       	out	0x36, r24	; 54
    
    while(!(TWCR & (1<<TWINT)));
     2b8:	06 b6       	in	r0, 0x36	; 54
     2ba:	07 fe       	sbrs	r0, 7
     2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <TWI_Read_Data+0xc>
    return TWDR;  
     2be:	83 b1       	in	r24, 0x03	; 3
}
     2c0:	08 95       	ret

000002c2 <TWI_Restart>:

void TWI_Restart(void){
    // Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
    TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     2c2:	84 ea       	ldi	r24, 0xA4	; 164
     2c4:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT))); // wait till restart condition is transmitted
     2c6:	06 b6       	in	r0, 0x36	; 54
     2c8:	07 fe       	sbrs	r0, 7
     2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <TWI_Restart+0x4>
    while((TWSR & 0xF8)!= TWI_R_START_SENT); // Check for the acknoledgement
     2cc:	81 b1       	in	r24, 0x01	; 1
     2ce:	88 7f       	andi	r24, 0xF8	; 248
     2d0:	80 31       	cpi	r24, 0x10	; 16
     2d2:	e1 f7       	brne	.-8      	; 0x2cc <TWI_Restart+0xa>
}
     2d4:	08 95       	ret

000002d6 <Request>:

////////////////////////////////dht11///////////////////////////////////

void Request(void)						                 //Microcontroller send start pulse or request
{
	DDRD |= (1<<DHT11_PIN);
     2d6:	8e 9a       	sbi	0x11, 6	; 17
	PORTD &= ~(1<<DHT11_PIN);		                       //set to low pin 
     2d8:	96 98       	cbi	0x12, 6	; 18
     2da:	80 e1       	ldi	r24, 0x10	; 16
     2dc:	97 e2       	ldi	r25, 0x27	; 39
     2de:	01 97       	sbiw	r24, 0x01	; 1
     2e0:	f1 f7       	brne	.-4      	; 0x2de <Request+0x8>
	_delay_ms(20);					                       // wait for 20ms 
	PORTD |= (1<<DHT11_PIN);		                          // set to high pin 
     2e2:	96 9a       	sbi	0x12, 6	; 18
}
     2e4:	08 95       	ret

000002e6 <Response>:

void Response(void)						                    //receive response from DHT11 
{
	DDRD &= ~(1<<DHT11_PIN);
     2e6:	8e 98       	cbi	0x11, 6	; 17
	while(PIND & (1<<DHT11_PIN));                               //wait untill receive the response
     2e8:	86 99       	sbic	0x10, 6	; 16
     2ea:	fe cf       	rjmp	.-4      	; 0x2e8 <Response+0x2>
	while((PIND & (1<<DHT11_PIN))==0);                          //response pulse(low 54us)
     2ec:	86 9b       	sbis	0x10, 6	; 16
     2ee:	fe cf       	rjmp	.-4      	; 0x2ec <Response+0x6>
	while(PIND & (1<<DHT11_PIN));                               //response pulse(high 80us)
     2f0:	86 99       	sbic	0x10, 6	; 16
     2f2:	fe cf       	rjmp	.-4      	; 0x2f0 <Response+0xa>
}
     2f4:	08 95       	ret

000002f6 <Receive_data>:

uint8_t Receive_data(void)							                  //receive data 
{	
     2f6:	80 91 11 01 	lds	r24, 0x0111
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	30 e0       	ldi	r19, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2fe:	44 e1       	ldi	r20, 0x14	; 20
	for (int q=0; q<8; q++)
	{
		while((PIND & (1<<DHT11_PIN)) == 0);	                    //check received bit 0 or 1
     300:	86 9b       	sbis	0x10, 6	; 16
     302:	fe cf       	rjmp	.-4      	; 0x300 <Receive_data+0xa>
     304:	94 2f       	mov	r25, r20
     306:	9a 95       	dec	r25
     308:	f1 f7       	brne	.-4      	; 0x306 <Receive_data+0x10>
		_delay_us(30);                                                  //(0 --> low 54 us, high 24 us),(1-->low 54 us, high 70 us)
		if(PIND & (1<<DHT11_PIN))				                      //if high pulse is greater than 30ms 
     30a:	86 9b       	sbis	0x10, 6	; 16
     30c:	03 c0       	rjmp	.+6      	; 0x314 <Receive_data+0x1e>
		c = (c<<1)|(0x01);						                    // then its logic HIGH 
     30e:	88 0f       	add	r24, r24
     310:	81 60       	ori	r24, 0x01	; 1
     312:	01 c0       	rjmp	.+2      	; 0x316 <Receive_data+0x20>
		else									                      // otherwise its logic LOW 
		c = (c<<1);
     314:	88 0f       	add	r24, r24
		while(PIND & (1<<DHT11_PIN));
     316:	86 99       	sbic	0x10, 6	; 16
     318:	fe cf       	rjmp	.-4      	; 0x316 <Receive_data+0x20>
	while(PIND & (1<<DHT11_PIN));                               //response pulse(high 80us)
}

uint8_t Receive_data(void)							                  //receive data 
{	
	for (int q=0; q<8; q++)
     31a:	2f 5f       	subi	r18, 0xFF	; 255
     31c:	3f 4f       	sbci	r19, 0xFF	; 255
     31e:	28 30       	cpi	r18, 0x08	; 8
     320:	31 05       	cpc	r19, r1
     322:	71 f7       	brne	.-36     	; 0x300 <Receive_data+0xa>
     324:	80 93 11 01 	sts	0x0111, r24
		else									                      // otherwise its logic LOW 
		c = (c<<1);
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
}
     328:	08 95       	ret

0000032a <RTC_Read_Clock>:
}

///////////////////////////ds1307////////////////////////////

void RTC_Read_Clock(char read_clock_address)
{
     32a:	1f 93       	push	r17
     32c:	18 2f       	mov	r17, r24
	TWI_Start();                                                       //start I2C communication
     32e:	0e 94 38 01 	call	0x270	; 0x270 <TWI_Start>
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
}

void TWI_Send_Addr(uint8_t addr){
	
    TWDR = addr;                                 //  write SLA+R in TWI data register
     332:	80 ed       	ldi	r24, 0xD0	; 208
     334:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);              // Enable TWI and clear interrupt flag 
     336:	84 e8       	ldi	r24, 0x84	; 132
     338:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
     33a:	06 b6       	in	r0, 0x36	; 54
     33c:	07 fe       	sbrs	r0, 7
     33e:	fd cf       	rjmp	.-6      	; 0x33a <RTC_Read_Clock+0x10>
    
}

void TWI_Send_Data(uint8_t data){
    TWDR = data;
     340:	13 b9       	out	0x03, r17	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);
     342:	84 e8       	ldi	r24, 0x84	; 132
     344:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));
     346:	06 b6       	in	r0, 0x36	; 54
     348:	07 fe       	sbrs	r0, 7
     34a:	fd cf       	rjmp	.-6      	; 0x346 <RTC_Read_Clock+0x1c>
	TWI_Send_Addr(Device_Write_address);                                  //send address to RTC
	TWI_Send_Data(read_clock_address);
	TWI_Restart();
     34c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <TWI_Restart>
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
}

void TWI_Send_Addr(uint8_t addr){
	
    TWDR = addr;                                 //  write SLA+R in TWI data register
     350:	81 ed       	ldi	r24, 0xD1	; 209
     352:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);              // Enable TWI and clear interrupt flag 
     354:	84 e8       	ldi	r24, 0x84	; 132
     356:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
     358:	06 b6       	in	r0, 0x36	; 54
     35a:	07 fe       	sbrs	r0, 7
     35c:	fd cf       	rjmp	.-6      	; 0x358 <RTC_Read_Clock+0x2e>

uint8_t TWI_Read_Data(short ack){
    if (!ack)
        TWCR = (1<<TWINT) | (1<<TWEN);
    else
        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     35e:	84 ec       	ldi	r24, 0xC4	; 196
     360:	86 bf       	out	0x36, r24	; 54
    
    while(!(TWCR & (1<<TWINT)));
     362:	06 b6       	in	r0, 0x36	; 54
     364:	07 fe       	sbrs	r0, 7
     366:	fd cf       	rjmp	.-6      	; 0x362 <RTC_Read_Clock+0x38>
    return TWDR;  
     368:	83 b1       	in	r24, 0x03	; 3
	TWI_Send_Addr(Device_Read_address);
	second = TWI_Read_Data(1);						                                 // Read second
     36a:	80 93 44 01 	sts	0x0144, r24
     36e:	10 92 45 01 	sts	0x0145, r1

uint8_t TWI_Read_Data(short ack){
    if (!ack)
        TWCR = (1<<TWINT) | (1<<TWEN);
    else
        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     372:	84 ec       	ldi	r24, 0xC4	; 196
     374:	86 bf       	out	0x36, r24	; 54
    
    while(!(TWCR & (1<<TWINT)));
     376:	06 b6       	in	r0, 0x36	; 54
     378:	07 fe       	sbrs	r0, 7
     37a:	fd cf       	rjmp	.-6      	; 0x376 <RTC_Read_Clock+0x4c>
    return TWDR;  
     37c:	83 b1       	in	r24, 0x03	; 3
	minute = TWI_Read_Data(1);						                       // Read minute
     37e:	80 93 46 01 	sts	0x0146, r24
     382:	10 92 47 01 	sts	0x0147, r1
       
}

uint8_t TWI_Read_Data(short ack){
    if (!ack)
        TWCR = (1<<TWINT) | (1<<TWEN);
     386:	84 e8       	ldi	r24, 0x84	; 132
     388:	86 bf       	out	0x36, r24	; 54
    else
        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    
    while(!(TWCR & (1<<TWINT)));
     38a:	06 b6       	in	r0, 0x36	; 54
     38c:	07 fe       	sbrs	r0, 7
     38e:	fd cf       	rjmp	.-6      	; 0x38a <RTC_Read_Clock+0x60>
    return TWDR;  
     390:	83 b1       	in	r24, 0x03	; 3
	hour = TWI_Read_Data(0);                                               // Read hour
     392:	80 93 48 01 	sts	0x0148, r24
     396:	10 92 49 01 	sts	0x0149, r1
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its start
    while((TWSR & 0xF8)!= TWI_START_SENT);      // Check for the acknoledgement
}

void TWI_Stop(void){
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);    // Enable TWI, generate stop condition and clear interrupt flag
     39a:	84 e9       	ldi	r24, 0x94	; 148
     39c:	86 bf       	out	0x36, r24	; 54
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
     39e:	06 b6       	in	r0, 0x36	; 54
     3a0:	04 fc       	sbrc	r0, 4
     3a2:	fd cf       	rjmp	.-6      	; 0x39e <RTC_Read_Clock+0x74>
	TWI_Stop();
}
     3a4:	1f 91       	pop	r17
     3a6:	08 95       	ret

000003a8 <RTC_Read_Calendar>:

void RTC_Read_Calendar(char read_calendar_address)
{
     3a8:	1f 93       	push	r17
     3aa:	18 2f       	mov	r17, r24
	TWI_Start();                                                           //start I2C communication
     3ac:	0e 94 38 01 	call	0x270	; 0x270 <TWI_Start>
}

void TWI_Send_Addr(uint8_t addr){
	
    TWDR = addr;                                 //  write SLA+R in TWI data register
     3b0:	80 ed       	ldi	r24, 0xD0	; 208
     3b2:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);              // Enable TWI and clear interrupt flag 
     3b4:	84 e8       	ldi	r24, 0x84	; 132
     3b6:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
     3b8:	06 b6       	in	r0, 0x36	; 54
     3ba:	07 fe       	sbrs	r0, 7
     3bc:	fd cf       	rjmp	.-6      	; 0x3b8 <RTC_Read_Calendar+0x10>
    
}

void TWI_Send_Data(uint8_t data){
    TWDR = data;
     3be:	13 b9       	out	0x03, r17	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);
     3c0:	84 e8       	ldi	r24, 0x84	; 132
     3c2:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));
     3c4:	06 b6       	in	r0, 0x36	; 54
     3c6:	07 fe       	sbrs	r0, 7
     3c8:	fd cf       	rjmp	.-6      	; 0x3c4 <RTC_Read_Calendar+0x1c>
	TWI_Send_Addr(Device_Write_address);
	TWI_Send_Data(read_calendar_address);
	TWI_Restart();
     3ca:	0e 94 61 01 	call	0x2c2	; 0x2c2 <TWI_Restart>
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
}

void TWI_Send_Addr(uint8_t addr){
	
    TWDR = addr;                                 //  write SLA+R in TWI data register
     3ce:	81 ed       	ldi	r24, 0xD1	; 209
     3d0:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);              // Enable TWI and clear interrupt flag 
     3d2:	84 e8       	ldi	r24, 0x84	; 132
     3d4:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
     3d6:	06 b6       	in	r0, 0x36	; 54
     3d8:	07 fe       	sbrs	r0, 7
     3da:	fd cf       	rjmp	.-6      	; 0x3d6 <RTC_Read_Calendar+0x2e>

uint8_t TWI_Read_Data(short ack){
    if (!ack)
        TWCR = (1<<TWINT) | (1<<TWEN);
    else
        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     3dc:	84 ec       	ldi	r24, 0xC4	; 196
     3de:	86 bf       	out	0x36, r24	; 54
    
    while(!(TWCR & (1<<TWINT)));
     3e0:	06 b6       	in	r0, 0x36	; 54
     3e2:	07 fe       	sbrs	r0, 7
     3e4:	fd cf       	rjmp	.-6      	; 0x3e0 <RTC_Read_Calendar+0x38>
    return TWDR;  
     3e6:	83 b1       	in	r24, 0x03	; 3
	TWI_Send_Addr(Device_Read_address);

	day =TWI_Read_Data(1);							                          //Read day 
     3e8:	80 93 50 01 	sts	0x0150, r24
     3ec:	10 92 51 01 	sts	0x0151, r1

uint8_t TWI_Read_Data(short ack){
    if (!ack)
        TWCR = (1<<TWINT) | (1<<TWEN);
    else
        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     3f0:	84 ec       	ldi	r24, 0xC4	; 196
     3f2:	86 bf       	out	0x36, r24	; 54
    
    while(!(TWCR & (1<<TWINT)));
     3f4:	06 b6       	in	r0, 0x36	; 54
     3f6:	07 fe       	sbrs	r0, 7
     3f8:	fd cf       	rjmp	.-6      	; 0x3f4 <RTC_Read_Calendar+0x4c>
    return TWDR;  
     3fa:	83 b1       	in	r24, 0x03	; 3
	date =TWI_Read_Data(1);							                         // Read date
     3fc:	80 93 53 01 	sts	0x0153, r24
     400:	10 92 54 01 	sts	0x0154, r1

uint8_t TWI_Read_Data(short ack){
    if (!ack)
        TWCR = (1<<TWINT) | (1<<TWEN);
    else
        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     404:	84 ec       	ldi	r24, 0xC4	; 196
     406:	86 bf       	out	0x36, r24	; 54
    
    while(!(TWCR & (1<<TWINT)));
     408:	06 b6       	in	r0, 0x36	; 54
     40a:	07 fe       	sbrs	r0, 7
     40c:	fd cf       	rjmp	.-6      	; 0x408 <RTC_Read_Calendar+0x60>
    return TWDR;  
     40e:	83 b1       	in	r24, 0x03	; 3
	month = TWI_Read_Data(1);						                           // Read month 
     410:	80 93 42 01 	sts	0x0142, r24
     414:	10 92 43 01 	sts	0x0143, r1
       
}

uint8_t TWI_Read_Data(short ack){
    if (!ack)
        TWCR = (1<<TWINT) | (1<<TWEN);
     418:	84 e8       	ldi	r24, 0x84	; 132
     41a:	86 bf       	out	0x36, r24	; 54
    else
        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    
    while(!(TWCR & (1<<TWINT)));
     41c:	06 b6       	in	r0, 0x36	; 54
     41e:	07 fe       	sbrs	r0, 7
     420:	fd cf       	rjmp	.-6      	; 0x41c <RTC_Read_Calendar+0x74>
    return TWDR;  
     422:	83 b1       	in	r24, 0x03	; 3
	year =TWI_Read_Data(0);							                           // Read the year with Nack
     424:	80 93 4c 01 	sts	0x014C, r24
     428:	10 92 4d 01 	sts	0x014D, r1
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its start
    while((TWSR & 0xF8)!= TWI_START_SENT);      // Check for the acknoledgement
}

void TWI_Stop(void){
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);    // Enable TWI, generate stop condition and clear interrupt flag
     42c:	84 e9       	ldi	r24, 0x94	; 148
     42e:	86 bf       	out	0x36, r24	; 54
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
     430:	06 b6       	in	r0, 0x36	; 54
     432:	04 fc       	sbrc	r0, 4
     434:	fd cf       	rjmp	.-6      	; 0x430 <RTC_Read_Calendar+0x88>
	TWI_Stop();									                                  // Stop I2C communication
}
     436:	1f 91       	pop	r17
     438:	08 95       	ret

0000043a <ADC_Init>:
}

////////////////////////////////rain drop sensor/////////////////
void ADC_Init(void)
{
	DDRA &=~(1<<0);		// Make ADC port as input
     43a:	d0 98       	cbi	0x1a, 0	; 26
	ADCSRA=1<<ADEN ;	   // Enable ADC	
     43c:	80 e8       	ldi	r24, 0x80	; 128
     43e:	86 b9       	out	0x06, r24	; 6
}
     440:	08 95       	ret

00000442 <ADC_Read>:

int ADC_Read(void)
{
	unsigned int val1;
	ADMUX=1<<REFS0;    //AVcc with external capacitor at Aref pin
     442:	80 e4       	ldi	r24, 0x40	; 64
     444:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=1<<ADSC;                 //start conversion
     446:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC)){}     //wait for the complete the conversion 
     448:	36 99       	sbic	0x06, 6	; 6
     44a:	fe cf       	rjmp	.-4      	; 0x448 <ADC_Read+0x6>
	val1=ADC;
     44c:	24 b1       	in	r18, 0x04	; 4
     44e:	35 b1       	in	r19, 0x05	; 5
	
	return val1;					
}
     450:	c9 01       	movw	r24, r18
     452:	08 95       	ret

00000454 <uart_init>:
}

////////////////serial communication////////////////////////
void uart_init(void) {
	
	UCSRB |= (1 << RXEN) | (1 << TXEN);  // Transmission & Reception Enable (TXEN=1, RXEN=1)
     454:	8a b1       	in	r24, 0x0a	; 10
     456:	88 61       	ori	r24, 0x18	; 24
     458:	8a b9       	out	0x0a, r24	; 10

	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); //use 8 bit char size
     45a:	80 b5       	in	r24, 0x20	; 32
     45c:	86 68       	ori	r24, 0x86	; 134
     45e:	80 bd       	out	0x20, r24	; 32
	UBRRH = (BAUD_PRESCALE >> 8);           //load upper 8 bit baud prescale 
     460:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;
     462:	8c e0       	ldi	r24, 0x0C	; 12
     464:	89 b9       	out	0x09, r24	; 9
}
     466:	08 95       	ret

00000468 <send_uart>:

void send_uart(unsigned char val){
	while ((UCSRA & (1 << UDRE)) == 0) ; 	//wait until transmition is finished
     468:	5d 9b       	sbis	0x0b, 5	; 11
     46a:	fe cf       	rjmp	.-4      	; 0x468 <send_uart>
	UDR = val;								//Transmit the charater
     46c:	8c b9       	out	0x0c, r24	; 12
}
     46e:	08 95       	ret

00000470 <send_string>:

void send_string(unsigned char * s){
     470:	fc 01       	movw	r30, r24
     472:	04 c0       	rjmp	.+8      	; 0x47c <send_string+0xc>
	UBRRH = (BAUD_PRESCALE >> 8);           //load upper 8 bit baud prescale 
	UBRRL = BAUD_PRESCALE;
}

void send_uart(unsigned char val){
	while ((UCSRA & (1 << UDRE)) == 0) ; 	//wait until transmition is finished
     474:	5d 9b       	sbis	0x0b, 5	; 11
     476:	fe cf       	rjmp	.-4      	; 0x474 <send_string+0x4>
	UDR = val;								//Transmit the charater
     478:	8c b9       	out	0x0c, r24	; 12

void send_string(unsigned char * s){
	//	send string
	while(* s){
		send_uart(* s);
		* s++;
     47a:	31 96       	adiw	r30, 0x01	; 1
	UDR = val;								//Transmit the charater
}

void send_string(unsigned char * s){
	//	send string
	while(* s){
     47c:	80 81       	ld	r24, Z
     47e:	88 23       	and	r24, r24
     480:	c9 f7       	brne	.-14     	; 0x474 <send_string+0x4>
		send_uart(* s);
		* s++;
	}
}
     482:	08 95       	ret

00000484 <read_pressure>:
    bmp_180.altitude = (float) 44330 * (1 - pow(((float) bmp_180.pressure / pressure_sea_level), 0.1903));
	return bmp_180.altitude;
}


long read_pressure() {
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
    long UP;
    uint8_t msb, lsb, xlsb;
    
    TWI_Start();
     488:	0e 94 38 01 	call	0x270	; 0x270 <TWI_Start>
}

void TWI_Send_Addr(uint8_t addr){
	
    TWDR = addr;                                 //  write SLA+R in TWI data register
     48c:	8e ee       	ldi	r24, 0xEE	; 238
     48e:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);              // Enable TWI and clear interrupt flag 
     490:	84 e8       	ldi	r24, 0x84	; 132
     492:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
     494:	06 b6       	in	r0, 0x36	; 54
     496:	07 fe       	sbrs	r0, 7
     498:	fd cf       	rjmp	.-6      	; 0x494 <read_pressure+0x10>
    
}

void TWI_Send_Data(uint8_t data){
    TWDR = data;
     49a:	84 ef       	ldi	r24, 0xF4	; 244
     49c:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);
     49e:	84 e8       	ldi	r24, 0x84	; 132
     4a0:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));
     4a2:	06 b6       	in	r0, 0x36	; 54
     4a4:	07 fe       	sbrs	r0, 7
     4a6:	fd cf       	rjmp	.-6      	; 0x4a2 <read_pressure+0x1e>
    TWI_Send_Addr(bmp180_write_addr);
    TWI_Send_Data(control_reg_addr);
    
    switch (bmp_180.mode) {
     4a8:	80 91 12 01 	lds	r24, 0x0112
     4ac:	90 91 13 01 	lds	r25, 0x0113
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	91 05       	cpc	r25, r1
     4b4:	19 f1       	breq	.+70     	; 0x4fc <read_pressure+0x78>
     4b6:	83 30       	cpi	r24, 0x03	; 3
     4b8:	91 05       	cpc	r25, r1
     4ba:	79 f1       	breq	.+94     	; 0x51a <read_pressure+0x96>
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	79 f0       	breq	.+30     	; 0x4de <read_pressure+0x5a>
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
    
}

void TWI_Send_Data(uint8_t data){
    TWDR = data;
     4c0:	84 e3       	ldi	r24, 0x34	; 52
     4c2:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);
     4c4:	84 e8       	ldi	r24, 0x84	; 132
     4c6:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));
     4c8:	06 b6       	in	r0, 0x36	; 54
     4ca:	07 fe       	sbrs	r0, 7
     4cc:	fd cf       	rjmp	.-6      	; 0x4c8 <read_pressure+0x44>
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its start
    while((TWSR & 0xF8)!= TWI_START_SENT);      // Check for the acknoledgement
}

void TWI_Stop(void){
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);    // Enable TWI, generate stop condition and clear interrupt flag
     4ce:	84 e9       	ldi	r24, 0x94	; 148
     4d0:	86 bf       	out	0x36, r24	; 54
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
     4d2:	06 b6       	in	r0, 0x36	; 54
     4d4:	04 fc       	sbrc	r0, 4
     4d6:	fd cf       	rjmp	.-6      	; 0x4d2 <read_pressure+0x4e>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     4d8:	8a ec       	ldi	r24, 0xCA	; 202
     4da:	98 e0       	ldi	r25, 0x08	; 8
     4dc:	2c c0       	rjmp	.+88     	; 0x536 <read_pressure+0xb2>
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
    
}

void TWI_Send_Data(uint8_t data){
    TWDR = data;
     4de:	84 e7       	ldi	r24, 0x74	; 116
     4e0:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);
     4e2:	84 e8       	ldi	r24, 0x84	; 132
     4e4:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));
     4e6:	06 b6       	in	r0, 0x36	; 54
     4e8:	07 fe       	sbrs	r0, 7
     4ea:	fd cf       	rjmp	.-6      	; 0x4e6 <read_pressure+0x62>
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its start
    while((TWSR & 0xF8)!= TWI_START_SENT);      // Check for the acknoledgement
}

void TWI_Stop(void){
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);    // Enable TWI, generate stop condition and clear interrupt flag
     4ec:	84 e9       	ldi	r24, 0x94	; 148
     4ee:	86 bf       	out	0x36, r24	; 54
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
     4f0:	06 b6       	in	r0, 0x36	; 54
     4f2:	04 fc       	sbrc	r0, 4
     4f4:	fd cf       	rjmp	.-6      	; 0x4f0 <read_pressure+0x6c>
     4f6:	86 ea       	ldi	r24, 0xA6	; 166
     4f8:	9e e0       	ldi	r25, 0x0E	; 14
     4fa:	1d c0       	rjmp	.+58     	; 0x536 <read_pressure+0xb2>
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
    
}

void TWI_Send_Data(uint8_t data){
    TWDR = data;
     4fc:	84 eb       	ldi	r24, 0xB4	; 180
     4fe:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);
     500:	84 e8       	ldi	r24, 0x84	; 132
     502:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));
     504:	06 b6       	in	r0, 0x36	; 54
     506:	07 fe       	sbrs	r0, 7
     508:	fd cf       	rjmp	.-6      	; 0x504 <read_pressure+0x80>
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its start
    while((TWSR & 0xF8)!= TWI_START_SENT);      // Check for the acknoledgement
}

void TWI_Stop(void){
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);    // Enable TWI, generate stop condition and clear interrupt flag
     50a:	84 e9       	ldi	r24, 0x94	; 148
     50c:	86 bf       	out	0x36, r24	; 54
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
     50e:	06 b6       	in	r0, 0x36	; 54
     510:	04 fc       	sbrc	r0, 4
     512:	fd cf       	rjmp	.-6      	; 0x50e <read_pressure+0x8a>
     514:	8e e5       	ldi	r24, 0x5E	; 94
     516:	9a e1       	ldi	r25, 0x1A	; 26
     518:	0e c0       	rjmp	.+28     	; 0x536 <read_pressure+0xb2>
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
    
}

void TWI_Send_Data(uint8_t data){
    TWDR = data;
     51a:	84 ef       	ldi	r24, 0xF4	; 244
     51c:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);
     51e:	84 e8       	ldi	r24, 0x84	; 132
     520:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));
     522:	06 b6       	in	r0, 0x36	; 54
     524:	07 fe       	sbrs	r0, 7
     526:	fd cf       	rjmp	.-6      	; 0x522 <read_pressure+0x9e>
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its start
    while((TWSR & 0xF8)!= TWI_START_SENT);      // Check for the acknoledgement
}

void TWI_Stop(void){
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);    // Enable TWI, generate stop condition and clear interrupt flag
     528:	84 e9       	ldi	r24, 0x94	; 148
     52a:	86 bf       	out	0x36, r24	; 54
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
     52c:	06 b6       	in	r0, 0x36	; 54
     52e:	04 fc       	sbrc	r0, 4
     530:	fd cf       	rjmp	.-6      	; 0x52c <read_pressure+0xa8>
     532:	8e ec       	ldi	r24, 0xCE	; 206
     534:	91 e3       	ldi	r25, 0x31	; 49
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	f1 f7       	brne	.-4      	; 0x536 <read_pressure+0xb2>
            _delay_ms(wait_pressure_mode_3);
            break;
    }
    
 
    TWI_Start();
     53a:	0e 94 38 01 	call	0x270	; 0x270 <TWI_Start>
}

void TWI_Send_Addr(uint8_t addr){
	
    TWDR = addr;                                 //  write SLA+R in TWI data register
     53e:	8e ee       	ldi	r24, 0xEE	; 238
     540:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);              // Enable TWI and clear interrupt flag 
     542:	84 e8       	ldi	r24, 0x84	; 132
     544:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
     546:	06 b6       	in	r0, 0x36	; 54
     548:	07 fe       	sbrs	r0, 7
     54a:	fd cf       	rjmp	.-6      	; 0x546 <read_pressure+0xc2>
    
}

void TWI_Send_Data(uint8_t data){
    TWDR = data;
     54c:	86 ef       	ldi	r24, 0xF6	; 246
     54e:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);
     550:	84 e8       	ldi	r24, 0x84	; 132
     552:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));
     554:	06 b6       	in	r0, 0x36	; 54
     556:	07 fe       	sbrs	r0, 7
     558:	fd cf       	rjmp	.-6      	; 0x554 <read_pressure+0xd0>
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
    
}

void TWI_Send_Data(uint8_t data){
    TWDR = data;
     55a:	87 ef       	ldi	r24, 0xF7	; 247
     55c:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);
     55e:	84 e8       	ldi	r24, 0x84	; 132
     560:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));
     562:	06 b6       	in	r0, 0x36	; 54
     564:	07 fe       	sbrs	r0, 7
     566:	fd cf       	rjmp	.-6      	; 0x562 <read_pressure+0xde>
    TWI_Send_Addr(bmp180_write_addr);
    TWI_Send_Data(out_msb);
    TWI_Send_Data(out_lsb);
    TWI_Restart();
     568:	0e 94 61 01 	call	0x2c2	; 0x2c2 <TWI_Restart>
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
}

void TWI_Send_Addr(uint8_t addr){
	
    TWDR = addr;                                 //  write SLA+R in TWI data register
     56c:	8f ee       	ldi	r24, 0xEF	; 239
     56e:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);              // Enable TWI and clear interrupt flag 
     570:	84 e8       	ldi	r24, 0x84	; 132
     572:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
     574:	06 b6       	in	r0, 0x36	; 54
     576:	07 fe       	sbrs	r0, 7
     578:	fd cf       	rjmp	.-6      	; 0x574 <read_pressure+0xf0>

uint8_t TWI_Read_Data(short ack){
    if (!ack)
        TWCR = (1<<TWINT) | (1<<TWEN);
    else
        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     57a:	84 ec       	ldi	r24, 0xC4	; 196
     57c:	86 bf       	out	0x36, r24	; 54
    
    while(!(TWCR & (1<<TWINT)));
     57e:	06 b6       	in	r0, 0x36	; 54
     580:	07 fe       	sbrs	r0, 7
     582:	fd cf       	rjmp	.-6      	; 0x57e <read_pressure+0xfa>
    return TWDR;  
     584:	03 b1       	in	r16, 0x03	; 3
       
}

uint8_t TWI_Read_Data(short ack){
    if (!ack)
        TWCR = (1<<TWINT) | (1<<TWEN);
     586:	84 e8       	ldi	r24, 0x84	; 132
     588:	86 bf       	out	0x36, r24	; 54
    else
        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    
    while(!(TWCR & (1<<TWINT)));
     58a:	06 b6       	in	r0, 0x36	; 54
     58c:	07 fe       	sbrs	r0, 7
     58e:	fd cf       	rjmp	.-6      	; 0x58a <read_pressure+0x106>
    return TWDR;  
     590:	13 b1       	in	r17, 0x03	; 3
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its start
    while((TWSR & 0xF8)!= TWI_START_SENT);      // Check for the acknoledgement
}

void TWI_Stop(void){
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);    // Enable TWI, generate stop condition and clear interrupt flag
     592:	84 e9       	ldi	r24, 0x94	; 148
     594:	86 bf       	out	0x36, r24	; 54
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
     596:	06 b6       	in	r0, 0x36	; 54
     598:	04 fc       	sbrc	r0, 4
     59a:	fd cf       	rjmp	.-6      	; 0x596 <read_pressure+0x112>
    TWI_Send_Addr(bmp180_read_addr);
    msb = TWI_Read_Data(1);
    lsb = TWI_Read_Data(0);
    TWI_Stop();
    
    TWI_Start();
     59c:	0e 94 38 01 	call	0x270	; 0x270 <TWI_Start>
}

void TWI_Send_Addr(uint8_t addr){
	
    TWDR = addr;                                 //  write SLA+R in TWI data register
     5a0:	8e ee       	ldi	r24, 0xEE	; 238
     5a2:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);              // Enable TWI and clear interrupt flag 
     5a4:	84 e8       	ldi	r24, 0x84	; 132
     5a6:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
     5a8:	06 b6       	in	r0, 0x36	; 54
     5aa:	07 fe       	sbrs	r0, 7
     5ac:	fd cf       	rjmp	.-6      	; 0x5a8 <read_pressure+0x124>
    
}

void TWI_Send_Data(uint8_t data){
    TWDR = data;
     5ae:	88 ef       	ldi	r24, 0xF8	; 248
     5b0:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);
     5b2:	84 e8       	ldi	r24, 0x84	; 132
     5b4:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));
     5b6:	06 b6       	in	r0, 0x36	; 54
     5b8:	07 fe       	sbrs	r0, 7
     5ba:	fd cf       	rjmp	.-6      	; 0x5b6 <read_pressure+0x132>
    TWI_Send_Addr(bmp180_write_addr);
    TWI_Send_Data(out_xlsb);
    TWI_Restart();
     5bc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <TWI_Restart>
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
}

void TWI_Send_Addr(uint8_t addr){
	
    TWDR = addr;                                 //  write SLA+R in TWI data register
     5c0:	8f ee       	ldi	r24, 0xEF	; 239
     5c2:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);              // Enable TWI and clear interrupt flag 
     5c4:	84 e8       	ldi	r24, 0x84	; 132
     5c6:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
     5c8:	06 b6       	in	r0, 0x36	; 54
     5ca:	07 fe       	sbrs	r0, 7
     5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <read_pressure+0x144>
       
}

uint8_t TWI_Read_Data(short ack){
    if (!ack)
        TWCR = (1<<TWINT) | (1<<TWEN);
     5ce:	84 e8       	ldi	r24, 0x84	; 132
     5d0:	86 bf       	out	0x36, r24	; 54
    else
        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    
    while(!(TWCR & (1<<TWINT)));
     5d2:	06 b6       	in	r0, 0x36	; 54
     5d4:	07 fe       	sbrs	r0, 7
     5d6:	fd cf       	rjmp	.-6      	; 0x5d2 <read_pressure+0x14e>
    return TWDR;  
     5d8:	63 b1       	in	r22, 0x03	; 3
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its start
    while((TWSR & 0xF8)!= TWI_START_SENT);      // Check for the acknoledgement
}

void TWI_Stop(void){
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);    // Enable TWI, generate stop condition and clear interrupt flag
     5da:	84 e9       	ldi	r24, 0x94	; 148
     5dc:	86 bf       	out	0x36, r24	; 54
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
     5de:	06 b6       	in	r0, 0x36	; 54
     5e0:	04 fc       	sbrc	r0, 4
     5e2:	fd cf       	rjmp	.-6      	; 0x5de <read_pressure+0x15a>
     5e4:	20 2f       	mov	r18, r16
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	40 e0       	ldi	r20, 0x00	; 0
     5ea:	50 e0       	ldi	r21, 0x00	; 0
     5ec:	a9 01       	movw	r20, r18
     5ee:	33 27       	eor	r19, r19
     5f0:	22 27       	eor	r18, r18
     5f2:	81 2f       	mov	r24, r17
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	a0 e0       	ldi	r26, 0x00	; 0
     5f8:	b0 e0       	ldi	r27, 0x00	; 0
     5fa:	ba 2f       	mov	r27, r26
     5fc:	a9 2f       	mov	r26, r25
     5fe:	98 2f       	mov	r25, r24
     600:	88 27       	eor	r24, r24
     602:	28 2b       	or	r18, r24
     604:	39 2b       	or	r19, r25
     606:	4a 2b       	or	r20, r26
     608:	5b 2b       	or	r21, r27
     60a:	86 2f       	mov	r24, r22
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	a0 e0       	ldi	r26, 0x00	; 0
     610:	b0 e0       	ldi	r27, 0x00	; 0
     612:	28 2b       	or	r18, r24
     614:	39 2b       	or	r19, r25
     616:	4a 2b       	or	r20, r26
     618:	5b 2b       	or	r21, r27
     61a:	88 e0       	ldi	r24, 0x08	; 8
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	60 91 12 01 	lds	r22, 0x0112
     622:	70 91 13 01 	lds	r23, 0x0113
     626:	86 1b       	sub	r24, r22
     628:	97 0b       	sbc	r25, r23
     62a:	04 c0       	rjmp	.+8      	; 0x634 <read_pressure+0x1b0>
     62c:	56 95       	lsr	r21
     62e:	47 95       	ror	r20
     630:	37 95       	ror	r19
     632:	27 95       	ror	r18
     634:	8a 95       	dec	r24
     636:	d2 f7       	brpl	.-12     	; 0x62c <read_pressure+0x1a8>
    xlsb = TWI_Read_Data(0);
    TWI_Stop();
    
    UP = ((unsigned long) msb << 16 | (unsigned long) lsb << 8 | (unsigned long) xlsb) >> (8 - bmp_180.mode);
    return (long) UP;
}
     638:	b9 01       	movw	r22, r18
     63a:	ca 01       	movw	r24, r20
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	08 95       	ret

00000642 <read_temperature>:

long read_temperature() {
    long UT;
    uint8_t msb,lsb;
    
    TWI_Start();
     642:	0e 94 38 01 	call	0x270	; 0x270 <TWI_Start>
}

void TWI_Send_Addr(uint8_t addr){
	
    TWDR = addr;                                 //  write SLA+R in TWI data register
     646:	8e ee       	ldi	r24, 0xEE	; 238
     648:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);              // Enable TWI and clear interrupt flag 
     64a:	84 e8       	ldi	r24, 0x84	; 132
     64c:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
     64e:	06 b6       	in	r0, 0x36	; 54
     650:	07 fe       	sbrs	r0, 7
     652:	fd cf       	rjmp	.-6      	; 0x64e <read_temperature+0xc>
    
}

void TWI_Send_Data(uint8_t data){
    TWDR = data;
     654:	84 ef       	ldi	r24, 0xF4	; 244
     656:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);
     658:	84 e8       	ldi	r24, 0x84	; 132
     65a:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));
     65c:	06 b6       	in	r0, 0x36	; 54
     65e:	07 fe       	sbrs	r0, 7
     660:	fd cf       	rjmp	.-6      	; 0x65c <read_temperature+0x1a>
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
    
}

void TWI_Send_Data(uint8_t data){
    TWDR = data;
     662:	8e e2       	ldi	r24, 0x2E	; 46
     664:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);
     666:	84 e8       	ldi	r24, 0x84	; 132
     668:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));
     66a:	06 b6       	in	r0, 0x36	; 54
     66c:	07 fe       	sbrs	r0, 7
     66e:	fd cf       	rjmp	.-6      	; 0x66a <read_temperature+0x28>
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its start
    while((TWSR & 0xF8)!= TWI_START_SENT);      // Check for the acknoledgement
}

void TWI_Stop(void){
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);    // Enable TWI, generate stop condition and clear interrupt flag
     670:	84 e9       	ldi	r24, 0x94	; 148
     672:	86 bf       	out	0x36, r24	; 54
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
     674:	06 b6       	in	r0, 0x36	; 54
     676:	04 fc       	sbrc	r0, 4
     678:	fd cf       	rjmp	.-6      	; 0x674 <read_temperature+0x32>
     67a:	8a ec       	ldi	r24, 0xCA	; 202
     67c:	98 e0       	ldi	r25, 0x08	; 8
     67e:	01 97       	sbiw	r24, 0x01	; 1
     680:	f1 f7       	brne	.-4      	; 0x67e <read_temperature+0x3c>
    TWI_Send_Data(control_reg_addr);
	TWI_Send_Data(temperature_sel);
	TWI_Stop();
	_delay_ms(wait_temperature);
	
    TWI_Start();
     682:	0e 94 38 01 	call	0x270	; 0x270 <TWI_Start>
}

void TWI_Send_Addr(uint8_t addr){
	
    TWDR = addr;                                 //  write SLA+R in TWI data register
     686:	8e ee       	ldi	r24, 0xEE	; 238
     688:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);              // Enable TWI and clear interrupt flag 
     68a:	84 e8       	ldi	r24, 0x84	; 132
     68c:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
     68e:	06 b6       	in	r0, 0x36	; 54
     690:	07 fe       	sbrs	r0, 7
     692:	fd cf       	rjmp	.-6      	; 0x68e <read_temperature+0x4c>
    
}

void TWI_Send_Data(uint8_t data){
    TWDR = data;
     694:	86 ef       	ldi	r24, 0xF6	; 246
     696:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);
     698:	84 e8       	ldi	r24, 0x84	; 132
     69a:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));
     69c:	06 b6       	in	r0, 0x36	; 54
     69e:	07 fe       	sbrs	r0, 7
     6a0:	fd cf       	rjmp	.-6      	; 0x69c <read_temperature+0x5a>
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
    
}

void TWI_Send_Data(uint8_t data){
    TWDR = data;
     6a2:	87 ef       	ldi	r24, 0xF7	; 247
     6a4:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);
     6a6:	84 e8       	ldi	r24, 0x84	; 132
     6a8:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));
     6aa:	06 b6       	in	r0, 0x36	; 54
     6ac:	07 fe       	sbrs	r0, 7
     6ae:	fd cf       	rjmp	.-6      	; 0x6aa <read_temperature+0x68>
    TWI_Send_Addr(bmp180_write_addr);
    TWI_Send_Data(out_msb);
    TWI_Send_Data(out_lsb);
    TWI_Restart();
     6b0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <TWI_Restart>
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
}

void TWI_Send_Addr(uint8_t addr){
	
    TWDR = addr;                                 //  write SLA+R in TWI data register
     6b4:	8f ee       	ldi	r24, 0xEF	; 239
     6b6:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);              // Enable TWI and clear interrupt flag 
     6b8:	84 e8       	ldi	r24, 0x84	; 132
     6ba:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
     6bc:	06 b6       	in	r0, 0x36	; 54
     6be:	07 fe       	sbrs	r0, 7
     6c0:	fd cf       	rjmp	.-6      	; 0x6bc <read_temperature+0x7a>

uint8_t TWI_Read_Data(short ack){
    if (!ack)
        TWCR = (1<<TWINT) | (1<<TWEN);
    else
        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     6c2:	84 ec       	ldi	r24, 0xC4	; 196
     6c4:	86 bf       	out	0x36, r24	; 54
    
    while(!(TWCR & (1<<TWINT)));
     6c6:	06 b6       	in	r0, 0x36	; 54
     6c8:	07 fe       	sbrs	r0, 7
     6ca:	fd cf       	rjmp	.-6      	; 0x6c6 <read_temperature+0x84>
    return TWDR;  
     6cc:	23 b1       	in	r18, 0x03	; 3
       
}

uint8_t TWI_Read_Data(short ack){
    if (!ack)
        TWCR = (1<<TWINT) | (1<<TWEN);
     6ce:	84 e8       	ldi	r24, 0x84	; 132
     6d0:	86 bf       	out	0x36, r24	; 54
    else
        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    
    while(!(TWCR & (1<<TWINT)));
     6d2:	06 b6       	in	r0, 0x36	; 54
     6d4:	07 fe       	sbrs	r0, 7
     6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <read_temperature+0x90>
    return TWDR;  
     6d8:	93 b1       	in	r25, 0x03	; 3
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its start
    while((TWSR & 0xF8)!= TWI_START_SENT);      // Check for the acknoledgement
}

void TWI_Stop(void){
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);    // Enable TWI, generate stop condition and clear interrupt flag
     6da:	84 e9       	ldi	r24, 0x94	; 148
     6dc:	86 bf       	out	0x36, r24	; 54
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
     6de:	06 b6       	in	r0, 0x36	; 54
     6e0:	04 fc       	sbrc	r0, 4
     6e2:	fd cf       	rjmp	.-6      	; 0x6de <read_temperature+0x9c>
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	50 e0       	ldi	r21, 0x00	; 0
     6ea:	54 2f       	mov	r21, r20
     6ec:	43 2f       	mov	r20, r19
     6ee:	32 2f       	mov	r19, r18
     6f0:	22 27       	eor	r18, r18
     6f2:	89 2f       	mov	r24, r25
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	a0 e0       	ldi	r26, 0x00	; 0
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	28 2b       	or	r18, r24
     6fc:	39 2b       	or	r19, r25
     6fe:	4a 2b       	or	r20, r26
     700:	5b 2b       	or	r21, r27
    lsb = TWI_Read_Data(0);
    TWI_Stop();
    
    UT = (unsigned long) msb << 8 | (unsigned long) lsb;
    return (long) UT;
}
     702:	b9 01       	movw	r22, r18
     704:	ca 01       	movw	r24, r20
     706:	08 95       	ret

00000708 <calculate_pressure>:
    bmp_180.mode = mode;
}



long calculate_pressure() {
     708:	2f 92       	push	r2
     70a:	3f 92       	push	r3
     70c:	4f 92       	push	r4
     70e:	5f 92       	push	r5
     710:	6f 92       	push	r6
     712:	7f 92       	push	r7
     714:	8f 92       	push	r8
     716:	9f 92       	push	r9
     718:	af 92       	push	r10
     71a:	bf 92       	push	r11
     71c:	cf 92       	push	r12
     71e:	df 92       	push	r13
     720:	ef 92       	push	r14
     722:	ff 92       	push	r15
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	df 93       	push	r29
     72a:	cf 93       	push	r28
     72c:	00 d0       	rcall	.+0      	; 0x72e <calculate_pressure+0x26>
     72e:	00 d0       	rcall	.+0      	; 0x730 <calculate_pressure+0x28>
     730:	0f 92       	push	r0
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
    long UP, X1, X2, X3, B3, B6, _pressure,Y1,Y2,B5,UT,T;
    unsigned long B4, B7;
    UT = read_temperature();
     736:	0e 94 21 03 	call	0x642	; 0x642 <read_temperature>
	Y1 = ((UT-bmp_180.calib_coeffs.AC6)*bmp_180.calib_coeffs.AC5)/pow(2,15);
     73a:	20 91 32 01 	lds	r18, 0x0132
     73e:	30 91 33 01 	lds	r19, 0x0133
     742:	40 e0       	ldi	r20, 0x00	; 0
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	62 1b       	sub	r22, r18
     748:	73 0b       	sbc	r23, r19
     74a:	84 0b       	sbc	r24, r20
     74c:	95 0b       	sbc	r25, r21
     74e:	20 91 30 01 	lds	r18, 0x0130
     752:	30 91 31 01 	lds	r19, 0x0131
     756:	40 e0       	ldi	r20, 0x00	; 0
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__mulsi3>
     75e:	0e 94 ae 0a 	call	0x155c	; 0x155c <__floatsisf>
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e0       	ldi	r20, 0x00	; 0
     768:	58 e3       	ldi	r21, 0x38	; 56
     76a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     76e:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__fixsfsi>
     772:	5b 01       	movw	r10, r22
     774:	6c 01       	movw	r12, r24
	Y2 = (bmp_180.calib_coeffs.MC* pow(2, 11))/(Y1+bmp_180.calib_coeffs.MD);
	B5 = Y1+Y2;
	bmp_180.calib_coeffs.B5=B5;
     776:	60 91 3e 01 	lds	r22, 0x013E
     77a:	70 91 3f 01 	lds	r23, 0x013F
     77e:	88 27       	eor	r24, r24
     780:	77 fd       	sbrc	r23, 7
     782:	80 95       	com	r24
     784:	98 2f       	mov	r25, r24
     786:	0e 94 ae 0a 	call	0x155c	; 0x155c <__floatsisf>
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	40 e0       	ldi	r20, 0x00	; 0
     790:	55 e4       	ldi	r21, 0x45	; 69
     792:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     796:	7b 01       	movw	r14, r22
     798:	8c 01       	movw	r16, r24
     79a:	60 91 40 01 	lds	r22, 0x0140
     79e:	70 91 41 01 	lds	r23, 0x0141
     7a2:	88 27       	eor	r24, r24
     7a4:	77 fd       	sbrc	r23, 7
     7a6:	80 95       	com	r24
     7a8:	98 2f       	mov	r25, r24
     7aa:	6a 0d       	add	r22, r10
     7ac:	7b 1d       	adc	r23, r11
     7ae:	8c 1d       	adc	r24, r12
     7b0:	9d 1d       	adc	r25, r13
     7b2:	0e 94 ae 0a 	call	0x155c	; 0x155c <__floatsisf>
     7b6:	9b 01       	movw	r18, r22
     7b8:	ac 01       	movw	r20, r24
     7ba:	c8 01       	movw	r24, r16
     7bc:	b7 01       	movw	r22, r14
     7be:	0e 94 13 0a 	call	0x1426	; 0x1426 <__divsf3>
     7c2:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__fixsfsi>
     7c6:	6a 0d       	add	r22, r10
     7c8:	7b 1d       	adc	r23, r11
     7ca:	8c 1d       	adc	r24, r12
     7cc:	9d 1d       	adc	r25, r13
     7ce:	60 93 38 01 	sts	0x0138, r22
     7d2:	70 93 39 01 	sts	0x0139, r23
     7d6:	80 93 3a 01 	sts	0x013A, r24
     7da:	90 93 3b 01 	sts	0x013B, r25
	T = (bmp_180.calib_coeffs.B5+8)/pow(2,4);
    UP = read_pressure();
     7de:	0e 94 42 02 	call	0x484	; 0x484 <read_pressure>
     7e2:	3b 01       	movw	r6, r22
     7e4:	4c 01       	movw	r8, r24
    B6 =bmp_180.calib_coeffs.B5 - 4000;
     7e6:	a0 90 38 01 	lds	r10, 0x0138
     7ea:	b0 90 39 01 	lds	r11, 0x0139
     7ee:	c0 90 3a 01 	lds	r12, 0x013A
     7f2:	d0 90 3b 01 	lds	r13, 0x013B
     7f6:	80 e6       	ldi	r24, 0x60	; 96
     7f8:	90 ef       	ldi	r25, 0xF0	; 240
     7fa:	af ef       	ldi	r26, 0xFF	; 255
     7fc:	bf ef       	ldi	r27, 0xFF	; 255
     7fe:	a8 0e       	add	r10, r24
     800:	b9 1e       	adc	r11, r25
     802:	ca 1e       	adc	r12, r26
     804:	db 1e       	adc	r13, r27
    X1 = (bmp_180.calib_coeffs.B2 * (B6 * B6 /pow(2,12))) /pow(2,11);
     806:	c6 01       	movw	r24, r12
     808:	b5 01       	movw	r22, r10
     80a:	a6 01       	movw	r20, r12
     80c:	95 01       	movw	r18, r10
     80e:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__mulsi3>
     812:	0e 94 ae 0a 	call	0x155c	; 0x155c <__floatsisf>
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	40 e8       	ldi	r20, 0x80	; 128
     81c:	59 e3       	ldi	r21, 0x39	; 57
     81e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     822:	1b 01       	movw	r2, r22
     824:	2c 01       	movw	r4, r24
    X2 = bmp_180.calib_coeffs.AC2 * B6 /pow(2,11);
    X3 = X1 + X2;
    B3 = ((((long)bmp_180.calib_coeffs.AC1 * 4 + X3) << bmp_180.mode) + 2) / 4;
     826:	90 91 12 01 	lds	r25, 0x0112
     82a:	9d 83       	std	Y+5, r25	; 0x05
    X1 = bmp_180.calib_coeffs.AC3 * B6 /pow(2,13);
    X2 = (bmp_180.calib_coeffs.B1 * (B6 * B6 /pow(2,12))) /pow(2,16);
    X3 = ((X1 + X2) + 2) /pow(2,2);
    B4 = bmp_180.calib_coeffs.AC4 * (unsigned long) (X3 + 32768) /pow(2,15);
     82c:	60 91 2c 01 	lds	r22, 0x012C
     830:	70 91 2d 01 	lds	r23, 0x012D
     834:	88 27       	eor	r24, r24
     836:	77 fd       	sbrc	r23, 7
     838:	80 95       	com	r24
     83a:	98 2f       	mov	r25, r24
     83c:	a6 01       	movw	r20, r12
     83e:	95 01       	movw	r18, r10
     840:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__mulsi3>
     844:	0e 94 ae 0a 	call	0x155c	; 0x155c <__floatsisf>
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	59 e3       	ldi	r21, 0x39	; 57
     850:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     854:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__fixsfsi>
     858:	7b 01       	movw	r14, r22
     85a:	8c 01       	movw	r16, r24
     85c:	82 e0       	ldi	r24, 0x02	; 2
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	a0 e0       	ldi	r26, 0x00	; 0
     862:	b0 e0       	ldi	r27, 0x00	; 0
     864:	e8 0e       	add	r14, r24
     866:	f9 1e       	adc	r15, r25
     868:	0a 1f       	adc	r16, r26
     86a:	1b 1f       	adc	r17, r27
     86c:	60 91 34 01 	lds	r22, 0x0134
     870:	70 91 35 01 	lds	r23, 0x0135
     874:	88 27       	eor	r24, r24
     876:	77 fd       	sbrc	r23, 7
     878:	80 95       	com	r24
     87a:	98 2f       	mov	r25, r24
     87c:	0e 94 ae 0a 	call	0x155c	; 0x155c <__floatsisf>
     880:	a2 01       	movw	r20, r4
     882:	91 01       	movw	r18, r2
     884:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e8       	ldi	r20, 0x80	; 128
     88e:	57 e3       	ldi	r21, 0x37	; 55
     890:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     894:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__fixsfsi>
     898:	e6 0e       	add	r14, r22
     89a:	f7 1e       	adc	r15, r23
     89c:	08 1f       	adc	r16, r24
     89e:	19 1f       	adc	r17, r25
     8a0:	c8 01       	movw	r24, r16
     8a2:	b7 01       	movw	r22, r14
     8a4:	0e 94 ae 0a 	call	0x155c	; 0x155c <__floatsisf>
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	40 e8       	ldi	r20, 0x80	; 128
     8ae:	5e e3       	ldi	r21, 0x3E	; 62
     8b0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     8b4:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__fixsfsi>
     8b8:	60 50       	subi	r22, 0x00	; 0
     8ba:	70 48       	sbci	r23, 0x80	; 128
     8bc:	8f 4f       	sbci	r24, 0xFF	; 255
     8be:	9f 4f       	sbci	r25, 0xFF	; 255
     8c0:	20 91 2e 01 	lds	r18, 0x012E
     8c4:	30 91 2f 01 	lds	r19, 0x012F
     8c8:	40 e0       	ldi	r20, 0x00	; 0
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__mulsi3>
     8d0:	0e 94 ac 0a 	call	0x1558	; 0x1558 <__floatunsisf>
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	58 e3       	ldi	r21, 0x38	; 56
     8dc:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     8e0:	0e 94 80 0a 	call	0x1500	; 0x1500 <__fixunssfsi>
     8e4:	69 83       	std	Y+1, r22	; 0x01
     8e6:	7a 83       	std	Y+2, r23	; 0x02
     8e8:	8b 83       	std	Y+3, r24	; 0x03
     8ea:	9c 83       	std	Y+4, r25	; 0x04
    B7 = ((unsigned long) UP - B3) * (50000UL >> bmp_180.mode);
     8ec:	60 91 2a 01 	lds	r22, 0x012A
     8f0:	70 91 2b 01 	lds	r23, 0x012B
     8f4:	88 27       	eor	r24, r24
     8f6:	77 fd       	sbrc	r23, 7
     8f8:	80 95       	com	r24
     8fa:	98 2f       	mov	r25, r24
     8fc:	a6 01       	movw	r20, r12
     8fe:	95 01       	movw	r18, r10
     900:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__mulsi3>
     904:	0e 94 ae 0a 	call	0x155c	; 0x155c <__floatsisf>
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	40 e0       	ldi	r20, 0x00	; 0
     90e:	5a e3       	ldi	r21, 0x3A	; 58
     910:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     914:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__fixsfsi>
     918:	7b 01       	movw	r14, r22
     91a:	8c 01       	movw	r16, r24
     91c:	80 91 28 01 	lds	r24, 0x0128
     920:	90 91 29 01 	lds	r25, 0x0129
     924:	aa 27       	eor	r26, r26
     926:	97 fd       	sbrc	r25, 7
     928:	a0 95       	com	r26
     92a:	ba 2f       	mov	r27, r26
     92c:	22 e0       	ldi	r18, 0x02	; 2
     92e:	88 0f       	add	r24, r24
     930:	99 1f       	adc	r25, r25
     932:	aa 1f       	adc	r26, r26
     934:	bb 1f       	adc	r27, r27
     936:	2a 95       	dec	r18
     938:	d1 f7       	brne	.-12     	; 0x92e <__stack+0xcf>
     93a:	e8 0e       	add	r14, r24
     93c:	f9 1e       	adc	r15, r25
     93e:	0a 1f       	adc	r16, r26
     940:	1b 1f       	adc	r17, r27
     942:	60 91 36 01 	lds	r22, 0x0136
     946:	70 91 37 01 	lds	r23, 0x0137
     94a:	88 27       	eor	r24, r24
     94c:	77 fd       	sbrc	r23, 7
     94e:	80 95       	com	r24
     950:	98 2f       	mov	r25, r24
     952:	0e 94 ae 0a 	call	0x155c	; 0x155c <__floatsisf>
     956:	a2 01       	movw	r20, r4
     958:	91 01       	movw	r18, r2
     95a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	40 e0       	ldi	r20, 0x00	; 0
     964:	5a e3       	ldi	r21, 0x3A	; 58
     966:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     96a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__fixsfsi>
     96e:	e6 0e       	add	r14, r22
     970:	f7 1e       	adc	r15, r23
     972:	08 1f       	adc	r16, r24
     974:	19 1f       	adc	r17, r25
     976:	0d 80       	ldd	r0, Y+5	; 0x05
     978:	04 c0       	rjmp	.+8      	; 0x982 <__stack+0x123>
     97a:	ee 0c       	add	r14, r14
     97c:	ff 1c       	adc	r15, r15
     97e:	00 1f       	adc	r16, r16
     980:	11 1f       	adc	r17, r17
     982:	0a 94       	dec	r0
     984:	d2 f7       	brpl	.-12     	; 0x97a <__stack+0x11b>
     986:	82 e0       	ldi	r24, 0x02	; 2
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	a0 e0       	ldi	r26, 0x00	; 0
     98c:	b0 e0       	ldi	r27, 0x00	; 0
     98e:	e8 0e       	add	r14, r24
     990:	f9 1e       	adc	r15, r25
     992:	0a 1f       	adc	r16, r26
     994:	1b 1f       	adc	r17, r27
     996:	c8 01       	movw	r24, r16
     998:	b7 01       	movw	r22, r14
     99a:	24 e0       	ldi	r18, 0x04	; 4
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	50 e0       	ldi	r21, 0x00	; 0
     9a2:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__divmodsi4>
     9a6:	62 1a       	sub	r6, r18
     9a8:	73 0a       	sbc	r7, r19
     9aa:	84 0a       	sbc	r8, r20
     9ac:	95 0a       	sbc	r9, r21
     9ae:	20 e5       	ldi	r18, 0x50	; 80
     9b0:	33 ec       	ldi	r19, 0xC3	; 195
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	0d 80       	ldd	r0, Y+5	; 0x05
     9b8:	04 c0       	rjmp	.+8      	; 0x9c2 <__stack+0x163>
     9ba:	56 95       	lsr	r21
     9bc:	47 95       	ror	r20
     9be:	37 95       	ror	r19
     9c0:	27 95       	ror	r18
     9c2:	0a 94       	dec	r0
     9c4:	d2 f7       	brpl	.-12     	; 0x9ba <__stack+0x15b>
     9c6:	c4 01       	movw	r24, r8
     9c8:	b3 01       	movw	r22, r6
     9ca:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__mulsi3>
    if (B7 < 0x80000000UL)
     9ce:	97 fd       	sbrc	r25, 7
     9d0:	0f c0       	rjmp	.+30     	; 0x9f0 <__stack+0x191>
        _pressure = (B7 * 2) / B4;
     9d2:	66 0f       	add	r22, r22
     9d4:	77 1f       	adc	r23, r23
     9d6:	88 1f       	adc	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	29 81       	ldd	r18, Y+1	; 0x01
     9dc:	3a 81       	ldd	r19, Y+2	; 0x02
     9de:	4b 81       	ldd	r20, Y+3	; 0x03
     9e0:	5c 81       	ldd	r21, Y+4	; 0x04
     9e2:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__udivmodsi4>
     9e6:	c9 01       	movw	r24, r18
     9e8:	da 01       	movw	r26, r20
     9ea:	3c 01       	movw	r6, r24
     9ec:	4d 01       	movw	r8, r26
     9ee:	0c c0       	rjmp	.+24     	; 0xa08 <__stack+0x1a9>
    else
        _pressure = (B7 / B4) * 2;
     9f0:	29 81       	ldd	r18, Y+1	; 0x01
     9f2:	3a 81       	ldd	r19, Y+2	; 0x02
     9f4:	4b 81       	ldd	r20, Y+3	; 0x03
     9f6:	5c 81       	ldd	r21, Y+4	; 0x04
     9f8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__udivmodsi4>
     9fc:	39 01       	movw	r6, r18
     9fe:	4a 01       	movw	r8, r20
     a00:	66 0c       	add	r6, r6
     a02:	77 1c       	adc	r7, r7
     a04:	88 1c       	adc	r8, r8
     a06:	99 1c       	adc	r9, r9
    X1 = (_pressure /pow(2,8)) * (_pressure /pow(2,8));
     a08:	c4 01       	movw	r24, r8
     a0a:	b3 01       	movw	r22, r6
     a0c:	0e 94 ae 0a 	call	0x155c	; 0x155c <__floatsisf>
     a10:	5b 01       	movw	r10, r22
     a12:	6c 01       	movw	r12, r24
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	40 e8       	ldi	r20, 0x80	; 128
     a1a:	5b e3       	ldi	r21, 0x3B	; 59
     a1c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     a20:	9b 01       	movw	r18, r22
     a22:	ac 01       	movw	r20, r24
    X1 = (X1 * 3038) >> 16;
     a24:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     a28:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__fixsfsi>
     a2c:	2e ed       	ldi	r18, 0xDE	; 222
     a2e:	3b e0       	ldi	r19, 0x0B	; 11
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__mulsi3>
     a38:	7b 01       	movw	r14, r22
     a3a:	8c 01       	movw	r16, r24
    X2 = (-7357 * _pressure) /pow(2,16);
    bmp_180.pressure = _pressure + ((X1 + X2 + 3791) /pow(2,4));
     a3c:	c4 01       	movw	r24, r8
     a3e:	b3 01       	movw	r22, r6
     a40:	23 e4       	ldi	r18, 0x43	; 67
     a42:	33 ee       	ldi	r19, 0xE3	; 227
     a44:	4f ef       	ldi	r20, 0xFF	; 255
     a46:	5f ef       	ldi	r21, 0xFF	; 255
     a48:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <__mulsi3>
     a4c:	0e 94 ae 0a 	call	0x155c	; 0x155c <__floatsisf>
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	40 e8       	ldi	r20, 0x80	; 128
     a56:	57 e3       	ldi	r21, 0x37	; 55
     a58:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     a5c:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__fixsfsi>
     a60:	61 53       	subi	r22, 0x31	; 49
     a62:	71 4f       	sbci	r23, 0xF1	; 241
     a64:	8f 4f       	sbci	r24, 0xFF	; 255
     a66:	9f 4f       	sbci	r25, 0xFF	; 255
     a68:	78 01       	movw	r14, r16
     a6a:	11 27       	eor	r17, r17
     a6c:	f7 fc       	sbrc	r15, 7
     a6e:	10 95       	com	r17
     a70:	01 2f       	mov	r16, r17
     a72:	e6 0e       	add	r14, r22
     a74:	f7 1e       	adc	r15, r23
     a76:	08 1f       	adc	r16, r24
     a78:	19 1f       	adc	r17, r25
     a7a:	c8 01       	movw	r24, r16
     a7c:	b7 01       	movw	r22, r14
     a7e:	0e 94 ae 0a 	call	0x155c	; 0x155c <__floatsisf>
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	40 e8       	ldi	r20, 0x80	; 128
     a88:	5d e3       	ldi	r21, 0x3D	; 61
     a8a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     a8e:	9b 01       	movw	r18, r22
     a90:	ac 01       	movw	r20, r24
     a92:	c6 01       	movw	r24, r12
     a94:	b5 01       	movw	r22, r10
     a96:	0e 94 af 09 	call	0x135e	; 0x135e <__addsf3>
     a9a:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__fixsfsi>
     a9e:	9b 01       	movw	r18, r22
     aa0:	ac 01       	movw	r20, r24
     aa2:	60 93 20 01 	sts	0x0120, r22
     aa6:	70 93 21 01 	sts	0x0121, r23
     aaa:	80 93 22 01 	sts	0x0122, r24
     aae:	90 93 23 01 	sts	0x0123, r25
	return bmp_180.pressure;
}
     ab2:	ca 01       	movw	r24, r20
     ab4:	0f 90       	pop	r0
     ab6:	0f 90       	pop	r0
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	cf 91       	pop	r28
     ac0:	df 91       	pop	r29
     ac2:	1f 91       	pop	r17
     ac4:	0f 91       	pop	r16
     ac6:	ff 90       	pop	r15
     ac8:	ef 90       	pop	r14
     aca:	df 90       	pop	r13
     acc:	cf 90       	pop	r12
     ace:	bf 90       	pop	r11
     ad0:	af 90       	pop	r10
     ad2:	9f 90       	pop	r9
     ad4:	8f 90       	pop	r8
     ad6:	7f 90       	pop	r7
     ad8:	6f 90       	pop	r6
     ada:	5f 90       	pop	r5
     adc:	4f 90       	pop	r4
     ade:	3f 90       	pop	r3
     ae0:	2f 90       	pop	r2
     ae2:	08 95       	ret

00000ae4 <read_coeffs>:
    
    UT = (unsigned long) msb << 8 | (unsigned long) lsb;
    return (long) UT;
}

void read_coeffs() {
     ae4:	5f 92       	push	r5
     ae6:	6f 92       	push	r6
     ae8:	7f 92       	push	r7
     aea:	8f 92       	push	r8
     aec:	9f 92       	push	r9
     aee:	af 92       	push	r10
     af0:	bf 92       	push	r11
     af2:	cf 92       	push	r12
     af4:	df 92       	push	r13
     af6:	ef 92       	push	r14
     af8:	ff 92       	push	r15
     afa:	0f 93       	push	r16
     afc:	1f 93       	push	r17
     afe:	df 93       	push	r29
     b00:	cf 93       	push	r28
     b02:	cd b7       	in	r28, 0x3d	; 61
     b04:	de b7       	in	r29, 0x3e	; 62
     b06:	66 97       	sbiw	r28, 0x16	; 22
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	de bf       	out	0x3e, r29	; 62
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	cd bf       	out	0x3d, r28	; 61
     b12:	6e 01       	movw	r12, r28
     b14:	08 94       	sec
     b16:	c1 1c       	adc	r12, r1
     b18:	d1 1c       	adc	r13, r1
     b1a:	f6 ef       	ldi	r31, 0xF6	; 246
     b1c:	ef 2e       	mov	r14, r31
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	ff 2e       	mov	r15, r31
}

void TWI_Send_Addr(uint8_t addr){
	
    TWDR = addr;                                 //  write SLA+R in TWI data register
     b22:	ee ee       	ldi	r30, 0xEE	; 238
     b24:	5e 2e       	mov	r5, r30
    TWCR = (1<<TWINT) | (1<<TWEN);              // Enable TWI and clear interrupt flag 
     b26:	74 e8       	ldi	r23, 0x84	; 132
     b28:	b7 2e       	mov	r11, r23
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
}

void TWI_Send_Addr(uint8_t addr){
	
    TWDR = addr;                                 //  write SLA+R in TWI data register
     b2a:	6f ee       	ldi	r22, 0xEF	; 239
     b2c:	66 2e       	mov	r6, r22

uint8_t TWI_Read_Data(short ack){
    if (!ack)
        TWCR = (1<<TWINT) | (1<<TWEN);
    else
        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     b2e:	54 ec       	ldi	r21, 0xC4	; 196
     b30:	75 2e       	mov	r7, r21
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its start
    while((TWSR & 0xF8)!= TWI_START_SENT);      // Check for the acknoledgement
}

void TWI_Stop(void){
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);    // Enable TWI, generate stop condition and clear interrupt flag
     b32:	44 e9       	ldi	r20, 0x94	; 148
     b34:	a4 2e       	mov	r10, r20
    
    uint16_t coeffs[11];
    
    for (short i = 0; i < 11; i++) {
     b36:	37 e1       	ldi	r19, 0x17	; 23
     b38:	83 2e       	mov	r8, r19
     b3a:	91 2c       	mov	r9, r1
     b3c:	8c 0e       	add	r8, r28
     b3e:	9d 1e       	adc	r9, r29
        TWI_Start();
     b40:	0e 94 38 01 	call	0x270	; 0x270 <TWI_Start>
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
}

void TWI_Send_Addr(uint8_t addr){
	
    TWDR = addr;                                 //  write SLA+R in TWI data register
     b44:	53 b8       	out	0x03, r5	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);              // Enable TWI and clear interrupt flag 
     b46:	b6 be       	out	0x36, r11	; 54
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
     b48:	06 b6       	in	r0, 0x36	; 54
     b4a:	07 fe       	sbrs	r0, 7
     b4c:	fd cf       	rjmp	.-6      	; 0xb48 <read_coeffs+0x64>
        TWI_Send_Addr(bmp180_write_addr);
        TWI_Send_Data((bmp180_coeff_addr[i] & 0xFF00) >> 8);
     b4e:	f7 01       	movw	r30, r14
     b50:	90 81       	ld	r25, Z
     b52:	81 81       	ldd	r24, Z+1	; 0x01
    
}

void TWI_Send_Data(uint8_t data){
    TWDR = data;
     b54:	83 b9       	out	0x03, r24	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);
     b56:	b6 be       	out	0x36, r11	; 54
    while(!(TWCR & (1<<TWINT)));
     b58:	06 b6       	in	r0, 0x36	; 54
     b5a:	07 fe       	sbrs	r0, 7
     b5c:	fd cf       	rjmp	.-6      	; 0xb58 <read_coeffs+0x74>
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
    
}

void TWI_Send_Data(uint8_t data){
    TWDR = data;
     b5e:	93 b9       	out	0x03, r25	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);
     b60:	b6 be       	out	0x36, r11	; 54
    while(!(TWCR & (1<<TWINT)));
     b62:	06 b6       	in	r0, 0x36	; 54
     b64:	07 fe       	sbrs	r0, 7
     b66:	fd cf       	rjmp	.-6      	; 0xb62 <read_coeffs+0x7e>
        TWI_Send_Data(bmp180_coeff_addr[i] & 0x00FF);
        TWI_Restart();
     b68:	0e 94 61 01 	call	0x2c2	; 0x2c2 <TWI_Restart>
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
}

void TWI_Send_Addr(uint8_t addr){
	
    TWDR = addr;                                 //  write SLA+R in TWI data register
     b6c:	63 b8       	out	0x03, r6	; 3
    TWCR = (1<<TWINT) | (1<<TWEN);              // Enable TWI and clear interrupt flag 
     b6e:	b6 be       	out	0x36, r11	; 54
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its current job (Write operation)
     b70:	06 b6       	in	r0, 0x36	; 54
     b72:	07 fe       	sbrs	r0, 7
     b74:	fd cf       	rjmp	.-6      	; 0xb70 <read_coeffs+0x8c>

uint8_t TWI_Read_Data(short ack){
    if (!ack)
        TWCR = (1<<TWINT) | (1<<TWEN);
    else
        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     b76:	76 be       	out	0x36, r7	; 54
    
    while(!(TWCR & (1<<TWINT)));
     b78:	06 b6       	in	r0, 0x36	; 54
     b7a:	07 fe       	sbrs	r0, 7
     b7c:	fd cf       	rjmp	.-6      	; 0xb78 <read_coeffs+0x94>
    return TWDR;  
     b7e:	93 b1       	in	r25, 0x03	; 3
       
}

uint8_t TWI_Read_Data(short ack){
    if (!ack)
        TWCR = (1<<TWINT) | (1<<TWEN);
     b80:	b6 be       	out	0x36, r11	; 54
    else
        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    
    while(!(TWCR & (1<<TWINT)));
     b82:	06 b6       	in	r0, 0x36	; 54
     b84:	07 fe       	sbrs	r0, 7
     b86:	fd cf       	rjmp	.-6      	; 0xb82 <read_coeffs+0x9e>
    return TWDR;  
     b88:	83 b1       	in	r24, 0x03	; 3
        TWI_Send_Addr(bmp180_read_addr);
        coeffs[i] = TWI_Read_Data(1) << 8;
        coeffs[i] |= TWI_Read_Data(0);
     b8a:	19 2f       	mov	r17, r25
     b8c:	00 e0       	ldi	r16, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	80 2b       	or	r24, r16
     b92:	91 2b       	or	r25, r17
     b94:	f6 01       	movw	r30, r12
     b96:	91 83       	std	Z+1, r25	; 0x01
     b98:	80 83       	st	Z, r24
    while(!(TWCR & (1<<TWINT)));                // Wait until TWI finish its start
    while((TWSR & 0xF8)!= TWI_START_SENT);      // Check for the acknoledgement
}

void TWI_Stop(void){
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);    // Enable TWI, generate stop condition and clear interrupt flag
     b9a:	a6 be       	out	0x36, r10	; 54
    while(TWCR & (1<<TWSTO));                   // Wait until stop condition execution
     b9c:	06 b6       	in	r0, 0x36	; 54
     b9e:	04 fc       	sbrc	r0, 4
     ba0:	fd cf       	rjmp	.-6      	; 0xb9c <read_coeffs+0xb8>
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	c8 0e       	add	r12, r24
     ba8:	d9 1e       	adc	r13, r25
     baa:	e8 0e       	add	r14, r24
     bac:	f9 1e       	adc	r15, r25

void read_coeffs() {
    
    uint16_t coeffs[11];
    
    for (short i = 0; i < 11; i++) {
     bae:	c8 14       	cp	r12, r8
     bb0:	d9 04       	cpc	r13, r9
     bb2:	31 f6       	brne	.-116    	; 0xb40 <read_coeffs+0x5c>
        coeffs[i] = TWI_Read_Data(1) << 8;
        coeffs[i] |= TWI_Read_Data(0);
        TWI_Stop();
    }
    
    bmp_180.calib_coeffs.AC1 = (short) coeffs[0];
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	9a 81       	ldd	r25, Y+2	; 0x02
     bb8:	90 93 29 01 	sts	0x0129, r25
     bbc:	80 93 28 01 	sts	0x0128, r24
    bmp_180.calib_coeffs.AC2 = (short) coeffs[1];
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	9c 81       	ldd	r25, Y+4	; 0x04
     bc4:	90 93 2b 01 	sts	0x012B, r25
     bc8:	80 93 2a 01 	sts	0x012A, r24
    bmp_180.calib_coeffs.AC3 = (short) coeffs[2];
     bcc:	8d 81       	ldd	r24, Y+5	; 0x05
     bce:	9e 81       	ldd	r25, Y+6	; 0x06
     bd0:	90 93 2d 01 	sts	0x012D, r25
     bd4:	80 93 2c 01 	sts	0x012C, r24
    bmp_180.calib_coeffs.AC4 = (uint16_t) coeffs[3];
     bd8:	8f 81       	ldd	r24, Y+7	; 0x07
     bda:	98 85       	ldd	r25, Y+8	; 0x08
     bdc:	90 93 2f 01 	sts	0x012F, r25
     be0:	80 93 2e 01 	sts	0x012E, r24
    bmp_180.calib_coeffs.AC5 = (uint16_t) coeffs[4];
     be4:	89 85       	ldd	r24, Y+9	; 0x09
     be6:	9a 85       	ldd	r25, Y+10	; 0x0a
     be8:	90 93 31 01 	sts	0x0131, r25
     bec:	80 93 30 01 	sts	0x0130, r24
    bmp_180.calib_coeffs.AC6 = (uint16_t) coeffs[5];
     bf0:	8b 85       	ldd	r24, Y+11	; 0x0b
     bf2:	9c 85       	ldd	r25, Y+12	; 0x0c
     bf4:	90 93 33 01 	sts	0x0133, r25
     bf8:	80 93 32 01 	sts	0x0132, r24
    bmp_180.calib_coeffs.B1 = (short) coeffs[6];
     bfc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bfe:	9e 85       	ldd	r25, Y+14	; 0x0e
     c00:	90 93 35 01 	sts	0x0135, r25
     c04:	80 93 34 01 	sts	0x0134, r24
    bmp_180.calib_coeffs.B2 = (short) coeffs[7];
     c08:	8f 85       	ldd	r24, Y+15	; 0x0f
     c0a:	98 89       	ldd	r25, Y+16	; 0x10
     c0c:	90 93 37 01 	sts	0x0137, r25
     c10:	80 93 36 01 	sts	0x0136, r24
    bmp_180.calib_coeffs.MB = (short) coeffs[8];
     c14:	89 89       	ldd	r24, Y+17	; 0x11
     c16:	9a 89       	ldd	r25, Y+18	; 0x12
     c18:	90 93 3d 01 	sts	0x013D, r25
     c1c:	80 93 3c 01 	sts	0x013C, r24
    bmp_180.calib_coeffs.MC = (short) coeffs[9];
     c20:	8b 89       	ldd	r24, Y+19	; 0x13
     c22:	9c 89       	ldd	r25, Y+20	; 0x14
     c24:	90 93 3f 01 	sts	0x013F, r25
     c28:	80 93 3e 01 	sts	0x013E, r24
    bmp_180.calib_coeffs.MD = (short) coeffs[10];
     c2c:	8d 89       	ldd	r24, Y+21	; 0x15
     c2e:	9e 89       	ldd	r25, Y+22	; 0x16
     c30:	90 93 41 01 	sts	0x0141, r25
     c34:	80 93 40 01 	sts	0x0140, r24
    
}
     c38:	66 96       	adiw	r28, 0x16	; 22
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	f8 94       	cli
     c3e:	de bf       	out	0x3e, r29	; 62
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	cd bf       	out	0x3d, r28	; 61
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	df 90       	pop	r13
     c52:	cf 90       	pop	r12
     c54:	bf 90       	pop	r11
     c56:	af 90       	pop	r10
     c58:	9f 90       	pop	r9
     c5a:	8f 90       	pop	r8
     c5c:	7f 90       	pop	r7
     c5e:	6f 90       	pop	r6
     c60:	5f 90       	pop	r5
     c62:	08 95       	ret

00000c64 <init_sensor>:
		send_uart(* s);
		* s++;
	}
}
//////////////////////////////bmp180//////////////////////////////////////
void init_sensor(short mode) {
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	8c 01       	movw	r16, r24
    read_coeffs();
     c6a:	0e 94 72 05 	call	0xae4	; 0xae4 <read_coeffs>
    bmp_180.mode = mode;
     c6e:	10 93 13 01 	sts	0x0113, r17
     c72:	00 93 12 01 	sts	0x0112, r16
}
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	08 95       	ret

00000c7c <detection>:
	send_string("m");
	send_string("\n");
}


void detection(void){
     c7c:	ef 92       	push	r14
     c7e:	ff 92       	push	r15
     c80:	0f 93       	push	r16
     c82:	1f 93       	push	r17
		* s++;
	}
}
//////////////////////////////bmp180//////////////////////////////////////
void init_sensor(short mode) {
    read_coeffs();
     c84:	0e 94 72 05 	call	0xae4	; 0xae4 <read_coeffs>
    bmp_180.mode = mode;
     c88:	10 92 13 01 	sts	0x0113, r1
     c8c:	10 92 12 01 	sts	0x0112, r1

void detection(void){
	long a;
	unsigned int b;
	init_sensor(bmp180_mode_0);
	a= calculate_pressure();
     c90:	0e 94 84 03 	call	0x708	; 0x708 <calculate_pressure>
     c94:	7b 01       	movw	r14, r22
     c96:	8c 01       	movw	r16, r24
}

////////////////////////////////rain drop sensor/////////////////
void ADC_Init(void)
{
	DDRA &=~(1<<0);		// Make ADC port as input
     c98:	d0 98       	cbi	0x1a, 0	; 26
	ADCSRA=1<<ADEN ;	   // Enable ADC	
     c9a:	80 e8       	ldi	r24, 0x80	; 128
     c9c:	86 b9       	out	0x06, r24	; 6
	long a;
	unsigned int b;
	init_sensor(bmp180_mode_0);
	a= calculate_pressure();
	ADC_Init();	
	b = ADC_Read();
     c9e:	0e 94 21 02 	call	0x442	; 0x442 <ADC_Read>
	DDRC|=(1<<PC4)|(1<<PC5)|(1<<PC6);
     ca2:	24 b3       	in	r18, 0x14	; 20
     ca4:	20 67       	ori	r18, 0x70	; 112
     ca6:	24 bb       	out	0x14, r18	; 20
	if(b<300 || a<97000 || a>105000){
     ca8:	8c 52       	subi	r24, 0x2C	; 44
     caa:	91 40       	sbci	r25, 0x01	; 1
     cac:	90 f0       	brcs	.+36     	; 0xcd2 <detection+0x56>
     cae:	88 ee       	ldi	r24, 0xE8	; 232
     cb0:	e8 16       	cp	r14, r24
     cb2:	8a e7       	ldi	r24, 0x7A	; 122
     cb4:	f8 06       	cpc	r15, r24
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	08 07       	cpc	r16, r24
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	18 07       	cpc	r17, r24
     cbe:	4c f0       	brlt	.+18     	; 0xcd2 <detection+0x56>
     cc0:	29 e2       	ldi	r18, 0x29	; 41
     cc2:	e2 16       	cp	r14, r18
     cc4:	2a e9       	ldi	r18, 0x9A	; 154
     cc6:	f2 06       	cpc	r15, r18
     cc8:	21 e0       	ldi	r18, 0x01	; 1
     cca:	02 07       	cpc	r16, r18
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	12 07       	cpc	r17, r18
     cd0:	84 f0       	brlt	.+32     	; 0xcf2 <detection+0x76>
		PORTC  |= (1<<PC5)|(1<<PC6);
     cd2:	85 b3       	in	r24, 0x15	; 21
     cd4:	80 66       	ori	r24, 0x60	; 96
     cd6:	85 bb       	out	0x15, r24	; 21
		PORTC &= ~(1<<PC4);
     cd8:	ac 98       	cbi	0x15, 4	; 21
     cda:	80 e3       	ldi	r24, 0x30	; 48
     cdc:	95 e7       	ldi	r25, 0x75	; 117
     cde:	22 e3       	ldi	r18, 0x32	; 50
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	f9 01       	movw	r30, r18
     ce4:	31 97       	sbiw	r30, 0x01	; 1
     ce6:	f1 f7       	brne	.-4      	; 0xce4 <detection+0x68>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cea:	d9 f7       	brne	.-10     	; 0xce2 <detection+0x66>
		_delay_ms(3000);
		PORTC &= ~(1<<PC5);
     cec:	ad 98       	cbi	0x15, 5	; 21
		PORTC &= ~(1<<PC6);
     cee:	ae 98       	cbi	0x15, 6	; 21
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <detection+0x90>
		
		
	}else{
		PORTC  |= (1<<PC4);
     cf2:	ac 9a       	sbi	0x15, 4	; 21
		PORTC &= ~(1<<PC5);
     cf4:	ad 98       	cbi	0x15, 5	; 21
		PORTC &= ~(1<<PC6);
     cf6:	ae 98       	cbi	0x15, 6	; 21
     cf8:	80 e3       	ldi	r24, 0x30	; 48
     cfa:	95 e7       	ldi	r25, 0x75	; 117
     cfc:	22 e3       	ldi	r18, 0x32	; 50
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	f9 01       	movw	r30, r18
     d02:	31 97       	sbiw	r30, 0x01	; 1
     d04:	f1 f7       	brne	.-4      	; 0xd02 <detection+0x86>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d06:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d08:	d9 f7       	brne	.-10     	; 0xd00 <detection+0x84>
		_delay_ms(3000);
		PORTC &= ~(1<<PC4);
     d0a:	ac 98       	cbi	0x15, 4	; 21
	}

}
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	ff 90       	pop	r15
     d12:	ef 90       	pop	r14
     d14:	08 95       	ret

00000d16 <bmp180_pressure>:
    bmp_180.calib_coeffs.MD = (short) coeffs[10];
    
}


void bmp180_pressure(void){
     d16:	ef 92       	push	r14
     d18:	ff 92       	push	r15
     d1a:	0f 93       	push	r16
     d1c:	1f 93       	push	r17
     d1e:	df 93       	push	r29
     d20:	cf 93       	push	r28
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	2a 97       	sbiw	r28, 0x0a	; 10
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
		* s++;
	}
}
//////////////////////////////bmp180//////////////////////////////////////
void init_sensor(short mode) {
    read_coeffs();
     d32:	0e 94 72 05 	call	0xae4	; 0xae4 <read_coeffs>
    bmp_180.mode = mode;
     d36:	10 92 13 01 	sts	0x0113, r1
     d3a:	10 92 12 01 	sts	0x0112, r1

void bmp180_pressure(void){
	long a;
	char d[10];
	init_sensor(bmp180_mode_0);
	a= calculate_pressure();
     d3e:	0e 94 84 03 	call	0x708	; 0x708 <calculate_pressure>
     d42:	7b 01       	movw	r14, r22
     d44:	8c 01       	movw	r16, r24
	uart_init();
     d46:	0e 94 2a 02 	call	0x454	; 0x454 <uart_init>
	lcdinit();										
     d4a:	0e 94 c8 00 	call	0x190	; 0x190 <lcdinit>
	lcd_clear();
     d4e:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_clear>
	lcd_print_xy(0,0,"Pressure=");
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	40 e6       	ldi	r20, 0x60	; 96
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	0e 94 13 01 	call	0x226	; 0x226 <lcd_print_xy>
	ltoa(a,d,10);
     d5e:	c8 01       	movw	r24, r16
     d60:	b7 01       	movw	r22, r14
     d62:	8e 01       	movw	r16, r28
     d64:	0f 5f       	subi	r16, 0xFF	; 255
     d66:	1f 4f       	sbci	r17, 0xFF	; 255
     d68:	a8 01       	movw	r20, r16
     d6a:	2a e0       	ldi	r18, 0x0A	; 10
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <ltoa>
	lcd_print_xy(1,0,d);
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	a8 01       	movw	r20, r16
     d78:	0e 94 13 01 	call	0x226	; 0x226 <lcd_print_xy>
	lcd_print_xy(1,7,"Pa");
     d7c:	aa e6       	ldi	r26, 0x6A	; 106
     d7e:	ea 2e       	mov	r14, r26
     d80:	a0 e0       	ldi	r26, 0x00	; 0
     d82:	fa 2e       	mov	r15, r26
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	67 e0       	ldi	r22, 0x07	; 7
     d88:	a7 01       	movw	r20, r14
     d8a:	0e 94 13 01 	call	0x226	; 0x226 <lcd_print_xy>
	send_string(d);
     d8e:	c8 01       	movw	r24, r16
     d90:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
	send_string("Pa");
     d94:	c7 01       	movw	r24, r14
     d96:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
	send_string("\t");
     d9a:	8d e6       	ldi	r24, 0x6D	; 109
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
}
     da2:	2a 96       	adiw	r28, 0x0a	; 10
     da4:	0f b6       	in	r0, 0x3f	; 63
     da6:	f8 94       	cli
     da8:	de bf       	out	0x3e, r29	; 62
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	cd bf       	out	0x3d, r28	; 61
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	1f 91       	pop	r17
     db4:	0f 91       	pop	r16
     db6:	ff 90       	pop	r15
     db8:	ef 90       	pop	r14
     dba:	08 95       	ret

00000dbc <calculate_altitude>:
    bmp_180.pressure = _pressure + ((X1 + X2 + 3791) /pow(2,4));
	return bmp_180.pressure;
}

long calculate_altitude() {
    bmp_180.altitude = (float) 44330 * (1 - pow(((float) bmp_180.pressure / pressure_sea_level), 0.1903));
     dbc:	60 91 20 01 	lds	r22, 0x0120
     dc0:	70 91 21 01 	lds	r23, 0x0121
     dc4:	80 91 22 01 	lds	r24, 0x0122
     dc8:	90 91 23 01 	lds	r25, 0x0123
     dcc:	0e 94 ae 0a 	call	0x155c	; 0x155c <__floatsisf>
     dd0:	20 e8       	ldi	r18, 0x80	; 128
     dd2:	36 ee       	ldi	r19, 0xE6	; 230
     dd4:	45 ec       	ldi	r20, 0xC5	; 197
     dd6:	57 e4       	ldi	r21, 0x47	; 71
     dd8:	0e 94 13 0a 	call	0x1426	; 0x1426 <__divsf3>
     ddc:	21 e0       	ldi	r18, 0x01	; 1
     dde:	3e ed       	ldi	r19, 0xDE	; 222
     de0:	42 e4       	ldi	r20, 0x42	; 66
     de2:	5e e3       	ldi	r21, 0x3E	; 62
     de4:	0e 94 9d 0b 	call	0x173a	; 0x173a <pow>
     de8:	9b 01       	movw	r18, r22
     dea:	ac 01       	movw	r20, r24
     dec:	60 e0       	ldi	r22, 0x00	; 0
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	80 e8       	ldi	r24, 0x80	; 128
     df2:	9f e3       	ldi	r25, 0x3F	; 63
     df4:	0e 94 ae 09 	call	0x135c	; 0x135c <__subsf3>
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	3a e2       	ldi	r19, 0x2A	; 42
     dfc:	4d e2       	ldi	r20, 0x2D	; 45
     dfe:	57 e4       	ldi	r21, 0x47	; 71
     e00:	0e 94 3a 0b 	call	0x1674	; 0x1674 <__mulsf3>
     e04:	60 93 24 01 	sts	0x0124, r22
     e08:	70 93 25 01 	sts	0x0125, r23
     e0c:	80 93 26 01 	sts	0x0126, r24
     e10:	90 93 27 01 	sts	0x0127, r25
     e14:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <__fixsfsi>
     e18:	9b 01       	movw	r18, r22
     e1a:	ac 01       	movw	r20, r24
	return bmp_180.altitude;
}
     e1c:	ca 01       	movw	r24, r20
     e1e:	08 95       	ret

00000e20 <bmp180_altitude>:
	send_string(d);
	send_string("Pa");
	send_string("\t");
}

void bmp180_altitude(void){
     e20:	ef 92       	push	r14
     e22:	ff 92       	push	r15
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	2a 97       	sbiw	r28, 0x0a	; 10
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
	long b;
	char d[10];
	b= calculate_altitude();
     e3c:	0e 94 de 06 	call	0xdbc	; 0xdbc <calculate_altitude>
     e40:	7b 01       	movw	r14, r22
     e42:	8c 01       	movw	r16, r24
	uart_init();
     e44:	0e 94 2a 02 	call	0x454	; 0x454 <uart_init>
	lcdinit();										
     e48:	0e 94 c8 00 	call	0x190	; 0x190 <lcdinit>
	lcd_clear();
     e4c:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_clear>
	lcd_print_xy(0,0,"Altitude=");
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	4f e6       	ldi	r20, 0x6F	; 111
     e56:	50 e0       	ldi	r21, 0x00	; 0
     e58:	0e 94 13 01 	call	0x226	; 0x226 <lcd_print_xy>
	ltoa(b,d,10);
     e5c:	c8 01       	movw	r24, r16
     e5e:	b7 01       	movw	r22, r14
     e60:	8e 01       	movw	r16, r28
     e62:	0f 5f       	subi	r16, 0xFF	; 255
     e64:	1f 4f       	sbci	r17, 0xFF	; 255
     e66:	a8 01       	movw	r20, r16
     e68:	2a e0       	ldi	r18, 0x0A	; 10
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <ltoa>
	lcd_print_xy(1,0,d);
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	a8 01       	movw	r20, r16
     e76:	0e 94 13 01 	call	0x226	; 0x226 <lcd_print_xy>
	lcd_print_xy(1,4,"m");
     e7a:	b9 e7       	ldi	r27, 0x79	; 121
     e7c:	eb 2e       	mov	r14, r27
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	fb 2e       	mov	r15, r27
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	64 e0       	ldi	r22, 0x04	; 4
     e86:	a7 01       	movw	r20, r14
     e88:	0e 94 13 01 	call	0x226	; 0x226 <lcd_print_xy>
	send_string(d);
     e8c:	c8 01       	movw	r24, r16
     e8e:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
	send_string("m");
     e92:	c7 01       	movw	r24, r14
     e94:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
	send_string("\n");
     e98:	8b e7       	ldi	r24, 0x7B	; 123
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
}
     ea0:	2a 96       	adiw	r28, 0x0a	; 10
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	08 95       	ret

00000eba <rain_drop_data>:
	
	return val1;					
}

void rain_drop_data(void)
{	lcdinit();		// initialize the 16x2 LCD
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	2a 97       	sbiw	r28, 0x0a	; 10
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
     ed6:	0e 94 c8 00 	call	0x190	; 0x190 <lcdinit>
	lcd_clear();	//clear the LCD 
     eda:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_clear>
}

////////////////////////////////rain drop sensor/////////////////
void ADC_Init(void)
{
	DDRA &=~(1<<0);		// Make ADC port as input
     ede:	d0 98       	cbi	0x1a, 0	; 26
	ADCSRA=1<<ADEN ;	   // Enable ADC	
     ee0:	80 e8       	ldi	r24, 0x80	; 128
     ee2:	86 b9       	out	0x06, r24	; 6

void rain_drop_data(void)
{	lcdinit();		// initialize the 16x2 LCD
	lcd_clear();	//clear the LCD 
	ADC_Init();		// initialize the ADC
	uart_init();
     ee4:	0e 94 2a 02 	call	0x454	; 0x454 <uart_init>
	char array[10];
	unsigned int adc_value,c;
	
	adc_value = ADC_Read();	
     ee8:	0e 94 21 02 	call	0x442	; 0x442 <ADC_Read>
     eec:	7c 01       	movw	r14, r24
	c=((adc_value*100)/1023);
	lcd_print("Percentage=");	
     eee:	8d e7       	ldi	r24, 0x7D	; 125
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
	itoa(c,array,10);
     ef6:	84 e6       	ldi	r24, 0x64	; 100
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	9c 01       	movw	r18, r24
     efc:	e2 9e       	mul	r14, r18
     efe:	c0 01       	movw	r24, r0
     f00:	e3 9e       	mul	r14, r19
     f02:	90 0d       	add	r25, r0
     f04:	f2 9e       	mul	r15, r18
     f06:	90 0d       	add	r25, r0
     f08:	11 24       	eor	r1, r1
     f0a:	6f ef       	ldi	r22, 0xFF	; 255
     f0c:	73 e0       	ldi	r23, 0x03	; 3
     f0e:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__udivmodhi4>
     f12:	cb 01       	movw	r24, r22
     f14:	8e 01       	movw	r16, r28
     f16:	0f 5f       	subi	r16, 0xFF	; 255
     f18:	1f 4f       	sbci	r17, 0xFF	; 255
     f1a:	b8 01       	movw	r22, r16
     f1c:	4a e0       	ldi	r20, 0x0A	; 10
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <itoa>
	lcd_print_xy(12,0,array);
     f24:	8c e0       	ldi	r24, 0x0C	; 12
     f26:	60 e0       	ldi	r22, 0x00	; 0
     f28:	a8 01       	movw	r20, r16
     f2a:	0e 94 13 01 	call	0x226	; 0x226 <lcd_print_xy>
	send_string(array);
     f2e:	c8 01       	movw	r24, r16
     f30:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
	lcd_gotoxy(14,0);
     f34:	8e e0       	ldi	r24, 0x0E	; 14
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_gotoxy>
	lcd_print("%");
     f3c:	89 e8       	ldi	r24, 0x89	; 137
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
	send_string("%");
     f44:	89 e8       	ldi	r24, 0x89	; 137
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
	send_string("\t");
     f4c:	8d e6       	ldi	r24, 0x6D	; 109
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
	
	if(adc_value<300){
     f54:	3c e2       	ldi	r19, 0x2C	; 44
     f56:	e3 16       	cp	r14, r19
     f58:	31 e0       	ldi	r19, 0x01	; 1
     f5a:	f3 06       	cpc	r15, r19
     f5c:	48 f4       	brcc	.+18     	; 0xf70 <rain_drop_data+0xb6>
		lcd_print_xy(1,0,"Heavy rain");
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	4b e8       	ldi	r20, 0x8B	; 139
     f64:	50 e0       	ldi	r21, 0x00	; 0
     f66:	0e 94 13 01 	call	0x226	; 0x226 <lcd_print_xy>
		send_string("Heavy rain");
     f6a:	8b e8       	ldi	r24, 0x8B	; 139
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	19 c0       	rjmp	.+50     	; 0xfa2 <rain_drop_data+0xe8>
		send_string("\t");
	}else if((300<=adc_value)&(adc_value<500)){
     f70:	84 ed       	ldi	r24, 0xD4	; 212
     f72:	9e ef       	ldi	r25, 0xFE	; 254
     f74:	e8 0e       	add	r14, r24
     f76:	f9 1e       	adc	r15, r25
     f78:	98 ec       	ldi	r25, 0xC8	; 200
     f7a:	e9 16       	cp	r14, r25
     f7c:	f1 04       	cpc	r15, r1
     f7e:	48 f4       	brcc	.+18     	; 0xf92 <rain_drop_data+0xd8>
		lcd_print_xy(1,0,"Moderate rain");
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	46 e9       	ldi	r20, 0x96	; 150
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	0e 94 13 01 	call	0x226	; 0x226 <lcd_print_xy>
		send_string("Moderate rain");
     f8c:	86 e9       	ldi	r24, 0x96	; 150
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	08 c0       	rjmp	.+16     	; 0xfa2 <rain_drop_data+0xe8>
		send_string("\t");
	}else{
		lcd_print_xy(1,0,"No rain");
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	44 ea       	ldi	r20, 0xA4	; 164
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	0e 94 13 01 	call	0x226	; 0x226 <lcd_print_xy>
		send_string("No rain");
     f9e:	84 ea       	ldi	r24, 0xA4	; 164
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
		send_string("\t");
     fa6:	8d e6       	ldi	r24, 0x6D	; 109
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
	}

}
     fae:	2a 96       	adiw	r28, 0x0a	; 10
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	1f 91       	pop	r17
     fc0:	0f 91       	pop	r16
     fc2:	ff 90       	pop	r15
     fc4:	ef 90       	pop	r14
     fc6:	08 95       	ret

00000fc8 <dht11_data>:
		while(PIND & (1<<DHT11_PIN));
	}
	return c;
}

void dht11_data(void){
     fc8:	0f 93       	push	r16
     fca:	1f 93       	push	r17
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <dht11_data+0xa>
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <dht11_data+0xc>
     fd4:	0f 92       	push	r0
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
	lcdinit();					
     fda:	0e 94 c8 00 	call	0x190	; 0x190 <lcdinit>
	lcd_clear();
     fde:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_clear>
	
	uart_init();
     fe2:	0e 94 2a 02 	call	0x454	; 0x454 <uart_init>
	
	char data[5];
	
	Request();				                                      //send start pulse 
     fe6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <Request>
	Response();				                                            // receive response
     fea:	0e 94 73 01 	call	0x2e6	; 0x2e6 <Response>
	I_RH=Receive_data();	                                         // store first eight bit in I_RH
     fee:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Receive_data>
     ff2:	80 93 4f 01 	sts	0x014F, r24
	D_RH=Receive_data();	                                         // store next eight bit in D_RH 
     ff6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Receive_data>
     ffa:	80 93 4a 01 	sts	0x014A, r24
	I_Temp=Receive_data();	                                                // store next eight bit in I_Temp 
     ffe:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Receive_data>
    1002:	80 93 4e 01 	sts	0x014E, r24
	D_Temp=Receive_data();                                                       	// store next eight bit in D_Temp
    1006:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Receive_data>
    100a:	80 93 52 01 	sts	0x0152, r24
	CheckSum=Receive_data();                                          // store next eight bit in CheckSum 
    100e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <Receive_data>
    1012:	80 93 4b 01 	sts	0x014B, r24
		
		
	if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)
    1016:	40 91 4a 01 	lds	r20, 0x014A
    101a:	20 91 4f 01 	lds	r18, 0x014F
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	24 0f       	add	r18, r20
    1022:	31 1d       	adc	r19, r1
    1024:	40 91 4e 01 	lds	r20, 0x014E
    1028:	24 0f       	add	r18, r20
    102a:	31 1d       	adc	r19, r1
    102c:	40 91 52 01 	lds	r20, 0x0152
    1030:	24 0f       	add	r18, r20
    1032:	31 1d       	adc	r19, r1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	28 17       	cp	r18, r24
    1038:	39 07       	cpc	r19, r25
    103a:	49 f0       	breq	.+18     	; 0x104e <dht11_data+0x86>
	{
		lcd_gotoxy(0,0);
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_gotoxy>
		lcd_print("Error");
    1044:	8c ea       	ldi	r24, 0xAC	; 172
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
    104c:	87 c0       	rjmp	.+270    	; 0x115c <dht11_data+0x194>
	}
		
	else
	{	
		lcd_gotoxy(0,0);			
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	60 e0       	ldi	r22, 0x00	; 0
    1052:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_gotoxy>
		lcd_print("Humidity =");
    1056:	82 eb       	ldi	r24, 0xB2	; 178
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
		itoa(I_RH,data,10);
    105e:	80 91 4f 01 	lds	r24, 0x014F
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	8e 01       	movw	r16, r28
    1066:	0f 5f       	subi	r16, 0xFF	; 255
    1068:	1f 4f       	sbci	r17, 0xFF	; 255
    106a:	b8 01       	movw	r22, r16
    106c:	4a e0       	ldi	r20, 0x0A	; 10
    106e:	50 e0       	ldi	r21, 0x00	; 0
    1070:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <itoa>
		lcd_gotoxy(11,0);
    1074:	8b e0       	ldi	r24, 0x0B	; 11
    1076:	60 e0       	ldi	r22, 0x00	; 0
    1078:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_gotoxy>
		send_string(data);
    107c:	c8 01       	movw	r24, r16
    107e:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
		send_string(".");
    1082:	8d eb       	ldi	r24, 0xBD	; 189
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
		lcd_print(data);
    108a:	c8 01       	movw	r24, r16
    108c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
		lcd_print(".");
    1090:	8d eb       	ldi	r24, 0xBD	; 189
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
			
		itoa(D_RH,data,10);
    1098:	80 91 4a 01 	lds	r24, 0x014A
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	b8 01       	movw	r22, r16
    10a0:	4a e0       	ldi	r20, 0x0A	; 10
    10a2:	50 e0       	ldi	r21, 0x00	; 0
    10a4:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <itoa>
		send_string(data);
    10a8:	c8 01       	movw	r24, r16
    10aa:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
		send_string("%");
    10ae:	89 e8       	ldi	r24, 0x89	; 137
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
		send_string("\t");
    10b6:	8d e6       	ldi	r24, 0x6D	; 109
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
		lcd_print(data);
    10be:	c8 01       	movw	r24, r16
    10c0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
		lcd_print("%");
    10c4:	89 e8       	ldi	r24, 0x89	; 137
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>

		lcd_gotoxy(0,1);
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	61 e0       	ldi	r22, 0x01	; 1
    10d0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_gotoxy>
		lcd_print("Temp = ");
    10d4:	8f eb       	ldi	r24, 0xBF	; 191
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
		itoa(I_Temp,data,10);
    10dc:	80 91 4e 01 	lds	r24, 0x014E
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	b8 01       	movw	r22, r16
    10e4:	4a e0       	ldi	r20, 0x0A	; 10
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <itoa>
		lcd_gotoxy(6,1);
    10ec:	86 e0       	ldi	r24, 0x06	; 6
    10ee:	61 e0       	ldi	r22, 0x01	; 1
    10f0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_gotoxy>
		send_string(data);
    10f4:	c8 01       	movw	r24, r16
    10f6:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
		send_string(".");
    10fa:	8d eb       	ldi	r24, 0xBD	; 189
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
		lcd_print(data);
    1102:	c8 01       	movw	r24, r16
    1104:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
		lcd_print(".");
    1108:	8d eb       	ldi	r24, 0xBD	; 189
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
			
		itoa(D_Temp,data,10);
    1110:	80 91 52 01 	lds	r24, 0x0152
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	b8 01       	movw	r22, r16
    1118:	4a e0       	ldi	r20, 0x0A	; 10
    111a:	50 e0       	ldi	r21, 0x00	; 0
    111c:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <itoa>
		lcd_print(data);
    1120:	c8 01       	movw	r24, r16
    1122:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
		send_string(data);
    1126:	c8 01       	movw	r24, r16
    1128:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
		send_string("C");
    112c:	87 ec       	ldi	r24, 0xC7	; 199
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
		send_string("\t");
    1134:	8d e6       	ldi	r24, 0x6D	; 109
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
		lcddata(0xDF);
    113c:	8f ed       	ldi	r24, 0xDF	; 223
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 a9 00 	call	0x152	; 0x152 <lcddata>
		lcd_print("C ");
    1144:	89 ec       	ldi	r24, 0xC9	; 201
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
			
		itoa(CheckSum,data,10);	
    114c:	80 91 4b 01 	lds	r24, 0x014B
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	b8 01       	movw	r22, r16
    1154:	4a e0       	ldi	r20, 0x0A	; 10
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <itoa>
}
		
}
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	08 95       	ret

00001170 <ds1307_data>:
	month = TWI_Read_Data(1);						                           // Read month 
	year =TWI_Read_Data(0);							                           // Read the year with Nack
	TWI_Stop();									                                  // Stop I2C communication
}

void ds1307_data(void){
    1170:	ef 92       	push	r14
    1172:	ff 92       	push	r15
    1174:	0f 93       	push	r16
    1176:	1f 93       	push	r17
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	64 97       	sbiw	r28, 0x14	; 20
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61

uint8_t i2cdebug = 0;

void TWI_Init(void){
    
    TWSR = 0x00; // Prescaler 1
    118c:	11 b8       	out	0x01, r1	; 1
    TWBR = 0x00; // Decimal 32
    118e:	10 b8       	out	0x00, r1	; 0
	char buffer[20];
	
	TWI_Init();										// Initialize I2C
	uart_init();
    1190:	0e 94 2a 02 	call	0x454	; 0x454 <uart_init>
	lcdinit();										// Initialize LCD16x2
    1194:	0e 94 c8 00 	call	0x190	; 0x190 <lcdinit>
	lcd_clear();
    1198:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_clear>
	
	RTC_Read_Clock(0);							// Read the clock with second address i.e location is 0 
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	0e 94 95 01 	call	0x32a	; 0x32a <RTC_Read_Clock>
	
	lcd_print("Time=");
    11a2:	8c ec       	ldi	r24, 0xCC	; 204
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
	sprintf(buffer, "%02x:%02x:%02x", hour, minute, second);
    11aa:	8d b7       	in	r24, 0x3d	; 61
    11ac:	9e b7       	in	r25, 0x3e	; 62
    11ae:	0a 97       	sbiw	r24, 0x0a	; 10
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	9e bf       	out	0x3e, r25	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	8d bf       	out	0x3d, r24	; 61
    11ba:	ed b7       	in	r30, 0x3d	; 61
    11bc:	fe b7       	in	r31, 0x3e	; 62
    11be:	31 96       	adiw	r30, 0x01	; 1
    11c0:	8e 01       	movw	r16, r28
    11c2:	0f 5f       	subi	r16, 0xFF	; 255
    11c4:	1f 4f       	sbci	r17, 0xFF	; 255
    11c6:	ad b7       	in	r26, 0x3d	; 61
    11c8:	be b7       	in	r27, 0x3e	; 62
    11ca:	12 96       	adiw	r26, 0x02	; 2
    11cc:	1c 93       	st	X, r17
    11ce:	0e 93       	st	-X, r16
    11d0:	11 97       	sbiw	r26, 0x01	; 1
    11d2:	82 ed       	ldi	r24, 0xD2	; 210
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	93 83       	std	Z+3, r25	; 0x03
    11d8:	82 83       	std	Z+2, r24	; 0x02
    11da:	80 91 48 01 	lds	r24, 0x0148
    11de:	90 91 49 01 	lds	r25, 0x0149
    11e2:	95 83       	std	Z+5, r25	; 0x05
    11e4:	84 83       	std	Z+4, r24	; 0x04
    11e6:	80 91 46 01 	lds	r24, 0x0146
    11ea:	90 91 47 01 	lds	r25, 0x0147
    11ee:	97 83       	std	Z+7, r25	; 0x07
    11f0:	86 83       	std	Z+6, r24	; 0x06
    11f2:	80 91 44 01 	lds	r24, 0x0144
    11f6:	90 91 45 01 	lds	r25, 0x0145
    11fa:	91 87       	std	Z+9, r25	; 0x09
    11fc:	80 87       	std	Z+8, r24	; 0x08
    11fe:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <sprintf>
	lcd_print_xy(6,0,buffer);
    1202:	8d b7       	in	r24, 0x3d	; 61
    1204:	9e b7       	in	r25, 0x3e	; 62
    1206:	0a 96       	adiw	r24, 0x0a	; 10
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	9e bf       	out	0x3e, r25	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	8d bf       	out	0x3d, r24	; 61
    1212:	86 e0       	ldi	r24, 0x06	; 6
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	a8 01       	movw	r20, r16
    1218:	0e 94 13 01 	call	0x226	; 0x226 <lcd_print_xy>
	send_string(buffer);
    121c:	c8 01       	movw	r24, r16
    121e:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
	send_string("\t");
    1222:	8d e6       	ldi	r24, 0x6D	; 109
    1224:	e8 2e       	mov	r14, r24
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	f8 2e       	mov	r15, r24
    122a:	c7 01       	movw	r24, r14
    122c:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
	
	RTC_Read_Calendar(3);                 // Read the calender with day address i.e location is 3
    1230:	83 e0       	ldi	r24, 0x03	; 3
    1232:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <RTC_Read_Calendar>
		
	sprintf(buffer, "%02x/%02x/%02x", date, month, year);
    1236:	ad b7       	in	r26, 0x3d	; 61
    1238:	be b7       	in	r27, 0x3e	; 62
    123a:	1a 97       	sbiw	r26, 0x0a	; 10
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	be bf       	out	0x3e, r27	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	ad bf       	out	0x3d, r26	; 61
    1246:	ed b7       	in	r30, 0x3d	; 61
    1248:	fe b7       	in	r31, 0x3e	; 62
    124a:	31 96       	adiw	r30, 0x01	; 1
    124c:	12 96       	adiw	r26, 0x02	; 2
    124e:	1c 93       	st	X, r17
    1250:	0e 93       	st	-X, r16
    1252:	11 97       	sbiw	r26, 0x01	; 1
    1254:	81 ee       	ldi	r24, 0xE1	; 225
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	93 83       	std	Z+3, r25	; 0x03
    125a:	82 83       	std	Z+2, r24	; 0x02
    125c:	80 91 53 01 	lds	r24, 0x0153
    1260:	90 91 54 01 	lds	r25, 0x0154
    1264:	95 83       	std	Z+5, r25	; 0x05
    1266:	84 83       	std	Z+4, r24	; 0x04
    1268:	80 91 42 01 	lds	r24, 0x0142
    126c:	90 91 43 01 	lds	r25, 0x0143
    1270:	97 83       	std	Z+7, r25	; 0x07
    1272:	86 83       	std	Z+6, r24	; 0x06
    1274:	80 91 4c 01 	lds	r24, 0x014C
    1278:	90 91 4d 01 	lds	r25, 0x014D
    127c:	91 87       	std	Z+9, r25	; 0x09
    127e:	80 87       	std	Z+8, r24	; 0x08
    1280:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <sprintf>
	send_string(buffer);
    1284:	8d b7       	in	r24, 0x3d	; 61
    1286:	9e b7       	in	r25, 0x3e	; 62
    1288:	0a 96       	adiw	r24, 0x0a	; 10
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	9e bf       	out	0x3e, r25	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	8d bf       	out	0x3d, r24	; 61
    1294:	c8 01       	movw	r24, r16
    1296:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
	send_string("\t");
    129a:	c7 01       	movw	r24, r14
    129c:	0e 94 38 02 	call	0x470	; 0x470 <send_string>
	lcd_gotoxy(0,1);						
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	61 e0       	ldi	r22, 0x01	; 1
    12a4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_gotoxy>
	lcd_print("Date=");
    12a8:	80 ef       	ldi	r24, 0xF0	; 240
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_print>
	lcd_print_xy(1,6,buffer);	
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	66 e0       	ldi	r22, 0x06	; 6
    12b4:	a8 01       	movw	r20, r16
    12b6:	0e 94 13 01 	call	0x226	; 0x226 <lcd_print_xy>
	
}
    12ba:	64 96       	adiw	r28, 0x14	; 20
    12bc:	0f b6       	in	r0, 0x3f	; 63
    12be:	f8 94       	cli
    12c0:	de bf       	out	0x3e, r29	; 62
    12c2:	0f be       	out	0x3f, r0	; 63
    12c4:	cd bf       	out	0x3d, r28	; 61
    12c6:	cf 91       	pop	r28
    12c8:	df 91       	pop	r29
    12ca:	1f 91       	pop	r17
    12cc:	0f 91       	pop	r16
    12ce:	ff 90       	pop	r15
    12d0:	ef 90       	pop	r14
    12d2:	08 95       	ret

000012d4 <main>:
void send_uart(unsigned char val);



int main(void)
{	ds1307_data();
    12d4:	0e 94 b8 08 	call	0x1170	; 0x1170 <ds1307_data>
    12d8:	80 e3       	ldi	r24, 0x30	; 48
    12da:	95 e7       	ldi	r25, 0x75	; 117
    12dc:	22 e3       	ldi	r18, 0x32	; 50
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	f9 01       	movw	r30, r18
    12e2:	31 97       	sbiw	r30, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <main+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e8:	d9 f7       	brne	.-10     	; 0x12e0 <main+0xc>
	_delay_ms(3000);
	lcd_clear();
    12ea:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_clear>
	
	dht11_data();
    12ee:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <dht11_data>
    12f2:	80 e3       	ldi	r24, 0x30	; 48
    12f4:	95 e7       	ldi	r25, 0x75	; 117
    12f6:	22 e3       	ldi	r18, 0x32	; 50
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	f9 01       	movw	r30, r18
    12fc:	31 97       	sbiw	r30, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <main+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1300:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1302:	d9 f7       	brne	.-10     	; 0x12fa <main+0x26>
	_delay_ms(3000);
	lcd_clear();
    1304:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_clear>
	
	rain_drop_data();
    1308:	0e 94 5d 07 	call	0xeba	; 0xeba <rain_drop_data>
    130c:	80 e3       	ldi	r24, 0x30	; 48
    130e:	95 e7       	ldi	r25, 0x75	; 117
    1310:	22 e3       	ldi	r18, 0x32	; 50
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	f9 01       	movw	r30, r18
    1316:	31 97       	sbiw	r30, 0x01	; 1
    1318:	f1 f7       	brne	.-4      	; 0x1316 <main+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    131a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131c:	d9 f7       	brne	.-10     	; 0x1314 <main+0x40>
	_delay_ms(3000);
	lcd_clear();
    131e:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_clear>
	
	bmp180_pressure();
    1322:	0e 94 8b 06 	call	0xd16	; 0xd16 <bmp180_pressure>
    1326:	80 e3       	ldi	r24, 0x30	; 48
    1328:	95 e7       	ldi	r25, 0x75	; 117
    132a:	22 e3       	ldi	r18, 0x32	; 50
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	f9 01       	movw	r30, r18
    1330:	31 97       	sbiw	r30, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <main+0x5c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1334:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1336:	d9 f7       	brne	.-10     	; 0x132e <main+0x5a>
	_delay_ms(3000);
	lcd_clear();
    1338:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_clear>
	
	bmp180_altitude();
    133c:	0e 94 10 07 	call	0xe20	; 0xe20 <bmp180_altitude>
    1340:	80 e3       	ldi	r24, 0x30	; 48
    1342:	95 e7       	ldi	r25, 0x75	; 117
    1344:	22 e3       	ldi	r18, 0x32	; 50
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	f9 01       	movw	r30, r18
    134a:	31 97       	sbiw	r30, 0x01	; 1
    134c:	f1 f7       	brne	.-4      	; 0x134a <main+0x76>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    134e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1350:	d9 f7       	brne	.-10     	; 0x1348 <main+0x74>
	_delay_ms(3000);
	lcd_clear();
    1352:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_clear>
	
	
	while(1){
		detection();
    1356:	0e 94 3e 06 	call	0xc7c	; 0xc7c <detection>
    135a:	fd cf       	rjmp	.-6      	; 0x1356 <main+0x82>

0000135c <__subsf3>:
    135c:	50 58       	subi	r21, 0x80	; 128

0000135e <__addsf3>:
    135e:	bb 27       	eor	r27, r27
    1360:	aa 27       	eor	r26, r26
    1362:	0e d0       	rcall	.+28     	; 0x1380 <__addsf3x>
    1364:	4d c1       	rjmp	.+666    	; 0x1600 <__fp_round>
    1366:	3e d1       	rcall	.+636    	; 0x15e4 <__fp_pscA>
    1368:	30 f0       	brcs	.+12     	; 0x1376 <__addsf3+0x18>
    136a:	43 d1       	rcall	.+646    	; 0x15f2 <__fp_pscB>
    136c:	20 f0       	brcs	.+8      	; 0x1376 <__addsf3+0x18>
    136e:	31 f4       	brne	.+12     	; 0x137c <__addsf3+0x1e>
    1370:	9f 3f       	cpi	r25, 0xFF	; 255
    1372:	11 f4       	brne	.+4      	; 0x1378 <__addsf3+0x1a>
    1374:	1e f4       	brtc	.+6      	; 0x137c <__addsf3+0x1e>
    1376:	33 c1       	rjmp	.+614    	; 0x15de <__fp_nan>
    1378:	0e f4       	brtc	.+2      	; 0x137c <__addsf3+0x1e>
    137a:	e0 95       	com	r30
    137c:	e7 fb       	bst	r30, 7
    137e:	29 c1       	rjmp	.+594    	; 0x15d2 <__fp_inf>

00001380 <__addsf3x>:
    1380:	e9 2f       	mov	r30, r25
    1382:	4f d1       	rcall	.+670    	; 0x1622 <__fp_split3>
    1384:	80 f3       	brcs	.-32     	; 0x1366 <__addsf3+0x8>
    1386:	ba 17       	cp	r27, r26
    1388:	62 07       	cpc	r22, r18
    138a:	73 07       	cpc	r23, r19
    138c:	84 07       	cpc	r24, r20
    138e:	95 07       	cpc	r25, r21
    1390:	18 f0       	brcs	.+6      	; 0x1398 <__addsf3x+0x18>
    1392:	71 f4       	brne	.+28     	; 0x13b0 <__addsf3x+0x30>
    1394:	9e f5       	brtc	.+102    	; 0x13fc <__addsf3x+0x7c>
    1396:	67 c1       	rjmp	.+718    	; 0x1666 <__fp_zero>
    1398:	0e f4       	brtc	.+2      	; 0x139c <__addsf3x+0x1c>
    139a:	e0 95       	com	r30
    139c:	0b 2e       	mov	r0, r27
    139e:	ba 2f       	mov	r27, r26
    13a0:	a0 2d       	mov	r26, r0
    13a2:	0b 01       	movw	r0, r22
    13a4:	b9 01       	movw	r22, r18
    13a6:	90 01       	movw	r18, r0
    13a8:	0c 01       	movw	r0, r24
    13aa:	ca 01       	movw	r24, r20
    13ac:	a0 01       	movw	r20, r0
    13ae:	11 24       	eor	r1, r1
    13b0:	ff 27       	eor	r31, r31
    13b2:	59 1b       	sub	r21, r25
    13b4:	99 f0       	breq	.+38     	; 0x13dc <__addsf3x+0x5c>
    13b6:	59 3f       	cpi	r21, 0xF9	; 249
    13b8:	50 f4       	brcc	.+20     	; 0x13ce <__addsf3x+0x4e>
    13ba:	50 3e       	cpi	r21, 0xE0	; 224
    13bc:	68 f1       	brcs	.+90     	; 0x1418 <__addsf3x+0x98>
    13be:	1a 16       	cp	r1, r26
    13c0:	f0 40       	sbci	r31, 0x00	; 0
    13c2:	a2 2f       	mov	r26, r18
    13c4:	23 2f       	mov	r18, r19
    13c6:	34 2f       	mov	r19, r20
    13c8:	44 27       	eor	r20, r20
    13ca:	58 5f       	subi	r21, 0xF8	; 248
    13cc:	f3 cf       	rjmp	.-26     	; 0x13b4 <__addsf3x+0x34>
    13ce:	46 95       	lsr	r20
    13d0:	37 95       	ror	r19
    13d2:	27 95       	ror	r18
    13d4:	a7 95       	ror	r26
    13d6:	f0 40       	sbci	r31, 0x00	; 0
    13d8:	53 95       	inc	r21
    13da:	c9 f7       	brne	.-14     	; 0x13ce <__addsf3x+0x4e>
    13dc:	7e f4       	brtc	.+30     	; 0x13fc <__addsf3x+0x7c>
    13de:	1f 16       	cp	r1, r31
    13e0:	ba 0b       	sbc	r27, r26
    13e2:	62 0b       	sbc	r22, r18
    13e4:	73 0b       	sbc	r23, r19
    13e6:	84 0b       	sbc	r24, r20
    13e8:	ba f0       	brmi	.+46     	; 0x1418 <__addsf3x+0x98>
    13ea:	91 50       	subi	r25, 0x01	; 1
    13ec:	a1 f0       	breq	.+40     	; 0x1416 <__addsf3x+0x96>
    13ee:	ff 0f       	add	r31, r31
    13f0:	bb 1f       	adc	r27, r27
    13f2:	66 1f       	adc	r22, r22
    13f4:	77 1f       	adc	r23, r23
    13f6:	88 1f       	adc	r24, r24
    13f8:	c2 f7       	brpl	.-16     	; 0x13ea <__addsf3x+0x6a>
    13fa:	0e c0       	rjmp	.+28     	; 0x1418 <__addsf3x+0x98>
    13fc:	ba 0f       	add	r27, r26
    13fe:	62 1f       	adc	r22, r18
    1400:	73 1f       	adc	r23, r19
    1402:	84 1f       	adc	r24, r20
    1404:	48 f4       	brcc	.+18     	; 0x1418 <__addsf3x+0x98>
    1406:	87 95       	ror	r24
    1408:	77 95       	ror	r23
    140a:	67 95       	ror	r22
    140c:	b7 95       	ror	r27
    140e:	f7 95       	ror	r31
    1410:	9e 3f       	cpi	r25, 0xFE	; 254
    1412:	08 f0       	brcs	.+2      	; 0x1416 <__addsf3x+0x96>
    1414:	b3 cf       	rjmp	.-154    	; 0x137c <__addsf3+0x1e>
    1416:	93 95       	inc	r25
    1418:	88 0f       	add	r24, r24
    141a:	08 f0       	brcs	.+2      	; 0x141e <__addsf3x+0x9e>
    141c:	99 27       	eor	r25, r25
    141e:	ee 0f       	add	r30, r30
    1420:	97 95       	ror	r25
    1422:	87 95       	ror	r24
    1424:	08 95       	ret

00001426 <__divsf3>:
    1426:	0c d0       	rcall	.+24     	; 0x1440 <__divsf3x>
    1428:	eb c0       	rjmp	.+470    	; 0x1600 <__fp_round>
    142a:	e3 d0       	rcall	.+454    	; 0x15f2 <__fp_pscB>
    142c:	40 f0       	brcs	.+16     	; 0x143e <__divsf3+0x18>
    142e:	da d0       	rcall	.+436    	; 0x15e4 <__fp_pscA>
    1430:	30 f0       	brcs	.+12     	; 0x143e <__divsf3+0x18>
    1432:	21 f4       	brne	.+8      	; 0x143c <__divsf3+0x16>
    1434:	5f 3f       	cpi	r21, 0xFF	; 255
    1436:	19 f0       	breq	.+6      	; 0x143e <__divsf3+0x18>
    1438:	cc c0       	rjmp	.+408    	; 0x15d2 <__fp_inf>
    143a:	51 11       	cpse	r21, r1
    143c:	15 c1       	rjmp	.+554    	; 0x1668 <__fp_szero>
    143e:	cf c0       	rjmp	.+414    	; 0x15de <__fp_nan>

00001440 <__divsf3x>:
    1440:	f0 d0       	rcall	.+480    	; 0x1622 <__fp_split3>
    1442:	98 f3       	brcs	.-26     	; 0x142a <__divsf3+0x4>

00001444 <__divsf3_pse>:
    1444:	99 23       	and	r25, r25
    1446:	c9 f3       	breq	.-14     	; 0x143a <__divsf3+0x14>
    1448:	55 23       	and	r21, r21
    144a:	b1 f3       	breq	.-20     	; 0x1438 <__divsf3+0x12>
    144c:	95 1b       	sub	r25, r21
    144e:	55 0b       	sbc	r21, r21
    1450:	bb 27       	eor	r27, r27
    1452:	aa 27       	eor	r26, r26
    1454:	62 17       	cp	r22, r18
    1456:	73 07       	cpc	r23, r19
    1458:	84 07       	cpc	r24, r20
    145a:	38 f0       	brcs	.+14     	; 0x146a <__divsf3_pse+0x26>
    145c:	9f 5f       	subi	r25, 0xFF	; 255
    145e:	5f 4f       	sbci	r21, 0xFF	; 255
    1460:	22 0f       	add	r18, r18
    1462:	33 1f       	adc	r19, r19
    1464:	44 1f       	adc	r20, r20
    1466:	aa 1f       	adc	r26, r26
    1468:	a9 f3       	breq	.-22     	; 0x1454 <__divsf3_pse+0x10>
    146a:	33 d0       	rcall	.+102    	; 0x14d2 <__divsf3_pse+0x8e>
    146c:	0e 2e       	mov	r0, r30
    146e:	3a f0       	brmi	.+14     	; 0x147e <__divsf3_pse+0x3a>
    1470:	e0 e8       	ldi	r30, 0x80	; 128
    1472:	30 d0       	rcall	.+96     	; 0x14d4 <__divsf3_pse+0x90>
    1474:	91 50       	subi	r25, 0x01	; 1
    1476:	50 40       	sbci	r21, 0x00	; 0
    1478:	e6 95       	lsr	r30
    147a:	00 1c       	adc	r0, r0
    147c:	ca f7       	brpl	.-14     	; 0x1470 <__divsf3_pse+0x2c>
    147e:	29 d0       	rcall	.+82     	; 0x14d2 <__divsf3_pse+0x8e>
    1480:	fe 2f       	mov	r31, r30
    1482:	27 d0       	rcall	.+78     	; 0x14d2 <__divsf3_pse+0x8e>
    1484:	66 0f       	add	r22, r22
    1486:	77 1f       	adc	r23, r23
    1488:	88 1f       	adc	r24, r24
    148a:	bb 1f       	adc	r27, r27
    148c:	26 17       	cp	r18, r22
    148e:	37 07       	cpc	r19, r23
    1490:	48 07       	cpc	r20, r24
    1492:	ab 07       	cpc	r26, r27
    1494:	b0 e8       	ldi	r27, 0x80	; 128
    1496:	09 f0       	breq	.+2      	; 0x149a <__divsf3_pse+0x56>
    1498:	bb 0b       	sbc	r27, r27
    149a:	80 2d       	mov	r24, r0
    149c:	bf 01       	movw	r22, r30
    149e:	ff 27       	eor	r31, r31
    14a0:	93 58       	subi	r25, 0x83	; 131
    14a2:	5f 4f       	sbci	r21, 0xFF	; 255
    14a4:	2a f0       	brmi	.+10     	; 0x14b0 <__divsf3_pse+0x6c>
    14a6:	9e 3f       	cpi	r25, 0xFE	; 254
    14a8:	51 05       	cpc	r21, r1
    14aa:	68 f0       	brcs	.+26     	; 0x14c6 <__divsf3_pse+0x82>
    14ac:	92 c0       	rjmp	.+292    	; 0x15d2 <__fp_inf>
    14ae:	dc c0       	rjmp	.+440    	; 0x1668 <__fp_szero>
    14b0:	5f 3f       	cpi	r21, 0xFF	; 255
    14b2:	ec f3       	brlt	.-6      	; 0x14ae <__divsf3_pse+0x6a>
    14b4:	98 3e       	cpi	r25, 0xE8	; 232
    14b6:	dc f3       	brlt	.-10     	; 0x14ae <__divsf3_pse+0x6a>
    14b8:	86 95       	lsr	r24
    14ba:	77 95       	ror	r23
    14bc:	67 95       	ror	r22
    14be:	b7 95       	ror	r27
    14c0:	f7 95       	ror	r31
    14c2:	9f 5f       	subi	r25, 0xFF	; 255
    14c4:	c9 f7       	brne	.-14     	; 0x14b8 <__divsf3_pse+0x74>
    14c6:	88 0f       	add	r24, r24
    14c8:	91 1d       	adc	r25, r1
    14ca:	96 95       	lsr	r25
    14cc:	87 95       	ror	r24
    14ce:	97 f9       	bld	r25, 7
    14d0:	08 95       	ret
    14d2:	e1 e0       	ldi	r30, 0x01	; 1
    14d4:	66 0f       	add	r22, r22
    14d6:	77 1f       	adc	r23, r23
    14d8:	88 1f       	adc	r24, r24
    14da:	bb 1f       	adc	r27, r27
    14dc:	62 17       	cp	r22, r18
    14de:	73 07       	cpc	r23, r19
    14e0:	84 07       	cpc	r24, r20
    14e2:	ba 07       	cpc	r27, r26
    14e4:	20 f0       	brcs	.+8      	; 0x14ee <__divsf3_pse+0xaa>
    14e6:	62 1b       	sub	r22, r18
    14e8:	73 0b       	sbc	r23, r19
    14ea:	84 0b       	sbc	r24, r20
    14ec:	ba 0b       	sbc	r27, r26
    14ee:	ee 1f       	adc	r30, r30
    14f0:	88 f7       	brcc	.-30     	; 0x14d4 <__divsf3_pse+0x90>
    14f2:	e0 95       	com	r30
    14f4:	08 95       	ret

000014f6 <__fixsfsi>:
    14f6:	04 d0       	rcall	.+8      	; 0x1500 <__fixunssfsi>
    14f8:	68 94       	set
    14fa:	b1 11       	cpse	r27, r1
    14fc:	b5 c0       	rjmp	.+362    	; 0x1668 <__fp_szero>
    14fe:	08 95       	ret

00001500 <__fixunssfsi>:
    1500:	98 d0       	rcall	.+304    	; 0x1632 <__fp_splitA>
    1502:	88 f0       	brcs	.+34     	; 0x1526 <__fixunssfsi+0x26>
    1504:	9f 57       	subi	r25, 0x7F	; 127
    1506:	90 f0       	brcs	.+36     	; 0x152c <__fixunssfsi+0x2c>
    1508:	b9 2f       	mov	r27, r25
    150a:	99 27       	eor	r25, r25
    150c:	b7 51       	subi	r27, 0x17	; 23
    150e:	a0 f0       	brcs	.+40     	; 0x1538 <__fixunssfsi+0x38>
    1510:	d1 f0       	breq	.+52     	; 0x1546 <__fixunssfsi+0x46>
    1512:	66 0f       	add	r22, r22
    1514:	77 1f       	adc	r23, r23
    1516:	88 1f       	adc	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	1a f0       	brmi	.+6      	; 0x1522 <__fixunssfsi+0x22>
    151c:	ba 95       	dec	r27
    151e:	c9 f7       	brne	.-14     	; 0x1512 <__fixunssfsi+0x12>
    1520:	12 c0       	rjmp	.+36     	; 0x1546 <__fixunssfsi+0x46>
    1522:	b1 30       	cpi	r27, 0x01	; 1
    1524:	81 f0       	breq	.+32     	; 0x1546 <__fixunssfsi+0x46>
    1526:	9f d0       	rcall	.+318    	; 0x1666 <__fp_zero>
    1528:	b1 e0       	ldi	r27, 0x01	; 1
    152a:	08 95       	ret
    152c:	9c c0       	rjmp	.+312    	; 0x1666 <__fp_zero>
    152e:	67 2f       	mov	r22, r23
    1530:	78 2f       	mov	r23, r24
    1532:	88 27       	eor	r24, r24
    1534:	b8 5f       	subi	r27, 0xF8	; 248
    1536:	39 f0       	breq	.+14     	; 0x1546 <__fixunssfsi+0x46>
    1538:	b9 3f       	cpi	r27, 0xF9	; 249
    153a:	cc f3       	brlt	.-14     	; 0x152e <__fixunssfsi+0x2e>
    153c:	86 95       	lsr	r24
    153e:	77 95       	ror	r23
    1540:	67 95       	ror	r22
    1542:	b3 95       	inc	r27
    1544:	d9 f7       	brne	.-10     	; 0x153c <__fixunssfsi+0x3c>
    1546:	3e f4       	brtc	.+14     	; 0x1556 <__fixunssfsi+0x56>
    1548:	90 95       	com	r25
    154a:	80 95       	com	r24
    154c:	70 95       	com	r23
    154e:	61 95       	neg	r22
    1550:	7f 4f       	sbci	r23, 0xFF	; 255
    1552:	8f 4f       	sbci	r24, 0xFF	; 255
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	08 95       	ret

00001558 <__floatunsisf>:
    1558:	e8 94       	clt
    155a:	09 c0       	rjmp	.+18     	; 0x156e <__floatsisf+0x12>

0000155c <__floatsisf>:
    155c:	97 fb       	bst	r25, 7
    155e:	3e f4       	brtc	.+14     	; 0x156e <__floatsisf+0x12>
    1560:	90 95       	com	r25
    1562:	80 95       	com	r24
    1564:	70 95       	com	r23
    1566:	61 95       	neg	r22
    1568:	7f 4f       	sbci	r23, 0xFF	; 255
    156a:	8f 4f       	sbci	r24, 0xFF	; 255
    156c:	9f 4f       	sbci	r25, 0xFF	; 255
    156e:	99 23       	and	r25, r25
    1570:	a9 f0       	breq	.+42     	; 0x159c <__floatsisf+0x40>
    1572:	f9 2f       	mov	r31, r25
    1574:	96 e9       	ldi	r25, 0x96	; 150
    1576:	bb 27       	eor	r27, r27
    1578:	93 95       	inc	r25
    157a:	f6 95       	lsr	r31
    157c:	87 95       	ror	r24
    157e:	77 95       	ror	r23
    1580:	67 95       	ror	r22
    1582:	b7 95       	ror	r27
    1584:	f1 11       	cpse	r31, r1
    1586:	f8 cf       	rjmp	.-16     	; 0x1578 <__floatsisf+0x1c>
    1588:	fa f4       	brpl	.+62     	; 0x15c8 <__floatsisf+0x6c>
    158a:	bb 0f       	add	r27, r27
    158c:	11 f4       	brne	.+4      	; 0x1592 <__floatsisf+0x36>
    158e:	60 ff       	sbrs	r22, 0
    1590:	1b c0       	rjmp	.+54     	; 0x15c8 <__floatsisf+0x6c>
    1592:	6f 5f       	subi	r22, 0xFF	; 255
    1594:	7f 4f       	sbci	r23, 0xFF	; 255
    1596:	8f 4f       	sbci	r24, 0xFF	; 255
    1598:	9f 4f       	sbci	r25, 0xFF	; 255
    159a:	16 c0       	rjmp	.+44     	; 0x15c8 <__floatsisf+0x6c>
    159c:	88 23       	and	r24, r24
    159e:	11 f0       	breq	.+4      	; 0x15a4 <__floatsisf+0x48>
    15a0:	96 e9       	ldi	r25, 0x96	; 150
    15a2:	11 c0       	rjmp	.+34     	; 0x15c6 <__floatsisf+0x6a>
    15a4:	77 23       	and	r23, r23
    15a6:	21 f0       	breq	.+8      	; 0x15b0 <__floatsisf+0x54>
    15a8:	9e e8       	ldi	r25, 0x8E	; 142
    15aa:	87 2f       	mov	r24, r23
    15ac:	76 2f       	mov	r23, r22
    15ae:	05 c0       	rjmp	.+10     	; 0x15ba <__floatsisf+0x5e>
    15b0:	66 23       	and	r22, r22
    15b2:	71 f0       	breq	.+28     	; 0x15d0 <__floatsisf+0x74>
    15b4:	96 e8       	ldi	r25, 0x86	; 134
    15b6:	86 2f       	mov	r24, r22
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	2a f0       	brmi	.+10     	; 0x15c8 <__floatsisf+0x6c>
    15be:	9a 95       	dec	r25
    15c0:	66 0f       	add	r22, r22
    15c2:	77 1f       	adc	r23, r23
    15c4:	88 1f       	adc	r24, r24
    15c6:	da f7       	brpl	.-10     	; 0x15be <__floatsisf+0x62>
    15c8:	88 0f       	add	r24, r24
    15ca:	96 95       	lsr	r25
    15cc:	87 95       	ror	r24
    15ce:	97 f9       	bld	r25, 7
    15d0:	08 95       	ret

000015d2 <__fp_inf>:
    15d2:	97 f9       	bld	r25, 7
    15d4:	9f 67       	ori	r25, 0x7F	; 127
    15d6:	80 e8       	ldi	r24, 0x80	; 128
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	08 95       	ret

000015de <__fp_nan>:
    15de:	9f ef       	ldi	r25, 0xFF	; 255
    15e0:	80 ec       	ldi	r24, 0xC0	; 192
    15e2:	08 95       	ret

000015e4 <__fp_pscA>:
    15e4:	00 24       	eor	r0, r0
    15e6:	0a 94       	dec	r0
    15e8:	16 16       	cp	r1, r22
    15ea:	17 06       	cpc	r1, r23
    15ec:	18 06       	cpc	r1, r24
    15ee:	09 06       	cpc	r0, r25
    15f0:	08 95       	ret

000015f2 <__fp_pscB>:
    15f2:	00 24       	eor	r0, r0
    15f4:	0a 94       	dec	r0
    15f6:	12 16       	cp	r1, r18
    15f8:	13 06       	cpc	r1, r19
    15fa:	14 06       	cpc	r1, r20
    15fc:	05 06       	cpc	r0, r21
    15fe:	08 95       	ret

00001600 <__fp_round>:
    1600:	09 2e       	mov	r0, r25
    1602:	03 94       	inc	r0
    1604:	00 0c       	add	r0, r0
    1606:	11 f4       	brne	.+4      	; 0x160c <__fp_round+0xc>
    1608:	88 23       	and	r24, r24
    160a:	52 f0       	brmi	.+20     	; 0x1620 <__fp_round+0x20>
    160c:	bb 0f       	add	r27, r27
    160e:	40 f4       	brcc	.+16     	; 0x1620 <__fp_round+0x20>
    1610:	bf 2b       	or	r27, r31
    1612:	11 f4       	brne	.+4      	; 0x1618 <__fp_round+0x18>
    1614:	60 ff       	sbrs	r22, 0
    1616:	04 c0       	rjmp	.+8      	; 0x1620 <__fp_round+0x20>
    1618:	6f 5f       	subi	r22, 0xFF	; 255
    161a:	7f 4f       	sbci	r23, 0xFF	; 255
    161c:	8f 4f       	sbci	r24, 0xFF	; 255
    161e:	9f 4f       	sbci	r25, 0xFF	; 255
    1620:	08 95       	ret

00001622 <__fp_split3>:
    1622:	57 fd       	sbrc	r21, 7
    1624:	90 58       	subi	r25, 0x80	; 128
    1626:	44 0f       	add	r20, r20
    1628:	55 1f       	adc	r21, r21
    162a:	59 f0       	breq	.+22     	; 0x1642 <__fp_splitA+0x10>
    162c:	5f 3f       	cpi	r21, 0xFF	; 255
    162e:	71 f0       	breq	.+28     	; 0x164c <__fp_splitA+0x1a>
    1630:	47 95       	ror	r20

00001632 <__fp_splitA>:
    1632:	88 0f       	add	r24, r24
    1634:	97 fb       	bst	r25, 7
    1636:	99 1f       	adc	r25, r25
    1638:	61 f0       	breq	.+24     	; 0x1652 <__fp_splitA+0x20>
    163a:	9f 3f       	cpi	r25, 0xFF	; 255
    163c:	79 f0       	breq	.+30     	; 0x165c <__fp_splitA+0x2a>
    163e:	87 95       	ror	r24
    1640:	08 95       	ret
    1642:	12 16       	cp	r1, r18
    1644:	13 06       	cpc	r1, r19
    1646:	14 06       	cpc	r1, r20
    1648:	55 1f       	adc	r21, r21
    164a:	f2 cf       	rjmp	.-28     	; 0x1630 <__fp_split3+0xe>
    164c:	46 95       	lsr	r20
    164e:	f1 df       	rcall	.-30     	; 0x1632 <__fp_splitA>
    1650:	08 c0       	rjmp	.+16     	; 0x1662 <__fp_splitA+0x30>
    1652:	16 16       	cp	r1, r22
    1654:	17 06       	cpc	r1, r23
    1656:	18 06       	cpc	r1, r24
    1658:	99 1f       	adc	r25, r25
    165a:	f1 cf       	rjmp	.-30     	; 0x163e <__fp_splitA+0xc>
    165c:	86 95       	lsr	r24
    165e:	71 05       	cpc	r23, r1
    1660:	61 05       	cpc	r22, r1
    1662:	08 94       	sec
    1664:	08 95       	ret

00001666 <__fp_zero>:
    1666:	e8 94       	clt

00001668 <__fp_szero>:
    1668:	bb 27       	eor	r27, r27
    166a:	66 27       	eor	r22, r22
    166c:	77 27       	eor	r23, r23
    166e:	cb 01       	movw	r24, r22
    1670:	97 f9       	bld	r25, 7
    1672:	08 95       	ret

00001674 <__mulsf3>:
    1674:	0b d0       	rcall	.+22     	; 0x168c <__mulsf3x>
    1676:	c4 cf       	rjmp	.-120    	; 0x1600 <__fp_round>
    1678:	b5 df       	rcall	.-150    	; 0x15e4 <__fp_pscA>
    167a:	28 f0       	brcs	.+10     	; 0x1686 <__mulsf3+0x12>
    167c:	ba df       	rcall	.-140    	; 0x15f2 <__fp_pscB>
    167e:	18 f0       	brcs	.+6      	; 0x1686 <__mulsf3+0x12>
    1680:	95 23       	and	r25, r21
    1682:	09 f0       	breq	.+2      	; 0x1686 <__mulsf3+0x12>
    1684:	a6 cf       	rjmp	.-180    	; 0x15d2 <__fp_inf>
    1686:	ab cf       	rjmp	.-170    	; 0x15de <__fp_nan>
    1688:	11 24       	eor	r1, r1
    168a:	ee cf       	rjmp	.-36     	; 0x1668 <__fp_szero>

0000168c <__mulsf3x>:
    168c:	ca df       	rcall	.-108    	; 0x1622 <__fp_split3>
    168e:	a0 f3       	brcs	.-24     	; 0x1678 <__mulsf3+0x4>

00001690 <__mulsf3_pse>:
    1690:	95 9f       	mul	r25, r21
    1692:	d1 f3       	breq	.-12     	; 0x1688 <__mulsf3+0x14>
    1694:	95 0f       	add	r25, r21
    1696:	50 e0       	ldi	r21, 0x00	; 0
    1698:	55 1f       	adc	r21, r21
    169a:	62 9f       	mul	r22, r18
    169c:	f0 01       	movw	r30, r0
    169e:	72 9f       	mul	r23, r18
    16a0:	bb 27       	eor	r27, r27
    16a2:	f0 0d       	add	r31, r0
    16a4:	b1 1d       	adc	r27, r1
    16a6:	63 9f       	mul	r22, r19
    16a8:	aa 27       	eor	r26, r26
    16aa:	f0 0d       	add	r31, r0
    16ac:	b1 1d       	adc	r27, r1
    16ae:	aa 1f       	adc	r26, r26
    16b0:	64 9f       	mul	r22, r20
    16b2:	66 27       	eor	r22, r22
    16b4:	b0 0d       	add	r27, r0
    16b6:	a1 1d       	adc	r26, r1
    16b8:	66 1f       	adc	r22, r22
    16ba:	82 9f       	mul	r24, r18
    16bc:	22 27       	eor	r18, r18
    16be:	b0 0d       	add	r27, r0
    16c0:	a1 1d       	adc	r26, r1
    16c2:	62 1f       	adc	r22, r18
    16c4:	73 9f       	mul	r23, r19
    16c6:	b0 0d       	add	r27, r0
    16c8:	a1 1d       	adc	r26, r1
    16ca:	62 1f       	adc	r22, r18
    16cc:	83 9f       	mul	r24, r19
    16ce:	a0 0d       	add	r26, r0
    16d0:	61 1d       	adc	r22, r1
    16d2:	22 1f       	adc	r18, r18
    16d4:	74 9f       	mul	r23, r20
    16d6:	33 27       	eor	r19, r19
    16d8:	a0 0d       	add	r26, r0
    16da:	61 1d       	adc	r22, r1
    16dc:	23 1f       	adc	r18, r19
    16de:	84 9f       	mul	r24, r20
    16e0:	60 0d       	add	r22, r0
    16e2:	21 1d       	adc	r18, r1
    16e4:	82 2f       	mov	r24, r18
    16e6:	76 2f       	mov	r23, r22
    16e8:	6a 2f       	mov	r22, r26
    16ea:	11 24       	eor	r1, r1
    16ec:	9f 57       	subi	r25, 0x7F	; 127
    16ee:	50 40       	sbci	r21, 0x00	; 0
    16f0:	8a f0       	brmi	.+34     	; 0x1714 <__mulsf3_pse+0x84>
    16f2:	e1 f0       	breq	.+56     	; 0x172c <__mulsf3_pse+0x9c>
    16f4:	88 23       	and	r24, r24
    16f6:	4a f0       	brmi	.+18     	; 0x170a <__mulsf3_pse+0x7a>
    16f8:	ee 0f       	add	r30, r30
    16fa:	ff 1f       	adc	r31, r31
    16fc:	bb 1f       	adc	r27, r27
    16fe:	66 1f       	adc	r22, r22
    1700:	77 1f       	adc	r23, r23
    1702:	88 1f       	adc	r24, r24
    1704:	91 50       	subi	r25, 0x01	; 1
    1706:	50 40       	sbci	r21, 0x00	; 0
    1708:	a9 f7       	brne	.-22     	; 0x16f4 <__mulsf3_pse+0x64>
    170a:	9e 3f       	cpi	r25, 0xFE	; 254
    170c:	51 05       	cpc	r21, r1
    170e:	70 f0       	brcs	.+28     	; 0x172c <__mulsf3_pse+0x9c>
    1710:	60 cf       	rjmp	.-320    	; 0x15d2 <__fp_inf>
    1712:	aa cf       	rjmp	.-172    	; 0x1668 <__fp_szero>
    1714:	5f 3f       	cpi	r21, 0xFF	; 255
    1716:	ec f3       	brlt	.-6      	; 0x1712 <__mulsf3_pse+0x82>
    1718:	98 3e       	cpi	r25, 0xE8	; 232
    171a:	dc f3       	brlt	.-10     	; 0x1712 <__mulsf3_pse+0x82>
    171c:	86 95       	lsr	r24
    171e:	77 95       	ror	r23
    1720:	67 95       	ror	r22
    1722:	b7 95       	ror	r27
    1724:	f7 95       	ror	r31
    1726:	e7 95       	ror	r30
    1728:	9f 5f       	subi	r25, 0xFF	; 255
    172a:	c1 f7       	brne	.-16     	; 0x171c <__mulsf3_pse+0x8c>
    172c:	fe 2b       	or	r31, r30
    172e:	88 0f       	add	r24, r24
    1730:	91 1d       	adc	r25, r1
    1732:	96 95       	lsr	r25
    1734:	87 95       	ror	r24
    1736:	97 f9       	bld	r25, 7
    1738:	08 95       	ret

0000173a <pow>:
    173a:	fa 01       	movw	r30, r20
    173c:	ee 0f       	add	r30, r30
    173e:	ff 1f       	adc	r31, r31
    1740:	30 96       	adiw	r30, 0x00	; 0
    1742:	21 05       	cpc	r18, r1
    1744:	31 05       	cpc	r19, r1
    1746:	99 f1       	breq	.+102    	; 0x17ae <pow+0x74>
    1748:	61 15       	cp	r22, r1
    174a:	71 05       	cpc	r23, r1
    174c:	61 f4       	brne	.+24     	; 0x1766 <pow+0x2c>
    174e:	80 38       	cpi	r24, 0x80	; 128
    1750:	bf e3       	ldi	r27, 0x3F	; 63
    1752:	9b 07       	cpc	r25, r27
    1754:	49 f1       	breq	.+82     	; 0x17a8 <pow+0x6e>
    1756:	68 94       	set
    1758:	90 38       	cpi	r25, 0x80	; 128
    175a:	81 05       	cpc	r24, r1
    175c:	61 f0       	breq	.+24     	; 0x1776 <pow+0x3c>
    175e:	80 38       	cpi	r24, 0x80	; 128
    1760:	bf ef       	ldi	r27, 0xFF	; 255
    1762:	9b 07       	cpc	r25, r27
    1764:	41 f0       	breq	.+16     	; 0x1776 <pow+0x3c>
    1766:	99 23       	and	r25, r25
    1768:	42 f5       	brpl	.+80     	; 0x17ba <pow+0x80>
    176a:	ff 3f       	cpi	r31, 0xFF	; 255
    176c:	e1 05       	cpc	r30, r1
    176e:	31 05       	cpc	r19, r1
    1770:	21 05       	cpc	r18, r1
    1772:	11 f1       	breq	.+68     	; 0x17b8 <pow+0x7e>
    1774:	e8 94       	clt
    1776:	08 94       	sec
    1778:	e7 95       	ror	r30
    177a:	d9 01       	movw	r26, r18
    177c:	aa 23       	and	r26, r26
    177e:	29 f4       	brne	.+10     	; 0x178a <pow+0x50>
    1780:	ab 2f       	mov	r26, r27
    1782:	be 2f       	mov	r27, r30
    1784:	f8 5f       	subi	r31, 0xF8	; 248
    1786:	d0 f3       	brcs	.-12     	; 0x177c <pow+0x42>
    1788:	10 c0       	rjmp	.+32     	; 0x17aa <pow+0x70>
    178a:	ff 5f       	subi	r31, 0xFF	; 255
    178c:	70 f4       	brcc	.+28     	; 0x17aa <pow+0x70>
    178e:	a6 95       	lsr	r26
    1790:	e0 f7       	brcc	.-8      	; 0x178a <pow+0x50>
    1792:	f7 39       	cpi	r31, 0x97	; 151
    1794:	50 f0       	brcs	.+20     	; 0x17aa <pow+0x70>
    1796:	19 f0       	breq	.+6      	; 0x179e <pow+0x64>
    1798:	ff 3a       	cpi	r31, 0xAF	; 175
    179a:	38 f4       	brcc	.+14     	; 0x17aa <pow+0x70>
    179c:	9f 77       	andi	r25, 0x7F	; 127
    179e:	9f 93       	push	r25
    17a0:	0c d0       	rcall	.+24     	; 0x17ba <pow+0x80>
    17a2:	0f 90       	pop	r0
    17a4:	07 fc       	sbrc	r0, 7
    17a6:	90 58       	subi	r25, 0x80	; 128
    17a8:	08 95       	ret
    17aa:	3e f0       	brts	.+14     	; 0x17ba <pow+0x80>
    17ac:	18 cf       	rjmp	.-464    	; 0x15de <__fp_nan>
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	70 e0       	ldi	r23, 0x00	; 0
    17b2:	80 e8       	ldi	r24, 0x80	; 128
    17b4:	9f e3       	ldi	r25, 0x3F	; 63
    17b6:	08 95       	ret
    17b8:	4f e7       	ldi	r20, 0x7F	; 127
    17ba:	9f 77       	andi	r25, 0x7F	; 127
    17bc:	5f 93       	push	r21
    17be:	4f 93       	push	r20
    17c0:	3f 93       	push	r19
    17c2:	2f 93       	push	r18
    17c4:	9e d0       	rcall	.+316    	; 0x1902 <log>
    17c6:	2f 91       	pop	r18
    17c8:	3f 91       	pop	r19
    17ca:	4f 91       	pop	r20
    17cc:	5f 91       	pop	r21
    17ce:	52 df       	rcall	.-348    	; 0x1674 <__mulsf3>
    17d0:	05 c0       	rjmp	.+10     	; 0x17dc <exp>
    17d2:	19 f4       	brne	.+6      	; 0x17da <pow+0xa0>
    17d4:	0e f0       	brts	.+2      	; 0x17d8 <pow+0x9e>
    17d6:	fd ce       	rjmp	.-518    	; 0x15d2 <__fp_inf>
    17d8:	46 cf       	rjmp	.-372    	; 0x1666 <__fp_zero>
    17da:	01 cf       	rjmp	.-510    	; 0x15de <__fp_nan>

000017dc <exp>:
    17dc:	2a df       	rcall	.-428    	; 0x1632 <__fp_splitA>
    17de:	c8 f3       	brcs	.-14     	; 0x17d2 <pow+0x98>
    17e0:	96 38       	cpi	r25, 0x86	; 134
    17e2:	c0 f7       	brcc	.-16     	; 0x17d4 <pow+0x9a>
    17e4:	07 f8       	bld	r0, 7
    17e6:	0f 92       	push	r0
    17e8:	e8 94       	clt
    17ea:	2b e3       	ldi	r18, 0x3B	; 59
    17ec:	3a ea       	ldi	r19, 0xAA	; 170
    17ee:	48 eb       	ldi	r20, 0xB8	; 184
    17f0:	5f e7       	ldi	r21, 0x7F	; 127
    17f2:	4e df       	rcall	.-356    	; 0x1690 <__mulsf3_pse>
    17f4:	0f 92       	push	r0
    17f6:	0f 92       	push	r0
    17f8:	0f 92       	push	r0
    17fa:	4d b7       	in	r20, 0x3d	; 61
    17fc:	5e b7       	in	r21, 0x3e	; 62
    17fe:	0f 92       	push	r0
    1800:	c0 d0       	rcall	.+384    	; 0x1982 <modf>
    1802:	e4 e5       	ldi	r30, 0x54	; 84
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	16 d0       	rcall	.+44     	; 0x1834 <__fp_powser>
    1808:	4f 91       	pop	r20
    180a:	5f 91       	pop	r21
    180c:	ef 91       	pop	r30
    180e:	ff 91       	pop	r31
    1810:	e5 95       	asr	r30
    1812:	ee 1f       	adc	r30, r30
    1814:	ff 1f       	adc	r31, r31
    1816:	49 f0       	breq	.+18     	; 0x182a <exp+0x4e>
    1818:	fe 57       	subi	r31, 0x7E	; 126
    181a:	e0 68       	ori	r30, 0x80	; 128
    181c:	44 27       	eor	r20, r20
    181e:	ee 0f       	add	r30, r30
    1820:	44 1f       	adc	r20, r20
    1822:	fa 95       	dec	r31
    1824:	e1 f7       	brne	.-8      	; 0x181e <exp+0x42>
    1826:	41 95       	neg	r20
    1828:	55 0b       	sbc	r21, r21
    182a:	32 d0       	rcall	.+100    	; 0x1890 <ldexp>
    182c:	0f 90       	pop	r0
    182e:	07 fe       	sbrs	r0, 7
    1830:	26 c0       	rjmp	.+76     	; 0x187e <inverse>
    1832:	08 95       	ret

00001834 <__fp_powser>:
    1834:	df 93       	push	r29
    1836:	cf 93       	push	r28
    1838:	1f 93       	push	r17
    183a:	0f 93       	push	r16
    183c:	ff 92       	push	r15
    183e:	ef 92       	push	r14
    1840:	df 92       	push	r13
    1842:	7b 01       	movw	r14, r22
    1844:	8c 01       	movw	r16, r24
    1846:	68 94       	set
    1848:	05 c0       	rjmp	.+10     	; 0x1854 <__fp_powser+0x20>
    184a:	da 2e       	mov	r13, r26
    184c:	ef 01       	movw	r28, r30
    184e:	1e df       	rcall	.-452    	; 0x168c <__mulsf3x>
    1850:	fe 01       	movw	r30, r28
    1852:	e8 94       	clt
    1854:	a5 91       	lpm	r26, Z+
    1856:	25 91       	lpm	r18, Z+
    1858:	35 91       	lpm	r19, Z+
    185a:	45 91       	lpm	r20, Z+
    185c:	55 91       	lpm	r21, Z+
    185e:	ae f3       	brts	.-22     	; 0x184a <__fp_powser+0x16>
    1860:	ef 01       	movw	r28, r30
    1862:	8e dd       	rcall	.-1252   	; 0x1380 <__addsf3x>
    1864:	fe 01       	movw	r30, r28
    1866:	97 01       	movw	r18, r14
    1868:	a8 01       	movw	r20, r16
    186a:	da 94       	dec	r13
    186c:	79 f7       	brne	.-34     	; 0x184c <__fp_powser+0x18>
    186e:	df 90       	pop	r13
    1870:	ef 90       	pop	r14
    1872:	ff 90       	pop	r15
    1874:	0f 91       	pop	r16
    1876:	1f 91       	pop	r17
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <inverse>:
    187e:	9b 01       	movw	r18, r22
    1880:	ac 01       	movw	r20, r24
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	80 e8       	ldi	r24, 0x80	; 128
    1888:	9f e3       	ldi	r25, 0x3F	; 63
    188a:	cd cd       	rjmp	.-1126   	; 0x1426 <__divsf3>
    188c:	a2 ce       	rjmp	.-700    	; 0x15d2 <__fp_inf>
    188e:	ac c0       	rjmp	.+344    	; 0x19e8 <__fp_mpack>

00001890 <ldexp>:
    1890:	d0 de       	rcall	.-608    	; 0x1632 <__fp_splitA>
    1892:	e8 f3       	brcs	.-6      	; 0x188e <inverse+0x10>
    1894:	99 23       	and	r25, r25
    1896:	d9 f3       	breq	.-10     	; 0x188e <inverse+0x10>
    1898:	94 0f       	add	r25, r20
    189a:	51 1d       	adc	r21, r1
    189c:	bb f3       	brvs	.-18     	; 0x188c <inverse+0xe>
    189e:	91 50       	subi	r25, 0x01	; 1
    18a0:	50 40       	sbci	r21, 0x00	; 0
    18a2:	94 f0       	brlt	.+36     	; 0x18c8 <ldexp+0x38>
    18a4:	59 f0       	breq	.+22     	; 0x18bc <ldexp+0x2c>
    18a6:	88 23       	and	r24, r24
    18a8:	32 f0       	brmi	.+12     	; 0x18b6 <ldexp+0x26>
    18aa:	66 0f       	add	r22, r22
    18ac:	77 1f       	adc	r23, r23
    18ae:	88 1f       	adc	r24, r24
    18b0:	91 50       	subi	r25, 0x01	; 1
    18b2:	50 40       	sbci	r21, 0x00	; 0
    18b4:	c1 f7       	brne	.-16     	; 0x18a6 <ldexp+0x16>
    18b6:	9e 3f       	cpi	r25, 0xFE	; 254
    18b8:	51 05       	cpc	r21, r1
    18ba:	44 f7       	brge	.-48     	; 0x188c <inverse+0xe>
    18bc:	88 0f       	add	r24, r24
    18be:	91 1d       	adc	r25, r1
    18c0:	96 95       	lsr	r25
    18c2:	87 95       	ror	r24
    18c4:	97 f9       	bld	r25, 7
    18c6:	08 95       	ret
    18c8:	5f 3f       	cpi	r21, 0xFF	; 255
    18ca:	ac f0       	brlt	.+42     	; 0x18f6 <ldexp+0x66>
    18cc:	98 3e       	cpi	r25, 0xE8	; 232
    18ce:	9c f0       	brlt	.+38     	; 0x18f6 <ldexp+0x66>
    18d0:	bb 27       	eor	r27, r27
    18d2:	86 95       	lsr	r24
    18d4:	77 95       	ror	r23
    18d6:	67 95       	ror	r22
    18d8:	b7 95       	ror	r27
    18da:	08 f4       	brcc	.+2      	; 0x18de <ldexp+0x4e>
    18dc:	b1 60       	ori	r27, 0x01	; 1
    18de:	93 95       	inc	r25
    18e0:	c1 f7       	brne	.-16     	; 0x18d2 <ldexp+0x42>
    18e2:	bb 0f       	add	r27, r27
    18e4:	58 f7       	brcc	.-42     	; 0x18bc <ldexp+0x2c>
    18e6:	11 f4       	brne	.+4      	; 0x18ec <ldexp+0x5c>
    18e8:	60 ff       	sbrs	r22, 0
    18ea:	e8 cf       	rjmp	.-48     	; 0x18bc <ldexp+0x2c>
    18ec:	6f 5f       	subi	r22, 0xFF	; 255
    18ee:	7f 4f       	sbci	r23, 0xFF	; 255
    18f0:	8f 4f       	sbci	r24, 0xFF	; 255
    18f2:	9f 4f       	sbci	r25, 0xFF	; 255
    18f4:	e3 cf       	rjmp	.-58     	; 0x18bc <ldexp+0x2c>
    18f6:	b8 ce       	rjmp	.-656    	; 0x1668 <__fp_szero>
    18f8:	0e f0       	brts	.+2      	; 0x18fc <ldexp+0x6c>
    18fa:	76 c0       	rjmp	.+236    	; 0x19e8 <__fp_mpack>
    18fc:	70 ce       	rjmp	.-800    	; 0x15de <__fp_nan>
    18fe:	68 94       	set
    1900:	68 ce       	rjmp	.-816    	; 0x15d2 <__fp_inf>

00001902 <log>:
    1902:	97 de       	rcall	.-722    	; 0x1632 <__fp_splitA>
    1904:	c8 f3       	brcs	.-14     	; 0x18f8 <ldexp+0x68>
    1906:	99 23       	and	r25, r25
    1908:	d1 f3       	breq	.-12     	; 0x18fe <ldexp+0x6e>
    190a:	c6 f3       	brts	.-16     	; 0x18fc <ldexp+0x6c>
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	1f 93       	push	r17
    1912:	0f 93       	push	r16
    1914:	ff 92       	push	r15
    1916:	c9 2f       	mov	r28, r25
    1918:	dd 27       	eor	r29, r29
    191a:	88 23       	and	r24, r24
    191c:	2a f0       	brmi	.+10     	; 0x1928 <log+0x26>
    191e:	21 97       	sbiw	r28, 0x01	; 1
    1920:	66 0f       	add	r22, r22
    1922:	77 1f       	adc	r23, r23
    1924:	88 1f       	adc	r24, r24
    1926:	da f7       	brpl	.-10     	; 0x191e <log+0x1c>
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f eb       	ldi	r21, 0xBF	; 191
    1930:	9f e3       	ldi	r25, 0x3F	; 63
    1932:	88 39       	cpi	r24, 0x98	; 152
    1934:	20 f0       	brcs	.+8      	; 0x193e <log+0x3c>
    1936:	80 3e       	cpi	r24, 0xE0	; 224
    1938:	30 f0       	brcs	.+12     	; 0x1946 <log+0x44>
    193a:	21 96       	adiw	r28, 0x01	; 1
    193c:	8f 77       	andi	r24, 0x7F	; 127
    193e:	0f dd       	rcall	.-1506   	; 0x135e <__addsf3>
    1940:	ec e7       	ldi	r30, 0x7C	; 124
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	03 c0       	rjmp	.+6      	; 0x194c <log+0x4a>
    1946:	0b dd       	rcall	.-1514   	; 0x135e <__addsf3>
    1948:	e9 ea       	ldi	r30, 0xA9	; 169
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	73 df       	rcall	.-282    	; 0x1834 <__fp_powser>
    194e:	8b 01       	movw	r16, r22
    1950:	be 01       	movw	r22, r28
    1952:	ec 01       	movw	r28, r24
    1954:	fb 2e       	mov	r15, r27
    1956:	6f 57       	subi	r22, 0x7F	; 127
    1958:	71 09       	sbc	r23, r1
    195a:	75 95       	asr	r23
    195c:	77 1f       	adc	r23, r23
    195e:	88 0b       	sbc	r24, r24
    1960:	99 0b       	sbc	r25, r25
    1962:	fc dd       	rcall	.-1032   	; 0x155c <__floatsisf>
    1964:	28 e1       	ldi	r18, 0x18	; 24
    1966:	32 e7       	ldi	r19, 0x72	; 114
    1968:	41 e3       	ldi	r20, 0x31	; 49
    196a:	5f e3       	ldi	r21, 0x3F	; 63
    196c:	8f de       	rcall	.-738    	; 0x168c <__mulsf3x>
    196e:	af 2d       	mov	r26, r15
    1970:	98 01       	movw	r18, r16
    1972:	ae 01       	movw	r20, r28
    1974:	ff 90       	pop	r15
    1976:	0f 91       	pop	r16
    1978:	1f 91       	pop	r17
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	00 dd       	rcall	.-1536   	; 0x1380 <__addsf3x>
    1980:	3f ce       	rjmp	.-898    	; 0x1600 <__fp_round>

00001982 <modf>:
    1982:	fa 01       	movw	r30, r20
    1984:	dc 01       	movw	r26, r24
    1986:	aa 0f       	add	r26, r26
    1988:	bb 1f       	adc	r27, r27
    198a:	9b 01       	movw	r18, r22
    198c:	ac 01       	movw	r20, r24
    198e:	bf 57       	subi	r27, 0x7F	; 127
    1990:	28 f4       	brcc	.+10     	; 0x199c <modf+0x1a>
    1992:	22 27       	eor	r18, r18
    1994:	33 27       	eor	r19, r19
    1996:	44 27       	eor	r20, r20
    1998:	50 78       	andi	r21, 0x80	; 128
    199a:	1f c0       	rjmp	.+62     	; 0x19da <modf+0x58>
    199c:	b7 51       	subi	r27, 0x17	; 23
    199e:	88 f4       	brcc	.+34     	; 0x19c2 <modf+0x40>
    19a0:	ab 2f       	mov	r26, r27
    19a2:	00 24       	eor	r0, r0
    19a4:	46 95       	lsr	r20
    19a6:	37 95       	ror	r19
    19a8:	27 95       	ror	r18
    19aa:	01 1c       	adc	r0, r1
    19ac:	a3 95       	inc	r26
    19ae:	d2 f3       	brmi	.-12     	; 0x19a4 <modf+0x22>
    19b0:	00 20       	and	r0, r0
    19b2:	69 f0       	breq	.+26     	; 0x19ce <modf+0x4c>
    19b4:	22 0f       	add	r18, r18
    19b6:	33 1f       	adc	r19, r19
    19b8:	44 1f       	adc	r20, r20
    19ba:	b3 95       	inc	r27
    19bc:	da f3       	brmi	.-10     	; 0x19b4 <modf+0x32>
    19be:	0d d0       	rcall	.+26     	; 0x19da <modf+0x58>
    19c0:	cd cc       	rjmp	.-1638   	; 0x135c <__subsf3>
    19c2:	61 30       	cpi	r22, 0x01	; 1
    19c4:	71 05       	cpc	r23, r1
    19c6:	a0 e8       	ldi	r26, 0x80	; 128
    19c8:	8a 07       	cpc	r24, r26
    19ca:	b9 46       	sbci	r27, 0x69	; 105
    19cc:	30 f4       	brcc	.+12     	; 0x19da <modf+0x58>
    19ce:	9b 01       	movw	r18, r22
    19d0:	ac 01       	movw	r20, r24
    19d2:	66 27       	eor	r22, r22
    19d4:	77 27       	eor	r23, r23
    19d6:	88 27       	eor	r24, r24
    19d8:	90 78       	andi	r25, 0x80	; 128
    19da:	30 96       	adiw	r30, 0x00	; 0
    19dc:	21 f0       	breq	.+8      	; 0x19e6 <modf+0x64>
    19de:	20 83       	st	Z, r18
    19e0:	31 83       	std	Z+1, r19	; 0x01
    19e2:	42 83       	std	Z+2, r20	; 0x02
    19e4:	53 83       	std	Z+3, r21	; 0x03
    19e6:	08 95       	ret

000019e8 <__fp_mpack>:
    19e8:	9f 3f       	cpi	r25, 0xFF	; 255
    19ea:	31 f0       	breq	.+12     	; 0x19f8 <__fp_mpack_finite+0xc>

000019ec <__fp_mpack_finite>:
    19ec:	91 50       	subi	r25, 0x01	; 1
    19ee:	20 f4       	brcc	.+8      	; 0x19f8 <__fp_mpack_finite+0xc>
    19f0:	87 95       	ror	r24
    19f2:	77 95       	ror	r23
    19f4:	67 95       	ror	r22
    19f6:	b7 95       	ror	r27
    19f8:	88 0f       	add	r24, r24
    19fa:	91 1d       	adc	r25, r1
    19fc:	96 95       	lsr	r25
    19fe:	87 95       	ror	r24
    1a00:	97 f9       	bld	r25, 7
    1a02:	08 95       	ret

00001a04 <__mulsi3>:
    1a04:	62 9f       	mul	r22, r18
    1a06:	d0 01       	movw	r26, r0
    1a08:	73 9f       	mul	r23, r19
    1a0a:	f0 01       	movw	r30, r0
    1a0c:	82 9f       	mul	r24, r18
    1a0e:	e0 0d       	add	r30, r0
    1a10:	f1 1d       	adc	r31, r1
    1a12:	64 9f       	mul	r22, r20
    1a14:	e0 0d       	add	r30, r0
    1a16:	f1 1d       	adc	r31, r1
    1a18:	92 9f       	mul	r25, r18
    1a1a:	f0 0d       	add	r31, r0
    1a1c:	83 9f       	mul	r24, r19
    1a1e:	f0 0d       	add	r31, r0
    1a20:	74 9f       	mul	r23, r20
    1a22:	f0 0d       	add	r31, r0
    1a24:	65 9f       	mul	r22, r21
    1a26:	f0 0d       	add	r31, r0
    1a28:	99 27       	eor	r25, r25
    1a2a:	72 9f       	mul	r23, r18
    1a2c:	b0 0d       	add	r27, r0
    1a2e:	e1 1d       	adc	r30, r1
    1a30:	f9 1f       	adc	r31, r25
    1a32:	63 9f       	mul	r22, r19
    1a34:	b0 0d       	add	r27, r0
    1a36:	e1 1d       	adc	r30, r1
    1a38:	f9 1f       	adc	r31, r25
    1a3a:	bd 01       	movw	r22, r26
    1a3c:	cf 01       	movw	r24, r30
    1a3e:	11 24       	eor	r1, r1
    1a40:	08 95       	ret

00001a42 <__udivmodhi4>:
    1a42:	aa 1b       	sub	r26, r26
    1a44:	bb 1b       	sub	r27, r27
    1a46:	51 e1       	ldi	r21, 0x11	; 17
    1a48:	07 c0       	rjmp	.+14     	; 0x1a58 <__udivmodhi4_ep>

00001a4a <__udivmodhi4_loop>:
    1a4a:	aa 1f       	adc	r26, r26
    1a4c:	bb 1f       	adc	r27, r27
    1a4e:	a6 17       	cp	r26, r22
    1a50:	b7 07       	cpc	r27, r23
    1a52:	10 f0       	brcs	.+4      	; 0x1a58 <__udivmodhi4_ep>
    1a54:	a6 1b       	sub	r26, r22
    1a56:	b7 0b       	sbc	r27, r23

00001a58 <__udivmodhi4_ep>:
    1a58:	88 1f       	adc	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	5a 95       	dec	r21
    1a5e:	a9 f7       	brne	.-22     	; 0x1a4a <__udivmodhi4_loop>
    1a60:	80 95       	com	r24
    1a62:	90 95       	com	r25
    1a64:	bc 01       	movw	r22, r24
    1a66:	cd 01       	movw	r24, r26
    1a68:	08 95       	ret

00001a6a <__udivmodsi4>:
    1a6a:	a1 e2       	ldi	r26, 0x21	; 33
    1a6c:	1a 2e       	mov	r1, r26
    1a6e:	aa 1b       	sub	r26, r26
    1a70:	bb 1b       	sub	r27, r27
    1a72:	fd 01       	movw	r30, r26
    1a74:	0d c0       	rjmp	.+26     	; 0x1a90 <__udivmodsi4_ep>

00001a76 <__udivmodsi4_loop>:
    1a76:	aa 1f       	adc	r26, r26
    1a78:	bb 1f       	adc	r27, r27
    1a7a:	ee 1f       	adc	r30, r30
    1a7c:	ff 1f       	adc	r31, r31
    1a7e:	a2 17       	cp	r26, r18
    1a80:	b3 07       	cpc	r27, r19
    1a82:	e4 07       	cpc	r30, r20
    1a84:	f5 07       	cpc	r31, r21
    1a86:	20 f0       	brcs	.+8      	; 0x1a90 <__udivmodsi4_ep>
    1a88:	a2 1b       	sub	r26, r18
    1a8a:	b3 0b       	sbc	r27, r19
    1a8c:	e4 0b       	sbc	r30, r20
    1a8e:	f5 0b       	sbc	r31, r21

00001a90 <__udivmodsi4_ep>:
    1a90:	66 1f       	adc	r22, r22
    1a92:	77 1f       	adc	r23, r23
    1a94:	88 1f       	adc	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	1a 94       	dec	r1
    1a9a:	69 f7       	brne	.-38     	; 0x1a76 <__udivmodsi4_loop>
    1a9c:	60 95       	com	r22
    1a9e:	70 95       	com	r23
    1aa0:	80 95       	com	r24
    1aa2:	90 95       	com	r25
    1aa4:	9b 01       	movw	r18, r22
    1aa6:	ac 01       	movw	r20, r24
    1aa8:	bd 01       	movw	r22, r26
    1aaa:	cf 01       	movw	r24, r30
    1aac:	08 95       	ret

00001aae <__divmodsi4>:
    1aae:	97 fb       	bst	r25, 7
    1ab0:	09 2e       	mov	r0, r25
    1ab2:	05 26       	eor	r0, r21
    1ab4:	0e d0       	rcall	.+28     	; 0x1ad2 <__divmodsi4_neg1>
    1ab6:	57 fd       	sbrc	r21, 7
    1ab8:	04 d0       	rcall	.+8      	; 0x1ac2 <__divmodsi4_neg2>
    1aba:	d7 df       	rcall	.-82     	; 0x1a6a <__udivmodsi4>
    1abc:	0a d0       	rcall	.+20     	; 0x1ad2 <__divmodsi4_neg1>
    1abe:	00 1c       	adc	r0, r0
    1ac0:	38 f4       	brcc	.+14     	; 0x1ad0 <__divmodsi4_exit>

00001ac2 <__divmodsi4_neg2>:
    1ac2:	50 95       	com	r21
    1ac4:	40 95       	com	r20
    1ac6:	30 95       	com	r19
    1ac8:	21 95       	neg	r18
    1aca:	3f 4f       	sbci	r19, 0xFF	; 255
    1acc:	4f 4f       	sbci	r20, 0xFF	; 255
    1ace:	5f 4f       	sbci	r21, 0xFF	; 255

00001ad0 <__divmodsi4_exit>:
    1ad0:	08 95       	ret

00001ad2 <__divmodsi4_neg1>:
    1ad2:	f6 f7       	brtc	.-4      	; 0x1ad0 <__divmodsi4_exit>
    1ad4:	90 95       	com	r25
    1ad6:	80 95       	com	r24
    1ad8:	70 95       	com	r23
    1ada:	61 95       	neg	r22
    1adc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ade:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae2:	08 95       	ret

00001ae4 <itoa>:
    1ae4:	fb 01       	movw	r30, r22
    1ae6:	9f 01       	movw	r18, r30
    1ae8:	e8 94       	clt
    1aea:	42 30       	cpi	r20, 0x02	; 2
    1aec:	c4 f0       	brlt	.+48     	; 0x1b1e <itoa+0x3a>
    1aee:	45 32       	cpi	r20, 0x25	; 37
    1af0:	b4 f4       	brge	.+44     	; 0x1b1e <itoa+0x3a>
    1af2:	4a 30       	cpi	r20, 0x0A	; 10
    1af4:	29 f4       	brne	.+10     	; 0x1b00 <itoa+0x1c>
    1af6:	97 fb       	bst	r25, 7
    1af8:	1e f4       	brtc	.+6      	; 0x1b00 <itoa+0x1c>
    1afa:	90 95       	com	r25
    1afc:	81 95       	neg	r24
    1afe:	9f 4f       	sbci	r25, 0xFF	; 255
    1b00:	64 2f       	mov	r22, r20
    1b02:	77 27       	eor	r23, r23
    1b04:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <__udivmodhi4>
    1b08:	80 5d       	subi	r24, 0xD0	; 208
    1b0a:	8a 33       	cpi	r24, 0x3A	; 58
    1b0c:	0c f0       	brlt	.+2      	; 0x1b10 <itoa+0x2c>
    1b0e:	89 5d       	subi	r24, 0xD9	; 217
    1b10:	81 93       	st	Z+, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	a1 f7       	brne	.-24     	; 0x1b00 <itoa+0x1c>
    1b18:	16 f4       	brtc	.+4      	; 0x1b1e <itoa+0x3a>
    1b1a:	5d e2       	ldi	r21, 0x2D	; 45
    1b1c:	51 93       	st	Z+, r21
    1b1e:	10 82       	st	Z, r1
    1b20:	c9 01       	movw	r24, r18
    1b22:	0c 94 de 0f 	jmp	0x1fbc	; 0x1fbc <strrev>

00001b26 <ltoa>:
    1b26:	fa 01       	movw	r30, r20
    1b28:	cf 93       	push	r28
    1b2a:	ff 93       	push	r31
    1b2c:	ef 93       	push	r30
    1b2e:	22 30       	cpi	r18, 0x02	; 2
    1b30:	44 f1       	brlt	.+80     	; 0x1b82 <ltoa+0x5c>
    1b32:	25 32       	cpi	r18, 0x25	; 37
    1b34:	34 f5       	brge	.+76     	; 0x1b82 <ltoa+0x5c>
    1b36:	c2 2f       	mov	r28, r18
    1b38:	e8 94       	clt
    1b3a:	ca 30       	cpi	r28, 0x0A	; 10
    1b3c:	49 f4       	brne	.+18     	; 0x1b50 <ltoa+0x2a>
    1b3e:	97 fb       	bst	r25, 7
    1b40:	3e f4       	brtc	.+14     	; 0x1b50 <ltoa+0x2a>
    1b42:	90 95       	com	r25
    1b44:	80 95       	com	r24
    1b46:	70 95       	com	r23
    1b48:	61 95       	neg	r22
    1b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b50:	2c 2f       	mov	r18, r28
    1b52:	33 27       	eor	r19, r19
    1b54:	44 27       	eor	r20, r20
    1b56:	55 27       	eor	r21, r21
    1b58:	ff 93       	push	r31
    1b5a:	ef 93       	push	r30
    1b5c:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__udivmodsi4>
    1b60:	ef 91       	pop	r30
    1b62:	ff 91       	pop	r31
    1b64:	60 5d       	subi	r22, 0xD0	; 208
    1b66:	6a 33       	cpi	r22, 0x3A	; 58
    1b68:	0c f0       	brlt	.+2      	; 0x1b6c <ltoa+0x46>
    1b6a:	69 5d       	subi	r22, 0xD9	; 217
    1b6c:	61 93       	st	Z+, r22
    1b6e:	b9 01       	movw	r22, r18
    1b70:	ca 01       	movw	r24, r20
    1b72:	60 50       	subi	r22, 0x00	; 0
    1b74:	70 40       	sbci	r23, 0x00	; 0
    1b76:	80 40       	sbci	r24, 0x00	; 0
    1b78:	90 40       	sbci	r25, 0x00	; 0
    1b7a:	51 f7       	brne	.-44     	; 0x1b50 <ltoa+0x2a>
    1b7c:	16 f4       	brtc	.+4      	; 0x1b82 <ltoa+0x5c>
    1b7e:	cd e2       	ldi	r28, 0x2D	; 45
    1b80:	c1 93       	st	Z+, r28
    1b82:	10 82       	st	Z, r1
    1b84:	8f 91       	pop	r24
    1b86:	9f 91       	pop	r25
    1b88:	cf 91       	pop	r28
    1b8a:	0c 94 de 0f 	jmp	0x1fbc	; 0x1fbc <strrev>

00001b8e <sprintf>:
    1b8e:	ae e0       	ldi	r26, 0x0E	; 14
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	ed ec       	ldi	r30, 0xCD	; 205
    1b94:	fd e0       	ldi	r31, 0x0D	; 13
    1b96:	0c 94 86 10 	jmp	0x210c	; 0x210c <__prologue_saves__+0x1c>
    1b9a:	0d 89       	ldd	r16, Y+21	; 0x15
    1b9c:	1e 89       	ldd	r17, Y+22	; 0x16
    1b9e:	86 e0       	ldi	r24, 0x06	; 6
    1ba0:	8c 83       	std	Y+4, r24	; 0x04
    1ba2:	1a 83       	std	Y+2, r17	; 0x02
    1ba4:	09 83       	std	Y+1, r16	; 0x01
    1ba6:	8f ef       	ldi	r24, 0xFF	; 255
    1ba8:	9f e7       	ldi	r25, 0x7F	; 127
    1baa:	9e 83       	std	Y+6, r25	; 0x06
    1bac:	8d 83       	std	Y+5, r24	; 0x05
    1bae:	9e 01       	movw	r18, r28
    1bb0:	27 5e       	subi	r18, 0xE7	; 231
    1bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	01 96       	adiw	r24, 0x01	; 1
    1bb8:	6f 89       	ldd	r22, Y+23	; 0x17
    1bba:	78 8d       	ldd	r23, Y+24	; 0x18
    1bbc:	a9 01       	movw	r20, r18
    1bbe:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <vfprintf>
    1bc2:	2f 81       	ldd	r18, Y+7	; 0x07
    1bc4:	38 85       	ldd	r19, Y+8	; 0x08
    1bc6:	02 0f       	add	r16, r18
    1bc8:	13 1f       	adc	r17, r19
    1bca:	f8 01       	movw	r30, r16
    1bcc:	10 82       	st	Z, r1
    1bce:	2e 96       	adiw	r28, 0x0e	; 14
    1bd0:	e4 e0       	ldi	r30, 0x04	; 4
    1bd2:	0c 94 a2 10 	jmp	0x2144	; 0x2144 <__epilogue_restores__+0x1c>

00001bd6 <vfprintf>:
    1bd6:	ab e0       	ldi	r26, 0x0B	; 11
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e1 ef       	ldi	r30, 0xF1	; 241
    1bdc:	fd e0       	ldi	r31, 0x0D	; 13
    1bde:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <__prologue_saves__>
    1be2:	3c 01       	movw	r6, r24
    1be4:	2b 01       	movw	r4, r22
    1be6:	5a 01       	movw	r10, r20
    1be8:	fc 01       	movw	r30, r24
    1bea:	17 82       	std	Z+7, r1	; 0x07
    1bec:	16 82       	std	Z+6, r1	; 0x06
    1bee:	83 81       	ldd	r24, Z+3	; 0x03
    1bf0:	81 fd       	sbrc	r24, 1
    1bf2:	03 c0       	rjmp	.+6      	; 0x1bfa <vfprintf+0x24>
    1bf4:	6f ef       	ldi	r22, 0xFF	; 255
    1bf6:	7f ef       	ldi	r23, 0xFF	; 255
    1bf8:	c6 c1       	rjmp	.+908    	; 0x1f86 <vfprintf+0x3b0>
    1bfa:	9a e0       	ldi	r25, 0x0A	; 10
    1bfc:	89 2e       	mov	r8, r25
    1bfe:	1e 01       	movw	r2, r28
    1c00:	08 94       	sec
    1c02:	21 1c       	adc	r2, r1
    1c04:	31 1c       	adc	r3, r1
    1c06:	f3 01       	movw	r30, r6
    1c08:	23 81       	ldd	r18, Z+3	; 0x03
    1c0a:	f2 01       	movw	r30, r4
    1c0c:	23 fd       	sbrc	r18, 3
    1c0e:	85 91       	lpm	r24, Z+
    1c10:	23 ff       	sbrs	r18, 3
    1c12:	81 91       	ld	r24, Z+
    1c14:	2f 01       	movw	r4, r30
    1c16:	88 23       	and	r24, r24
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <vfprintf+0x46>
    1c1a:	b2 c1       	rjmp	.+868    	; 0x1f80 <vfprintf+0x3aa>
    1c1c:	85 32       	cpi	r24, 0x25	; 37
    1c1e:	39 f4       	brne	.+14     	; 0x1c2e <vfprintf+0x58>
    1c20:	23 fd       	sbrc	r18, 3
    1c22:	85 91       	lpm	r24, Z+
    1c24:	23 ff       	sbrs	r18, 3
    1c26:	81 91       	ld	r24, Z+
    1c28:	2f 01       	movw	r4, r30
    1c2a:	85 32       	cpi	r24, 0x25	; 37
    1c2c:	29 f4       	brne	.+10     	; 0x1c38 <vfprintf+0x62>
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	b3 01       	movw	r22, r6
    1c32:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <fputc>
    1c36:	e7 cf       	rjmp	.-50     	; 0x1c06 <vfprintf+0x30>
    1c38:	98 2f       	mov	r25, r24
    1c3a:	ff 24       	eor	r15, r15
    1c3c:	ee 24       	eor	r14, r14
    1c3e:	99 24       	eor	r9, r9
    1c40:	ff e1       	ldi	r31, 0x1F	; 31
    1c42:	ff 15       	cp	r31, r15
    1c44:	d0 f0       	brcs	.+52     	; 0x1c7a <vfprintf+0xa4>
    1c46:	9b 32       	cpi	r25, 0x2B	; 43
    1c48:	69 f0       	breq	.+26     	; 0x1c64 <vfprintf+0x8e>
    1c4a:	9c 32       	cpi	r25, 0x2C	; 44
    1c4c:	28 f4       	brcc	.+10     	; 0x1c58 <vfprintf+0x82>
    1c4e:	90 32       	cpi	r25, 0x20	; 32
    1c50:	59 f0       	breq	.+22     	; 0x1c68 <vfprintf+0x92>
    1c52:	93 32       	cpi	r25, 0x23	; 35
    1c54:	91 f4       	brne	.+36     	; 0x1c7a <vfprintf+0xa4>
    1c56:	0e c0       	rjmp	.+28     	; 0x1c74 <vfprintf+0x9e>
    1c58:	9d 32       	cpi	r25, 0x2D	; 45
    1c5a:	49 f0       	breq	.+18     	; 0x1c6e <vfprintf+0x98>
    1c5c:	90 33       	cpi	r25, 0x30	; 48
    1c5e:	69 f4       	brne	.+26     	; 0x1c7a <vfprintf+0xa4>
    1c60:	41 e0       	ldi	r20, 0x01	; 1
    1c62:	24 c0       	rjmp	.+72     	; 0x1cac <vfprintf+0xd6>
    1c64:	52 e0       	ldi	r21, 0x02	; 2
    1c66:	f5 2a       	or	r15, r21
    1c68:	84 e0       	ldi	r24, 0x04	; 4
    1c6a:	f8 2a       	or	r15, r24
    1c6c:	28 c0       	rjmp	.+80     	; 0x1cbe <vfprintf+0xe8>
    1c6e:	98 e0       	ldi	r25, 0x08	; 8
    1c70:	f9 2a       	or	r15, r25
    1c72:	25 c0       	rjmp	.+74     	; 0x1cbe <vfprintf+0xe8>
    1c74:	e0 e1       	ldi	r30, 0x10	; 16
    1c76:	fe 2a       	or	r15, r30
    1c78:	22 c0       	rjmp	.+68     	; 0x1cbe <vfprintf+0xe8>
    1c7a:	f7 fc       	sbrc	r15, 7
    1c7c:	29 c0       	rjmp	.+82     	; 0x1cd0 <vfprintf+0xfa>
    1c7e:	89 2f       	mov	r24, r25
    1c80:	80 53       	subi	r24, 0x30	; 48
    1c82:	8a 30       	cpi	r24, 0x0A	; 10
    1c84:	70 f4       	brcc	.+28     	; 0x1ca2 <vfprintf+0xcc>
    1c86:	f6 fe       	sbrs	r15, 6
    1c88:	05 c0       	rjmp	.+10     	; 0x1c94 <vfprintf+0xbe>
    1c8a:	98 9c       	mul	r9, r8
    1c8c:	90 2c       	mov	r9, r0
    1c8e:	11 24       	eor	r1, r1
    1c90:	98 0e       	add	r9, r24
    1c92:	15 c0       	rjmp	.+42     	; 0x1cbe <vfprintf+0xe8>
    1c94:	e8 9c       	mul	r14, r8
    1c96:	e0 2c       	mov	r14, r0
    1c98:	11 24       	eor	r1, r1
    1c9a:	e8 0e       	add	r14, r24
    1c9c:	f0 e2       	ldi	r31, 0x20	; 32
    1c9e:	ff 2a       	or	r15, r31
    1ca0:	0e c0       	rjmp	.+28     	; 0x1cbe <vfprintf+0xe8>
    1ca2:	9e 32       	cpi	r25, 0x2E	; 46
    1ca4:	29 f4       	brne	.+10     	; 0x1cb0 <vfprintf+0xda>
    1ca6:	f6 fc       	sbrc	r15, 6
    1ca8:	6b c1       	rjmp	.+726    	; 0x1f80 <vfprintf+0x3aa>
    1caa:	40 e4       	ldi	r20, 0x40	; 64
    1cac:	f4 2a       	or	r15, r20
    1cae:	07 c0       	rjmp	.+14     	; 0x1cbe <vfprintf+0xe8>
    1cb0:	9c 36       	cpi	r25, 0x6C	; 108
    1cb2:	19 f4       	brne	.+6      	; 0x1cba <vfprintf+0xe4>
    1cb4:	50 e8       	ldi	r21, 0x80	; 128
    1cb6:	f5 2a       	or	r15, r21
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <vfprintf+0xe8>
    1cba:	98 36       	cpi	r25, 0x68	; 104
    1cbc:	49 f4       	brne	.+18     	; 0x1cd0 <vfprintf+0xfa>
    1cbe:	f2 01       	movw	r30, r4
    1cc0:	23 fd       	sbrc	r18, 3
    1cc2:	95 91       	lpm	r25, Z+
    1cc4:	23 ff       	sbrs	r18, 3
    1cc6:	91 91       	ld	r25, Z+
    1cc8:	2f 01       	movw	r4, r30
    1cca:	99 23       	and	r25, r25
    1ccc:	09 f0       	breq	.+2      	; 0x1cd0 <vfprintf+0xfa>
    1cce:	b8 cf       	rjmp	.-144    	; 0x1c40 <vfprintf+0x6a>
    1cd0:	89 2f       	mov	r24, r25
    1cd2:	85 54       	subi	r24, 0x45	; 69
    1cd4:	83 30       	cpi	r24, 0x03	; 3
    1cd6:	18 f0       	brcs	.+6      	; 0x1cde <vfprintf+0x108>
    1cd8:	80 52       	subi	r24, 0x20	; 32
    1cda:	83 30       	cpi	r24, 0x03	; 3
    1cdc:	38 f4       	brcc	.+14     	; 0x1cec <vfprintf+0x116>
    1cde:	44 e0       	ldi	r20, 0x04	; 4
    1ce0:	50 e0       	ldi	r21, 0x00	; 0
    1ce2:	a4 0e       	add	r10, r20
    1ce4:	b5 1e       	adc	r11, r21
    1ce6:	5f e3       	ldi	r21, 0x3F	; 63
    1ce8:	59 83       	std	Y+1, r21	; 0x01
    1cea:	0f c0       	rjmp	.+30     	; 0x1d0a <vfprintf+0x134>
    1cec:	93 36       	cpi	r25, 0x63	; 99
    1cee:	31 f0       	breq	.+12     	; 0x1cfc <vfprintf+0x126>
    1cf0:	93 37       	cpi	r25, 0x73	; 115
    1cf2:	79 f0       	breq	.+30     	; 0x1d12 <vfprintf+0x13c>
    1cf4:	93 35       	cpi	r25, 0x53	; 83
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <vfprintf+0x124>
    1cf8:	56 c0       	rjmp	.+172    	; 0x1da6 <vfprintf+0x1d0>
    1cfa:	20 c0       	rjmp	.+64     	; 0x1d3c <vfprintf+0x166>
    1cfc:	f5 01       	movw	r30, r10
    1cfe:	80 81       	ld	r24, Z
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	42 e0       	ldi	r20, 0x02	; 2
    1d04:	50 e0       	ldi	r21, 0x00	; 0
    1d06:	a4 0e       	add	r10, r20
    1d08:	b5 1e       	adc	r11, r21
    1d0a:	61 01       	movw	r12, r2
    1d0c:	01 e0       	ldi	r16, 0x01	; 1
    1d0e:	10 e0       	ldi	r17, 0x00	; 0
    1d10:	12 c0       	rjmp	.+36     	; 0x1d36 <vfprintf+0x160>
    1d12:	f5 01       	movw	r30, r10
    1d14:	c0 80       	ld	r12, Z
    1d16:	d1 80       	ldd	r13, Z+1	; 0x01
    1d18:	f6 fc       	sbrc	r15, 6
    1d1a:	03 c0       	rjmp	.+6      	; 0x1d22 <vfprintf+0x14c>
    1d1c:	6f ef       	ldi	r22, 0xFF	; 255
    1d1e:	7f ef       	ldi	r23, 0xFF	; 255
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <vfprintf+0x150>
    1d22:	69 2d       	mov	r22, r9
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    1d26:	42 e0       	ldi	r20, 0x02	; 2
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	a4 0e       	add	r10, r20
    1d2c:	b5 1e       	adc	r11, r21
    1d2e:	c6 01       	movw	r24, r12
    1d30:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <strnlen>
    1d34:	8c 01       	movw	r16, r24
    1d36:	5f e7       	ldi	r21, 0x7F	; 127
    1d38:	f5 22       	and	r15, r21
    1d3a:	14 c0       	rjmp	.+40     	; 0x1d64 <vfprintf+0x18e>
    1d3c:	f5 01       	movw	r30, r10
    1d3e:	c0 80       	ld	r12, Z
    1d40:	d1 80       	ldd	r13, Z+1	; 0x01
    1d42:	f6 fc       	sbrc	r15, 6
    1d44:	03 c0       	rjmp	.+6      	; 0x1d4c <vfprintf+0x176>
    1d46:	6f ef       	ldi	r22, 0xFF	; 255
    1d48:	7f ef       	ldi	r23, 0xFF	; 255
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <vfprintf+0x17a>
    1d4c:	69 2d       	mov	r22, r9
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	42 e0       	ldi	r20, 0x02	; 2
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    1d54:	a4 0e       	add	r10, r20
    1d56:	b5 1e       	adc	r11, r21
    1d58:	c6 01       	movw	r24, r12
    1d5a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <strnlen_P>
    1d5e:	8c 01       	movw	r16, r24
    1d60:	50 e8       	ldi	r21, 0x80	; 128
    1d62:	f5 2a       	or	r15, r21
    1d64:	f3 fe       	sbrs	r15, 3
    1d66:	07 c0       	rjmp	.+14     	; 0x1d76 <vfprintf+0x1a0>
    1d68:	1a c0       	rjmp	.+52     	; 0x1d9e <vfprintf+0x1c8>
    1d6a:	80 e2       	ldi	r24, 0x20	; 32
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	b3 01       	movw	r22, r6
    1d70:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <fputc>
    1d74:	ea 94       	dec	r14
    1d76:	8e 2d       	mov	r24, r14
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	08 17       	cp	r16, r24
    1d7c:	19 07       	cpc	r17, r25
    1d7e:	a8 f3       	brcs	.-22     	; 0x1d6a <vfprintf+0x194>
    1d80:	0e c0       	rjmp	.+28     	; 0x1d9e <vfprintf+0x1c8>
    1d82:	f6 01       	movw	r30, r12
    1d84:	f7 fc       	sbrc	r15, 7
    1d86:	85 91       	lpm	r24, Z+
    1d88:	f7 fe       	sbrs	r15, 7
    1d8a:	81 91       	ld	r24, Z+
    1d8c:	6f 01       	movw	r12, r30
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	b3 01       	movw	r22, r6
    1d92:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <fputc>
    1d96:	e1 10       	cpse	r14, r1
    1d98:	ea 94       	dec	r14
    1d9a:	01 50       	subi	r16, 0x01	; 1
    1d9c:	10 40       	sbci	r17, 0x00	; 0
    1d9e:	01 15       	cp	r16, r1
    1da0:	11 05       	cpc	r17, r1
    1da2:	79 f7       	brne	.-34     	; 0x1d82 <vfprintf+0x1ac>
    1da4:	ea c0       	rjmp	.+468    	; 0x1f7a <vfprintf+0x3a4>
    1da6:	94 36       	cpi	r25, 0x64	; 100
    1da8:	11 f0       	breq	.+4      	; 0x1dae <vfprintf+0x1d8>
    1daa:	99 36       	cpi	r25, 0x69	; 105
    1dac:	69 f5       	brne	.+90     	; 0x1e08 <vfprintf+0x232>
    1dae:	f7 fe       	sbrs	r15, 7
    1db0:	08 c0       	rjmp	.+16     	; 0x1dc2 <vfprintf+0x1ec>
    1db2:	f5 01       	movw	r30, r10
    1db4:	20 81       	ld	r18, Z
    1db6:	31 81       	ldd	r19, Z+1	; 0x01
    1db8:	42 81       	ldd	r20, Z+2	; 0x02
    1dba:	53 81       	ldd	r21, Z+3	; 0x03
    1dbc:	84 e0       	ldi	r24, 0x04	; 4
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	0a c0       	rjmp	.+20     	; 0x1dd6 <vfprintf+0x200>
    1dc2:	f5 01       	movw	r30, r10
    1dc4:	80 81       	ld	r24, Z
    1dc6:	91 81       	ldd	r25, Z+1	; 0x01
    1dc8:	9c 01       	movw	r18, r24
    1dca:	44 27       	eor	r20, r20
    1dcc:	37 fd       	sbrc	r19, 7
    1dce:	40 95       	com	r20
    1dd0:	54 2f       	mov	r21, r20
    1dd2:	82 e0       	ldi	r24, 0x02	; 2
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	a8 0e       	add	r10, r24
    1dd8:	b9 1e       	adc	r11, r25
    1dda:	9f e6       	ldi	r25, 0x6F	; 111
    1ddc:	f9 22       	and	r15, r25
    1dde:	57 ff       	sbrs	r21, 7
    1de0:	09 c0       	rjmp	.+18     	; 0x1df4 <vfprintf+0x21e>
    1de2:	50 95       	com	r21
    1de4:	40 95       	com	r20
    1de6:	30 95       	com	r19
    1de8:	21 95       	neg	r18
    1dea:	3f 4f       	sbci	r19, 0xFF	; 255
    1dec:	4f 4f       	sbci	r20, 0xFF	; 255
    1dee:	5f 4f       	sbci	r21, 0xFF	; 255
    1df0:	e0 e8       	ldi	r30, 0x80	; 128
    1df2:	fe 2a       	or	r15, r30
    1df4:	ca 01       	movw	r24, r20
    1df6:	b9 01       	movw	r22, r18
    1df8:	a1 01       	movw	r20, r2
    1dfa:	2a e0       	ldi	r18, 0x0A	; 10
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	0e 94 1a 10 	call	0x2034	; 0x2034 <__ultoa_invert>
    1e02:	d8 2e       	mov	r13, r24
    1e04:	d2 18       	sub	r13, r2
    1e06:	40 c0       	rjmp	.+128    	; 0x1e88 <vfprintf+0x2b2>
    1e08:	95 37       	cpi	r25, 0x75	; 117
    1e0a:	29 f4       	brne	.+10     	; 0x1e16 <vfprintf+0x240>
    1e0c:	1f 2d       	mov	r17, r15
    1e0e:	1f 7e       	andi	r17, 0xEF	; 239
    1e10:	2a e0       	ldi	r18, 0x0A	; 10
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	1d c0       	rjmp	.+58     	; 0x1e50 <vfprintf+0x27a>
    1e16:	1f 2d       	mov	r17, r15
    1e18:	19 7f       	andi	r17, 0xF9	; 249
    1e1a:	9f 36       	cpi	r25, 0x6F	; 111
    1e1c:	61 f0       	breq	.+24     	; 0x1e36 <vfprintf+0x260>
    1e1e:	90 37       	cpi	r25, 0x70	; 112
    1e20:	20 f4       	brcc	.+8      	; 0x1e2a <vfprintf+0x254>
    1e22:	98 35       	cpi	r25, 0x58	; 88
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <vfprintf+0x252>
    1e26:	ac c0       	rjmp	.+344    	; 0x1f80 <vfprintf+0x3aa>
    1e28:	0f c0       	rjmp	.+30     	; 0x1e48 <vfprintf+0x272>
    1e2a:	90 37       	cpi	r25, 0x70	; 112
    1e2c:	39 f0       	breq	.+14     	; 0x1e3c <vfprintf+0x266>
    1e2e:	98 37       	cpi	r25, 0x78	; 120
    1e30:	09 f0       	breq	.+2      	; 0x1e34 <vfprintf+0x25e>
    1e32:	a6 c0       	rjmp	.+332    	; 0x1f80 <vfprintf+0x3aa>
    1e34:	04 c0       	rjmp	.+8      	; 0x1e3e <vfprintf+0x268>
    1e36:	28 e0       	ldi	r18, 0x08	; 8
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	0a c0       	rjmp	.+20     	; 0x1e50 <vfprintf+0x27a>
    1e3c:	10 61       	ori	r17, 0x10	; 16
    1e3e:	14 fd       	sbrc	r17, 4
    1e40:	14 60       	ori	r17, 0x04	; 4
    1e42:	20 e1       	ldi	r18, 0x10	; 16
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	04 c0       	rjmp	.+8      	; 0x1e50 <vfprintf+0x27a>
    1e48:	14 fd       	sbrc	r17, 4
    1e4a:	16 60       	ori	r17, 0x06	; 6
    1e4c:	20 e1       	ldi	r18, 0x10	; 16
    1e4e:	32 e0       	ldi	r19, 0x02	; 2
    1e50:	17 ff       	sbrs	r17, 7
    1e52:	08 c0       	rjmp	.+16     	; 0x1e64 <vfprintf+0x28e>
    1e54:	f5 01       	movw	r30, r10
    1e56:	60 81       	ld	r22, Z
    1e58:	71 81       	ldd	r23, Z+1	; 0x01
    1e5a:	82 81       	ldd	r24, Z+2	; 0x02
    1e5c:	93 81       	ldd	r25, Z+3	; 0x03
    1e5e:	44 e0       	ldi	r20, 0x04	; 4
    1e60:	50 e0       	ldi	r21, 0x00	; 0
    1e62:	08 c0       	rjmp	.+16     	; 0x1e74 <vfprintf+0x29e>
    1e64:	f5 01       	movw	r30, r10
    1e66:	80 81       	ld	r24, Z
    1e68:	91 81       	ldd	r25, Z+1	; 0x01
    1e6a:	bc 01       	movw	r22, r24
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	42 e0       	ldi	r20, 0x02	; 2
    1e72:	50 e0       	ldi	r21, 0x00	; 0
    1e74:	a4 0e       	add	r10, r20
    1e76:	b5 1e       	adc	r11, r21
    1e78:	a1 01       	movw	r20, r2
    1e7a:	0e 94 1a 10 	call	0x2034	; 0x2034 <__ultoa_invert>
    1e7e:	d8 2e       	mov	r13, r24
    1e80:	d2 18       	sub	r13, r2
    1e82:	8f e7       	ldi	r24, 0x7F	; 127
    1e84:	f8 2e       	mov	r15, r24
    1e86:	f1 22       	and	r15, r17
    1e88:	f6 fe       	sbrs	r15, 6
    1e8a:	0b c0       	rjmp	.+22     	; 0x1ea2 <vfprintf+0x2cc>
    1e8c:	5e ef       	ldi	r21, 0xFE	; 254
    1e8e:	f5 22       	and	r15, r21
    1e90:	d9 14       	cp	r13, r9
    1e92:	38 f4       	brcc	.+14     	; 0x1ea2 <vfprintf+0x2cc>
    1e94:	f4 fe       	sbrs	r15, 4
    1e96:	07 c0       	rjmp	.+14     	; 0x1ea6 <vfprintf+0x2d0>
    1e98:	f2 fc       	sbrc	r15, 2
    1e9a:	05 c0       	rjmp	.+10     	; 0x1ea6 <vfprintf+0x2d0>
    1e9c:	8f ee       	ldi	r24, 0xEF	; 239
    1e9e:	f8 22       	and	r15, r24
    1ea0:	02 c0       	rjmp	.+4      	; 0x1ea6 <vfprintf+0x2d0>
    1ea2:	1d 2d       	mov	r17, r13
    1ea4:	01 c0       	rjmp	.+2      	; 0x1ea8 <vfprintf+0x2d2>
    1ea6:	19 2d       	mov	r17, r9
    1ea8:	f4 fe       	sbrs	r15, 4
    1eaa:	0d c0       	rjmp	.+26     	; 0x1ec6 <vfprintf+0x2f0>
    1eac:	fe 01       	movw	r30, r28
    1eae:	ed 0d       	add	r30, r13
    1eb0:	f1 1d       	adc	r31, r1
    1eb2:	80 81       	ld	r24, Z
    1eb4:	80 33       	cpi	r24, 0x30	; 48
    1eb6:	19 f4       	brne	.+6      	; 0x1ebe <vfprintf+0x2e8>
    1eb8:	99 ee       	ldi	r25, 0xE9	; 233
    1eba:	f9 22       	and	r15, r25
    1ebc:	08 c0       	rjmp	.+16     	; 0x1ece <vfprintf+0x2f8>
    1ebe:	1f 5f       	subi	r17, 0xFF	; 255
    1ec0:	f2 fe       	sbrs	r15, 2
    1ec2:	05 c0       	rjmp	.+10     	; 0x1ece <vfprintf+0x2f8>
    1ec4:	03 c0       	rjmp	.+6      	; 0x1ecc <vfprintf+0x2f6>
    1ec6:	8f 2d       	mov	r24, r15
    1ec8:	86 78       	andi	r24, 0x86	; 134
    1eca:	09 f0       	breq	.+2      	; 0x1ece <vfprintf+0x2f8>
    1ecc:	1f 5f       	subi	r17, 0xFF	; 255
    1ece:	0f 2d       	mov	r16, r15
    1ed0:	f3 fc       	sbrc	r15, 3
    1ed2:	14 c0       	rjmp	.+40     	; 0x1efc <vfprintf+0x326>
    1ed4:	f0 fe       	sbrs	r15, 0
    1ed6:	0f c0       	rjmp	.+30     	; 0x1ef6 <vfprintf+0x320>
    1ed8:	1e 15       	cp	r17, r14
    1eda:	10 f0       	brcs	.+4      	; 0x1ee0 <vfprintf+0x30a>
    1edc:	9d 2c       	mov	r9, r13
    1ede:	0b c0       	rjmp	.+22     	; 0x1ef6 <vfprintf+0x320>
    1ee0:	9d 2c       	mov	r9, r13
    1ee2:	9e 0c       	add	r9, r14
    1ee4:	91 1a       	sub	r9, r17
    1ee6:	1e 2d       	mov	r17, r14
    1ee8:	06 c0       	rjmp	.+12     	; 0x1ef6 <vfprintf+0x320>
    1eea:	80 e2       	ldi	r24, 0x20	; 32
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	b3 01       	movw	r22, r6
    1ef0:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <fputc>
    1ef4:	1f 5f       	subi	r17, 0xFF	; 255
    1ef6:	1e 15       	cp	r17, r14
    1ef8:	c0 f3       	brcs	.-16     	; 0x1eea <vfprintf+0x314>
    1efa:	04 c0       	rjmp	.+8      	; 0x1f04 <vfprintf+0x32e>
    1efc:	1e 15       	cp	r17, r14
    1efe:	10 f4       	brcc	.+4      	; 0x1f04 <vfprintf+0x32e>
    1f00:	e1 1a       	sub	r14, r17
    1f02:	01 c0       	rjmp	.+2      	; 0x1f06 <vfprintf+0x330>
    1f04:	ee 24       	eor	r14, r14
    1f06:	04 ff       	sbrs	r16, 4
    1f08:	0f c0       	rjmp	.+30     	; 0x1f28 <vfprintf+0x352>
    1f0a:	80 e3       	ldi	r24, 0x30	; 48
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	b3 01       	movw	r22, r6
    1f10:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <fputc>
    1f14:	02 ff       	sbrs	r16, 2
    1f16:	1d c0       	rjmp	.+58     	; 0x1f52 <vfprintf+0x37c>
    1f18:	01 fd       	sbrc	r16, 1
    1f1a:	03 c0       	rjmp	.+6      	; 0x1f22 <vfprintf+0x34c>
    1f1c:	88 e7       	ldi	r24, 0x78	; 120
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	0e c0       	rjmp	.+28     	; 0x1f3e <vfprintf+0x368>
    1f22:	88 e5       	ldi	r24, 0x58	; 88
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	0b c0       	rjmp	.+22     	; 0x1f3e <vfprintf+0x368>
    1f28:	80 2f       	mov	r24, r16
    1f2a:	86 78       	andi	r24, 0x86	; 134
    1f2c:	91 f0       	breq	.+36     	; 0x1f52 <vfprintf+0x37c>
    1f2e:	01 ff       	sbrs	r16, 1
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <vfprintf+0x360>
    1f32:	8b e2       	ldi	r24, 0x2B	; 43
    1f34:	01 c0       	rjmp	.+2      	; 0x1f38 <vfprintf+0x362>
    1f36:	80 e2       	ldi	r24, 0x20	; 32
    1f38:	f7 fc       	sbrc	r15, 7
    1f3a:	8d e2       	ldi	r24, 0x2D	; 45
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	b3 01       	movw	r22, r6
    1f40:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <fputc>
    1f44:	06 c0       	rjmp	.+12     	; 0x1f52 <vfprintf+0x37c>
    1f46:	80 e3       	ldi	r24, 0x30	; 48
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	b3 01       	movw	r22, r6
    1f4c:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <fputc>
    1f50:	9a 94       	dec	r9
    1f52:	d9 14       	cp	r13, r9
    1f54:	c0 f3       	brcs	.-16     	; 0x1f46 <vfprintf+0x370>
    1f56:	da 94       	dec	r13
    1f58:	f1 01       	movw	r30, r2
    1f5a:	ed 0d       	add	r30, r13
    1f5c:	f1 1d       	adc	r31, r1
    1f5e:	80 81       	ld	r24, Z
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	b3 01       	movw	r22, r6
    1f64:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <fputc>
    1f68:	dd 20       	and	r13, r13
    1f6a:	a9 f7       	brne	.-22     	; 0x1f56 <vfprintf+0x380>
    1f6c:	06 c0       	rjmp	.+12     	; 0x1f7a <vfprintf+0x3a4>
    1f6e:	80 e2       	ldi	r24, 0x20	; 32
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	b3 01       	movw	r22, r6
    1f74:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <fputc>
    1f78:	ea 94       	dec	r14
    1f7a:	ee 20       	and	r14, r14
    1f7c:	c1 f7       	brne	.-16     	; 0x1f6e <vfprintf+0x398>
    1f7e:	43 ce       	rjmp	.-890    	; 0x1c06 <vfprintf+0x30>
    1f80:	f3 01       	movw	r30, r6
    1f82:	66 81       	ldd	r22, Z+6	; 0x06
    1f84:	77 81       	ldd	r23, Z+7	; 0x07
    1f86:	cb 01       	movw	r24, r22
    1f88:	2b 96       	adiw	r28, 0x0b	; 11
    1f8a:	e2 e1       	ldi	r30, 0x12	; 18
    1f8c:	0c 94 94 10 	jmp	0x2128	; 0x2128 <__epilogue_restores__>

00001f90 <strnlen_P>:
    1f90:	fc 01       	movw	r30, r24
    1f92:	05 90       	lpm	r0, Z+
    1f94:	61 50       	subi	r22, 0x01	; 1
    1f96:	70 40       	sbci	r23, 0x00	; 0
    1f98:	01 10       	cpse	r0, r1
    1f9a:	d8 f7       	brcc	.-10     	; 0x1f92 <strnlen_P+0x2>
    1f9c:	80 95       	com	r24
    1f9e:	90 95       	com	r25
    1fa0:	8e 0f       	add	r24, r30
    1fa2:	9f 1f       	adc	r25, r31
    1fa4:	08 95       	ret

00001fa6 <strnlen>:
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	61 50       	subi	r22, 0x01	; 1
    1faa:	70 40       	sbci	r23, 0x00	; 0
    1fac:	01 90       	ld	r0, Z+
    1fae:	01 10       	cpse	r0, r1
    1fb0:	d8 f7       	brcc	.-10     	; 0x1fa8 <strnlen+0x2>
    1fb2:	80 95       	com	r24
    1fb4:	90 95       	com	r25
    1fb6:	8e 0f       	add	r24, r30
    1fb8:	9f 1f       	adc	r25, r31
    1fba:	08 95       	ret

00001fbc <strrev>:
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	67 2f       	mov	r22, r23
    1fc2:	71 91       	ld	r23, Z+
    1fc4:	77 23       	and	r23, r23
    1fc6:	e1 f7       	brne	.-8      	; 0x1fc0 <strrev+0x4>
    1fc8:	32 97       	sbiw	r30, 0x02	; 2
    1fca:	04 c0       	rjmp	.+8      	; 0x1fd4 <strrev+0x18>
    1fcc:	7c 91       	ld	r23, X
    1fce:	6d 93       	st	X+, r22
    1fd0:	70 83       	st	Z, r23
    1fd2:	62 91       	ld	r22, -Z
    1fd4:	ae 17       	cp	r26, r30
    1fd6:	bf 07       	cpc	r27, r31
    1fd8:	c8 f3       	brcs	.-14     	; 0x1fcc <strrev+0x10>
    1fda:	08 95       	ret

00001fdc <fputc>:
    1fdc:	0f 93       	push	r16
    1fde:	1f 93       	push	r17
    1fe0:	cf 93       	push	r28
    1fe2:	df 93       	push	r29
    1fe4:	8c 01       	movw	r16, r24
    1fe6:	eb 01       	movw	r28, r22
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	81 ff       	sbrs	r24, 1
    1fec:	1b c0       	rjmp	.+54     	; 0x2024 <fputc+0x48>
    1fee:	82 ff       	sbrs	r24, 2
    1ff0:	0d c0       	rjmp	.+26     	; 0x200c <fputc+0x30>
    1ff2:	2e 81       	ldd	r18, Y+6	; 0x06
    1ff4:	3f 81       	ldd	r19, Y+7	; 0x07
    1ff6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff8:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffa:	28 17       	cp	r18, r24
    1ffc:	39 07       	cpc	r19, r25
    1ffe:	64 f4       	brge	.+24     	; 0x2018 <fputc+0x3c>
    2000:	e8 81       	ld	r30, Y
    2002:	f9 81       	ldd	r31, Y+1	; 0x01
    2004:	01 93       	st	Z+, r16
    2006:	f9 83       	std	Y+1, r31	; 0x01
    2008:	e8 83       	st	Y, r30
    200a:	06 c0       	rjmp	.+12     	; 0x2018 <fputc+0x3c>
    200c:	e8 85       	ldd	r30, Y+8	; 0x08
    200e:	f9 85       	ldd	r31, Y+9	; 0x09
    2010:	80 2f       	mov	r24, r16
    2012:	09 95       	icall
    2014:	89 2b       	or	r24, r25
    2016:	31 f4       	brne	.+12     	; 0x2024 <fputc+0x48>
    2018:	8e 81       	ldd	r24, Y+6	; 0x06
    201a:	9f 81       	ldd	r25, Y+7	; 0x07
    201c:	01 96       	adiw	r24, 0x01	; 1
    201e:	9f 83       	std	Y+7, r25	; 0x07
    2020:	8e 83       	std	Y+6, r24	; 0x06
    2022:	02 c0       	rjmp	.+4      	; 0x2028 <fputc+0x4c>
    2024:	0f ef       	ldi	r16, 0xFF	; 255
    2026:	1f ef       	ldi	r17, 0xFF	; 255
    2028:	c8 01       	movw	r24, r16
    202a:	df 91       	pop	r29
    202c:	cf 91       	pop	r28
    202e:	1f 91       	pop	r17
    2030:	0f 91       	pop	r16
    2032:	08 95       	ret

00002034 <__ultoa_invert>:
    2034:	fa 01       	movw	r30, r20
    2036:	aa 27       	eor	r26, r26
    2038:	28 30       	cpi	r18, 0x08	; 8
    203a:	51 f1       	breq	.+84     	; 0x2090 <__ultoa_invert+0x5c>
    203c:	20 31       	cpi	r18, 0x10	; 16
    203e:	81 f1       	breq	.+96     	; 0x20a0 <__ultoa_invert+0x6c>
    2040:	e8 94       	clt
    2042:	6f 93       	push	r22
    2044:	6e 7f       	andi	r22, 0xFE	; 254
    2046:	6e 5f       	subi	r22, 0xFE	; 254
    2048:	7f 4f       	sbci	r23, 0xFF	; 255
    204a:	8f 4f       	sbci	r24, 0xFF	; 255
    204c:	9f 4f       	sbci	r25, 0xFF	; 255
    204e:	af 4f       	sbci	r26, 0xFF	; 255
    2050:	b1 e0       	ldi	r27, 0x01	; 1
    2052:	3e d0       	rcall	.+124    	; 0x20d0 <__ultoa_invert+0x9c>
    2054:	b4 e0       	ldi	r27, 0x04	; 4
    2056:	3c d0       	rcall	.+120    	; 0x20d0 <__ultoa_invert+0x9c>
    2058:	67 0f       	add	r22, r23
    205a:	78 1f       	adc	r23, r24
    205c:	89 1f       	adc	r24, r25
    205e:	9a 1f       	adc	r25, r26
    2060:	a1 1d       	adc	r26, r1
    2062:	68 0f       	add	r22, r24
    2064:	79 1f       	adc	r23, r25
    2066:	8a 1f       	adc	r24, r26
    2068:	91 1d       	adc	r25, r1
    206a:	a1 1d       	adc	r26, r1
    206c:	6a 0f       	add	r22, r26
    206e:	71 1d       	adc	r23, r1
    2070:	81 1d       	adc	r24, r1
    2072:	91 1d       	adc	r25, r1
    2074:	a1 1d       	adc	r26, r1
    2076:	20 d0       	rcall	.+64     	; 0x20b8 <__ultoa_invert+0x84>
    2078:	09 f4       	brne	.+2      	; 0x207c <__ultoa_invert+0x48>
    207a:	68 94       	set
    207c:	3f 91       	pop	r19
    207e:	2a e0       	ldi	r18, 0x0A	; 10
    2080:	26 9f       	mul	r18, r22
    2082:	11 24       	eor	r1, r1
    2084:	30 19       	sub	r19, r0
    2086:	30 5d       	subi	r19, 0xD0	; 208
    2088:	31 93       	st	Z+, r19
    208a:	de f6       	brtc	.-74     	; 0x2042 <__ultoa_invert+0xe>
    208c:	cf 01       	movw	r24, r30
    208e:	08 95       	ret
    2090:	46 2f       	mov	r20, r22
    2092:	47 70       	andi	r20, 0x07	; 7
    2094:	40 5d       	subi	r20, 0xD0	; 208
    2096:	41 93       	st	Z+, r20
    2098:	b3 e0       	ldi	r27, 0x03	; 3
    209a:	0f d0       	rcall	.+30     	; 0x20ba <__ultoa_invert+0x86>
    209c:	c9 f7       	brne	.-14     	; 0x2090 <__ultoa_invert+0x5c>
    209e:	f6 cf       	rjmp	.-20     	; 0x208c <__ultoa_invert+0x58>
    20a0:	46 2f       	mov	r20, r22
    20a2:	4f 70       	andi	r20, 0x0F	; 15
    20a4:	40 5d       	subi	r20, 0xD0	; 208
    20a6:	4a 33       	cpi	r20, 0x3A	; 58
    20a8:	18 f0       	brcs	.+6      	; 0x20b0 <__ultoa_invert+0x7c>
    20aa:	49 5d       	subi	r20, 0xD9	; 217
    20ac:	31 fd       	sbrc	r19, 1
    20ae:	40 52       	subi	r20, 0x20	; 32
    20b0:	41 93       	st	Z+, r20
    20b2:	02 d0       	rcall	.+4      	; 0x20b8 <__ultoa_invert+0x84>
    20b4:	a9 f7       	brne	.-22     	; 0x20a0 <__ultoa_invert+0x6c>
    20b6:	ea cf       	rjmp	.-44     	; 0x208c <__ultoa_invert+0x58>
    20b8:	b4 e0       	ldi	r27, 0x04	; 4
    20ba:	a6 95       	lsr	r26
    20bc:	97 95       	ror	r25
    20be:	87 95       	ror	r24
    20c0:	77 95       	ror	r23
    20c2:	67 95       	ror	r22
    20c4:	ba 95       	dec	r27
    20c6:	c9 f7       	brne	.-14     	; 0x20ba <__ultoa_invert+0x86>
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	61 05       	cpc	r22, r1
    20cc:	71 05       	cpc	r23, r1
    20ce:	08 95       	ret
    20d0:	9b 01       	movw	r18, r22
    20d2:	ac 01       	movw	r20, r24
    20d4:	0a 2e       	mov	r0, r26
    20d6:	06 94       	lsr	r0
    20d8:	57 95       	ror	r21
    20da:	47 95       	ror	r20
    20dc:	37 95       	ror	r19
    20de:	27 95       	ror	r18
    20e0:	ba 95       	dec	r27
    20e2:	c9 f7       	brne	.-14     	; 0x20d6 <__ultoa_invert+0xa2>
    20e4:	62 0f       	add	r22, r18
    20e6:	73 1f       	adc	r23, r19
    20e8:	84 1f       	adc	r24, r20
    20ea:	95 1f       	adc	r25, r21
    20ec:	a0 1d       	adc	r26, r0
    20ee:	08 95       	ret

000020f0 <__prologue_saves__>:
    20f0:	2f 92       	push	r2
    20f2:	3f 92       	push	r3
    20f4:	4f 92       	push	r4
    20f6:	5f 92       	push	r5
    20f8:	6f 92       	push	r6
    20fa:	7f 92       	push	r7
    20fc:	8f 92       	push	r8
    20fe:	9f 92       	push	r9
    2100:	af 92       	push	r10
    2102:	bf 92       	push	r11
    2104:	cf 92       	push	r12
    2106:	df 92       	push	r13
    2108:	ef 92       	push	r14
    210a:	ff 92       	push	r15
    210c:	0f 93       	push	r16
    210e:	1f 93       	push	r17
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62
    2118:	ca 1b       	sub	r28, r26
    211a:	db 0b       	sbc	r29, r27
    211c:	0f b6       	in	r0, 0x3f	; 63
    211e:	f8 94       	cli
    2120:	de bf       	out	0x3e, r29	; 62
    2122:	0f be       	out	0x3f, r0	; 63
    2124:	cd bf       	out	0x3d, r28	; 61
    2126:	09 94       	ijmp

00002128 <__epilogue_restores__>:
    2128:	2a 88       	ldd	r2, Y+18	; 0x12
    212a:	39 88       	ldd	r3, Y+17	; 0x11
    212c:	48 88       	ldd	r4, Y+16	; 0x10
    212e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2130:	6e 84       	ldd	r6, Y+14	; 0x0e
    2132:	7d 84       	ldd	r7, Y+13	; 0x0d
    2134:	8c 84       	ldd	r8, Y+12	; 0x0c
    2136:	9b 84       	ldd	r9, Y+11	; 0x0b
    2138:	aa 84       	ldd	r10, Y+10	; 0x0a
    213a:	b9 84       	ldd	r11, Y+9	; 0x09
    213c:	c8 84       	ldd	r12, Y+8	; 0x08
    213e:	df 80       	ldd	r13, Y+7	; 0x07
    2140:	ee 80       	ldd	r14, Y+6	; 0x06
    2142:	fd 80       	ldd	r15, Y+5	; 0x05
    2144:	0c 81       	ldd	r16, Y+4	; 0x04
    2146:	1b 81       	ldd	r17, Y+3	; 0x03
    2148:	aa 81       	ldd	r26, Y+2	; 0x02
    214a:	b9 81       	ldd	r27, Y+1	; 0x01
    214c:	ce 0f       	add	r28, r30
    214e:	d1 1d       	adc	r29, r1
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	f8 94       	cli
    2154:	de bf       	out	0x3e, r29	; 62
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	cd bf       	out	0x3d, r28	; 61
    215a:	ed 01       	movw	r28, r26
    215c:	08 95       	ret

0000215e <_exit>:
    215e:	f8 94       	cli

00002160 <__stop_program>:
    2160:	ff cf       	rjmp	.-2      	; 0x2160 <__stop_program>
